//
// File generated by /usr/local_agile/root/root/bin/rootcint at Fri Oct 30 17:02:25 2015

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MCVDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TStreamerInfo.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TCollectionProxy.h"
#include "TIsAProxy.h"
// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void MCVFileInfo_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVFileInfo(void *p = 0);
   static void *newArray_MCVFileInfo(Long_t size, void *p);
   static void delete_MCVFileInfo(void *p);
   static void deleteArray_MCVFileInfo(void *p);
   static void destruct_MCVFileInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVFileInfo*)
   {
      ::MCVFileInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVFileInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVFileInfo", ::MCVFileInfo::Class_Version(), "code/MCVFileInfo.h", 28,
                  typeid(::MCVFileInfo), DefineBehavior(ptr, ptr),
                  &::MCVFileInfo::Dictionary, isa_proxy, 0,
                  sizeof(::MCVFileInfo) );
      instance.SetNew(&new_MCVFileInfo);
      instance.SetNewArray(&newArray_MCVFileInfo);
      instance.SetDelete(&delete_MCVFileInfo);
      instance.SetDeleteArray(&deleteArray_MCVFileInfo);
      instance.SetDestructor(&destruct_MCVFileInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVFileInfo*)
   {
      return GenerateInitInstanceLocal((::MCVFileInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVFileInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVFile_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVFile(void *p = 0);
   static void *newArray_MCVFile(Long_t size, void *p);
   static void delete_MCVFile(void *p);
   static void deleteArray_MCVFile(void *p);
   static void destruct_MCVFile(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVFile*)
   {
      ::MCVFile *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVFile >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVFile", ::MCVFile::Class_Version(), "code/MCVFile.h", 122,
                  typeid(::MCVFile), DefineBehavior(ptr, ptr),
                  &::MCVFile::Dictionary, isa_proxy, 0,
                  sizeof(::MCVFile) );
      instance.SetNew(&new_MCVFile);
      instance.SetNewArray(&newArray_MCVFile);
      instance.SetDelete(&delete_MCVFile);
      instance.SetDeleteArray(&deleteArray_MCVFile);
      instance.SetDestructor(&destruct_MCVFile);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVFile*)
   {
      return GenerateInitInstanceLocal((::MCVFile*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVFile*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVHisto_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVHisto(void *p = 0);
   static void *newArray_MCVHisto(Long_t size, void *p);
   static void delete_MCVHisto(void *p);
   static void deleteArray_MCVHisto(void *p);
   static void destruct_MCVHisto(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVHisto*)
   {
      ::MCVHisto *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVHisto >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVHisto", ::MCVHisto::Class_Version(), "code/MCVHisto.h", 32,
                  typeid(::MCVHisto), DefineBehavior(ptr, ptr),
                  &::MCVHisto::Dictionary, isa_proxy, 0,
                  sizeof(::MCVHisto) );
      instance.SetNew(&new_MCVHisto);
      instance.SetNewArray(&newArray_MCVHisto);
      instance.SetDelete(&delete_MCVHisto);
      instance.SetDeleteArray(&deleteArray_MCVHisto);
      instance.SetDestructor(&destruct_MCVHisto);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVHisto*)
   {
      return GenerateInitInstanceLocal((::MCVHisto*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVHisto*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVFileTE_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVFileTE(void *p = 0);
   static void *newArray_MCVFileTE(Long_t size, void *p);
   static void delete_MCVFileTE(void *p);
   static void deleteArray_MCVFileTE(void *p);
   static void destruct_MCVFileTE(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVFileTE*)
   {
      ::MCVFileTE *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVFileTE >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVFileTE", ::MCVFileTE::Class_Version(), "code/MCVFileTE.h", 29,
                  typeid(::MCVFileTE), DefineBehavior(ptr, ptr),
                  &::MCVFileTE::Dictionary, isa_proxy, 0,
                  sizeof(::MCVFileTE) );
      instance.SetNew(&new_MCVFileTE);
      instance.SetNewArray(&newArray_MCVFileTE);
      instance.SetDelete(&delete_MCVFileTE);
      instance.SetDeleteArray(&deleteArray_MCVFileTE);
      instance.SetDestructor(&destruct_MCVFileTE);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVFileTE*)
   {
      return GenerateInitInstanceLocal((::MCVFileTE*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVFileTE*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVFilePKP_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVFilePKP(void *p = 0);
   static void *newArray_MCVFilePKP(Long_t size, void *p);
   static void delete_MCVFilePKP(void *p);
   static void deleteArray_MCVFilePKP(void *p);
   static void destruct_MCVFilePKP(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVFilePKP*)
   {
      ::MCVFilePKP *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVFilePKP >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVFilePKP", ::MCVFilePKP::Class_Version(), "code/MCVFilePKP.h", 31,
                  typeid(::MCVFilePKP), DefineBehavior(ptr, ptr),
                  &::MCVFilePKP::Dictionary, isa_proxy, 0,
                  sizeof(::MCVFilePKP) );
      instance.SetNew(&new_MCVFilePKP);
      instance.SetNewArray(&newArray_MCVFilePKP);
      instance.SetDelete(&delete_MCVFilePKP);
      instance.SetDeleteArray(&deleteArray_MCVFilePKP);
      instance.SetDestructor(&destruct_MCVFilePKP);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVFilePKP*)
   {
      return GenerateInitInstanceLocal((::MCVFilePKP*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVFilePKP*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVStdAnalysis_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVStdAnalysis(void *p = 0);
   static void *newArray_MCVStdAnalysis(Long_t size, void *p);
   static void delete_MCVStdAnalysis(void *p);
   static void deleteArray_MCVStdAnalysis(void *p);
   static void destruct_MCVStdAnalysis(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVStdAnalysis*)
   {
      ::MCVStdAnalysis *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVStdAnalysis >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVStdAnalysis", ::MCVStdAnalysis::Class_Version(), "code/MCVStdAnalysis.h", 49,
                  typeid(::MCVStdAnalysis), DefineBehavior(ptr, ptr),
                  &::MCVStdAnalysis::Dictionary, isa_proxy, 0,
                  sizeof(::MCVStdAnalysis) );
      instance.SetNew(&new_MCVStdAnalysis);
      instance.SetNewArray(&newArray_MCVStdAnalysis);
      instance.SetDelete(&delete_MCVStdAnalysis);
      instance.SetDeleteArray(&deleteArray_MCVStdAnalysis);
      instance.SetDestructor(&destruct_MCVStdAnalysis);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVStdAnalysis*)
   {
      return GenerateInitInstanceLocal((::MCVStdAnalysis*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVStdAnalysis*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVGridOffset_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVGridOffset(void *p = 0);
   static void *newArray_MCVGridOffset(Long_t size, void *p);
   static void delete_MCVGridOffset(void *p);
   static void deleteArray_MCVGridOffset(void *p);
   static void destruct_MCVGridOffset(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVGridOffset*)
   {
      ::MCVGridOffset *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVGridOffset >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVGridOffset", ::MCVGridOffset::Class_Version(), "code/MCVGridOffset.h", 31,
                  typeid(::MCVGridOffset), DefineBehavior(ptr, ptr),
                  &::MCVGridOffset::Dictionary, isa_proxy, 0,
                  sizeof(::MCVGridOffset) );
      instance.SetNew(&new_MCVGridOffset);
      instance.SetNewArray(&newArray_MCVGridOffset);
      instance.SetDelete(&delete_MCVGridOffset);
      instance.SetDeleteArray(&deleteArray_MCVGridOffset);
      instance.SetDestructor(&destruct_MCVGridOffset);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVGridOffset*)
   {
      return GenerateInitInstanceLocal((::MCVGridOffset*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVGridOffset*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVCountRate_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVCountRate(void *p = 0);
   static void *newArray_MCVCountRate(Long_t size, void *p);
   static void delete_MCVCountRate(void *p);
   static void deleteArray_MCVCountRate(void *p);
   static void destruct_MCVCountRate(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVCountRate*)
   {
      ::MCVCountRate *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVCountRate >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVCountRate", ::MCVCountRate::Class_Version(), "code/MCVCountRate.h", 33,
                  typeid(::MCVCountRate), DefineBehavior(ptr, ptr),
                  &::MCVCountRate::Dictionary, isa_proxy, 0,
                  sizeof(::MCVCountRate) );
      instance.SetNew(&new_MCVCountRate);
      instance.SetNewArray(&newArray_MCVCountRate);
      instance.SetDelete(&delete_MCVCountRate);
      instance.SetDeleteArray(&deleteArray_MCVCountRate);
      instance.SetDestructor(&destruct_MCVCountRate);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVCountRate*)
   {
      return GenerateInitInstanceLocal((::MCVCountRate*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVCountRate*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVRetriggering_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVRetriggering(void *p = 0);
   static void *newArray_MCVRetriggering(Long_t size, void *p);
   static void delete_MCVRetriggering(void *p);
   static void deleteArray_MCVRetriggering(void *p);
   static void destruct_MCVRetriggering(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVRetriggering*)
   {
      ::MCVRetriggering *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVRetriggering >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVRetriggering", ::MCVRetriggering::Class_Version(), "code/MCVRetriggering.h", 30,
                  typeid(::MCVRetriggering), DefineBehavior(ptr, ptr),
                  &::MCVRetriggering::Dictionary, isa_proxy, 0,
                  sizeof(::MCVRetriggering) );
      instance.SetNew(&new_MCVRetriggering);
      instance.SetNewArray(&newArray_MCVRetriggering);
      instance.SetDelete(&delete_MCVRetriggering);
      instance.SetDeleteArray(&deleteArray_MCVRetriggering);
      instance.SetDestructor(&destruct_MCVRetriggering);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVRetriggering*)
   {
      return GenerateInitInstanceLocal((::MCVRetriggering*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVRetriggering*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVGlobalRetriggering_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVGlobalRetriggering(void *p = 0);
   static void *newArray_MCVGlobalRetriggering(Long_t size, void *p);
   static void delete_MCVGlobalRetriggering(void *p);
   static void deleteArray_MCVGlobalRetriggering(void *p);
   static void destruct_MCVGlobalRetriggering(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVGlobalRetriggering*)
   {
      ::MCVGlobalRetriggering *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVGlobalRetriggering >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVGlobalRetriggering", ::MCVGlobalRetriggering::Class_Version(), "code/MCVGlobalRetriggering.h", 30,
                  typeid(::MCVGlobalRetriggering), DefineBehavior(ptr, ptr),
                  &::MCVGlobalRetriggering::Dictionary, isa_proxy, 0,
                  sizeof(::MCVGlobalRetriggering) );
      instance.SetNew(&new_MCVGlobalRetriggering);
      instance.SetNewArray(&newArray_MCVGlobalRetriggering);
      instance.SetDelete(&delete_MCVGlobalRetriggering);
      instance.SetDeleteArray(&deleteArray_MCVGlobalRetriggering);
      instance.SetDestructor(&destruct_MCVGlobalRetriggering);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVGlobalRetriggering*)
   {
      return GenerateInitInstanceLocal((::MCVGlobalRetriggering*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVGlobalRetriggering*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVSciRM_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVSciRM(void *p = 0);
   static void *newArray_MCVSciRM(Long_t size, void *p);
   static void delete_MCVSciRM(void *p);
   static void deleteArray_MCVSciRM(void *p);
   static void destruct_MCVSciRM(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVSciRM*)
   {
      ::MCVSciRM *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVSciRM >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVSciRM", ::MCVSciRM::Class_Version(), "code/MCVSciRM.h", 30,
                  typeid(::MCVSciRM), DefineBehavior(ptr, ptr),
                  &::MCVSciRM::Dictionary, isa_proxy, 0,
                  sizeof(::MCVSciRM) );
      instance.SetNew(&new_MCVSciRM);
      instance.SetNewArray(&newArray_MCVSciRM);
      instance.SetDelete(&delete_MCVSciRM);
      instance.SetDeleteArray(&deleteArray_MCVSciRM);
      instance.SetDestructor(&destruct_MCVSciRM);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVSciRM*)
   {
      return GenerateInitInstanceLocal((::MCVSciRM*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVSciRM*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVFitPeak_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVFitPeak(void *p = 0);
   static void *newArray_MCVFitPeak(Long_t size, void *p);
   static void delete_MCVFitPeak(void *p);
   static void deleteArray_MCVFitPeak(void *p);
   static void destruct_MCVFitPeak(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVFitPeak*)
   {
      ::MCVFitPeak *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVFitPeak >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVFitPeak", ::MCVFitPeak::Class_Version(), "code/MCVFitPeak.h", 29,
                  typeid(::MCVFitPeak), DefineBehavior(ptr, ptr),
                  &::MCVFitPeak::Dictionary, isa_proxy, 0,
                  sizeof(::MCVFitPeak) );
      instance.SetNew(&new_MCVFitPeak);
      instance.SetNewArray(&newArray_MCVFitPeak);
      instance.SetDelete(&delete_MCVFitPeak);
      instance.SetDeleteArray(&deleteArray_MCVFitPeak);
      instance.SetDestructor(&destruct_MCVFitPeak);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVFitPeak*)
   {
      return GenerateInitInstanceLocal((::MCVFitPeak*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVFitPeak*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVBurstOffset_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVBurstOffset(void *p = 0);
   static void *newArray_MCVBurstOffset(Long_t size, void *p);
   static void delete_MCVBurstOffset(void *p);
   static void deleteArray_MCVBurstOffset(void *p);
   static void destruct_MCVBurstOffset(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVBurstOffset*)
   {
      ::MCVBurstOffset *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVBurstOffset >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVBurstOffset", ::MCVBurstOffset::Class_Version(), "code/MCVBurstOffset.h", 31,
                  typeid(::MCVBurstOffset), DefineBehavior(ptr, ptr),
                  &::MCVBurstOffset::Dictionary, isa_proxy, 0,
                  sizeof(::MCVBurstOffset) );
      instance.SetNew(&new_MCVBurstOffset);
      instance.SetNewArray(&newArray_MCVBurstOffset);
      instance.SetDelete(&delete_MCVBurstOffset);
      instance.SetDeleteArray(&deleteArray_MCVBurstOffset);
      instance.SetDestructor(&destruct_MCVBurstOffset);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVBurstOffset*)
   {
      return GenerateInitInstanceLocal((::MCVBurstOffset*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVBurstOffset*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVElectricalCalib_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVElectricalCalib(void *p = 0);
   static void *newArray_MCVElectricalCalib(Long_t size, void *p);
   static void delete_MCVElectricalCalib(void *p);
   static void deleteArray_MCVElectricalCalib(void *p);
   static void destruct_MCVElectricalCalib(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVElectricalCalib*)
   {
      ::MCVElectricalCalib *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVElectricalCalib >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVElectricalCalib", ::MCVElectricalCalib::Class_Version(), "code/MCVElectricalCalib.h", 32,
                  typeid(::MCVElectricalCalib), DefineBehavior(ptr, ptr),
                  &::MCVElectricalCalib::Dictionary, isa_proxy, 0,
                  sizeof(::MCVElectricalCalib) );
      instance.SetNew(&new_MCVElectricalCalib);
      instance.SetNewArray(&newArray_MCVElectricalCalib);
      instance.SetDelete(&delete_MCVElectricalCalib);
      instance.SetDeleteArray(&deleteArray_MCVElectricalCalib);
      instance.SetDestructor(&destruct_MCVElectricalCalib);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVElectricalCalib*)
   {
      return GenerateInitInstanceLocal((::MCVElectricalCalib*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVElectricalCalib*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVEnergyThreshold_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVEnergyThreshold(void *p = 0);
   static void *newArray_MCVEnergyThreshold(Long_t size, void *p);
   static void delete_MCVEnergyThreshold(void *p);
   static void deleteArray_MCVEnergyThreshold(void *p);
   static void destruct_MCVEnergyThreshold(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVEnergyThreshold*)
   {
      ::MCVEnergyThreshold *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVEnergyThreshold >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVEnergyThreshold", ::MCVEnergyThreshold::Class_Version(), "code/MCVEnergyThreshold.h", 31,
                  typeid(::MCVEnergyThreshold), DefineBehavior(ptr, ptr),
                  &::MCVEnergyThreshold::Dictionary, isa_proxy, 0,
                  sizeof(::MCVEnergyThreshold) );
      instance.SetNew(&new_MCVEnergyThreshold);
      instance.SetNewArray(&newArray_MCVEnergyThreshold);
      instance.SetDelete(&delete_MCVEnergyThreshold);
      instance.SetDeleteArray(&deleteArray_MCVEnergyThreshold);
      instance.SetDestructor(&destruct_MCVEnergyThreshold);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVEnergyThreshold*)
   {
      return GenerateInitInstanceLocal((::MCVEnergyThreshold*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVEnergyThreshold*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVGridEnergyCal_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVGridEnergyCal(void *p = 0);
   static void *newArray_MCVGridEnergyCal(Long_t size, void *p);
   static void delete_MCVGridEnergyCal(void *p);
   static void deleteArray_MCVGridEnergyCal(void *p);
   static void destruct_MCVGridEnergyCal(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVGridEnergyCal*)
   {
      ::MCVGridEnergyCal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVGridEnergyCal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVGridEnergyCal", ::MCVGridEnergyCal::Class_Version(), "code/MCVGridEnergyCal.h", 33,
                  typeid(::MCVGridEnergyCal), DefineBehavior(ptr, ptr),
                  &::MCVGridEnergyCal::Dictionary, isa_proxy, 0,
                  sizeof(::MCVGridEnergyCal) );
      instance.SetNew(&new_MCVGridEnergyCal);
      instance.SetNewArray(&newArray_MCVGridEnergyCal);
      instance.SetDelete(&delete_MCVGridEnergyCal);
      instance.SetDeleteArray(&deleteArray_MCVGridEnergyCal);
      instance.SetDestructor(&destruct_MCVGridEnergyCal);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVGridEnergyCal*)
   {
      return GenerateInitInstanceLocal((::MCVGridEnergyCal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVGridEnergyCal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVBarCorrelation_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVBarCorrelation(void *p = 0);
   static void *newArray_MCVBarCorrelation(Long_t size, void *p);
   static void delete_MCVBarCorrelation(void *p);
   static void deleteArray_MCVBarCorrelation(void *p);
   static void destruct_MCVBarCorrelation(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVBarCorrelation*)
   {
      ::MCVBarCorrelation *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVBarCorrelation >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVBarCorrelation", ::MCVBarCorrelation::Class_Version(), "code/MCVBarCorrelation.h", 27,
                  typeid(::MCVBarCorrelation), DefineBehavior(ptr, ptr),
                  &::MCVBarCorrelation::Dictionary, isa_proxy, 0,
                  sizeof(::MCVBarCorrelation) );
      instance.SetNew(&new_MCVBarCorrelation);
      instance.SetNewArray(&newArray_MCVBarCorrelation);
      instance.SetDelete(&delete_MCVBarCorrelation);
      instance.SetDeleteArray(&deleteArray_MCVBarCorrelation);
      instance.SetDestructor(&destruct_MCVBarCorrelation);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVBarCorrelation*)
   {
      return GenerateInitInstanceLocal((::MCVBarCorrelation*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVBarCorrelation*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVBkgSubtraction_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVBkgSubtraction(void *p = 0);
   static void *newArray_MCVBkgSubtraction(Long_t size, void *p);
   static void delete_MCVBkgSubtraction(void *p);
   static void deleteArray_MCVBkgSubtraction(void *p);
   static void destruct_MCVBkgSubtraction(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVBkgSubtraction*)
   {
      ::MCVBkgSubtraction *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVBkgSubtraction >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVBkgSubtraction", ::MCVBkgSubtraction::Class_Version(), "code/MCVBkgSubtraction.h", 32,
                  typeid(::MCVBkgSubtraction), DefineBehavior(ptr, ptr),
                  &::MCVBkgSubtraction::Dictionary, isa_proxy, 0,
                  sizeof(::MCVBkgSubtraction) );
      instance.SetNew(&new_MCVBkgSubtraction);
      instance.SetNewArray(&newArray_MCVBkgSubtraction);
      instance.SetDelete(&delete_MCVBkgSubtraction);
      instance.SetDeleteArray(&deleteArray_MCVBkgSubtraction);
      instance.SetDestructor(&destruct_MCVBkgSubtraction);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVBkgSubtraction*)
   {
      return GenerateInitInstanceLocal((::MCVBkgSubtraction*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVBkgSubtraction*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVBurstLandauFit_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVBurstLandauFit(void *p = 0);
   static void *newArray_MCVBurstLandauFit(Long_t size, void *p);
   static void delete_MCVBurstLandauFit(void *p);
   static void deleteArray_MCVBurstLandauFit(void *p);
   static void destruct_MCVBurstLandauFit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVBurstLandauFit*)
   {
      ::MCVBurstLandauFit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVBurstLandauFit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVBurstLandauFit", ::MCVBurstLandauFit::Class_Version(), "code/MCVBurstLandauFit.h", 27,
                  typeid(::MCVBurstLandauFit), DefineBehavior(ptr, ptr),
                  &::MCVBurstLandauFit::Dictionary, isa_proxy, 0,
                  sizeof(::MCVBurstLandauFit) );
      instance.SetNew(&new_MCVBurstLandauFit);
      instance.SetNewArray(&newArray_MCVBurstLandauFit);
      instance.SetDelete(&delete_MCVBurstLandauFit);
      instance.SetDeleteArray(&deleteArray_MCVBurstLandauFit);
      instance.SetDestructor(&destruct_MCVBurstLandauFit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVBurstLandauFit*)
   {
      return GenerateInitInstanceLocal((::MCVBurstLandauFit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVBurstLandauFit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVRawMonitor_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_MCVRawMonitor(void *p);
   static void deleteArray_MCVRawMonitor(void *p);
   static void destruct_MCVRawMonitor(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVRawMonitor*)
   {
      ::MCVRawMonitor *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVRawMonitor >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVRawMonitor", ::MCVRawMonitor::Class_Version(), "code/MCVRawMonitor.h", 127,
                  typeid(::MCVRawMonitor), DefineBehavior(ptr, ptr),
                  &::MCVRawMonitor::Dictionary, isa_proxy, 0,
                  sizeof(::MCVRawMonitor) );
      instance.SetDelete(&delete_MCVRawMonitor);
      instance.SetDeleteArray(&deleteArray_MCVRawMonitor);
      instance.SetDestructor(&destruct_MCVRawMonitor);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVRawMonitor*)
   {
      return GenerateInitInstanceLocal((::MCVRawMonitor*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVRawMonitor*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVAnalysis_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVAnalysis(void *p = 0);
   static void *newArray_MCVAnalysis(Long_t size, void *p);
   static void delete_MCVAnalysis(void *p);
   static void deleteArray_MCVAnalysis(void *p);
   static void destruct_MCVAnalysis(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVAnalysis*)
   {
      ::MCVAnalysis *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVAnalysis >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVAnalysis", ::MCVAnalysis::Class_Version(), "code/MCVAnalysis.h", 86,
                  typeid(::MCVAnalysis), DefineBehavior(ptr, ptr),
                  &::MCVAnalysis::Dictionary, isa_proxy, 0,
                  sizeof(::MCVAnalysis) );
      instance.SetNew(&new_MCVAnalysis);
      instance.SetNewArray(&newArray_MCVAnalysis);
      instance.SetDelete(&delete_MCVAnalysis);
      instance.SetDeleteArray(&deleteArray_MCVAnalysis);
      instance.SetDestructor(&destruct_MCVAnalysis);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVAnalysis*)
   {
      return GenerateInitInstanceLocal((::MCVAnalysis*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVAnalysis*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVBarMonitor_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVBarMonitor(void *p = 0);
   static void *newArray_MCVBarMonitor(Long_t size, void *p);
   static void delete_MCVBarMonitor(void *p);
   static void deleteArray_MCVBarMonitor(void *p);
   static void destruct_MCVBarMonitor(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVBarMonitor*)
   {
      ::MCVBarMonitor *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVBarMonitor >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVBarMonitor", ::MCVBarMonitor::Class_Version(), "code/MCVBarMonitor.h", 29,
                  typeid(::MCVBarMonitor), DefineBehavior(ptr, ptr),
                  &::MCVBarMonitor::Dictionary, isa_proxy, 0,
                  sizeof(::MCVBarMonitor) );
      instance.SetNew(&new_MCVBarMonitor);
      instance.SetNewArray(&newArray_MCVBarMonitor);
      instance.SetDelete(&delete_MCVBarMonitor);
      instance.SetDeleteArray(&deleteArray_MCVBarMonitor);
      instance.SetDestructor(&destruct_MCVBarMonitor);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVBarMonitor*)
   {
      return GenerateInitInstanceLocal((::MCVBarMonitor*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVBarMonitor*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVSelection_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVSelection(void *p = 0);
   static void *newArray_MCVSelection(Long_t size, void *p);
   static void delete_MCVSelection(void *p);
   static void deleteArray_MCVSelection(void *p);
   static void destruct_MCVSelection(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVSelection*)
   {
      ::MCVSelection *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVSelection >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVSelection", ::MCVSelection::Class_Version(), "code/MCVSelection.h", 39,
                  typeid(::MCVSelection), DefineBehavior(ptr, ptr),
                  &::MCVSelection::Dictionary, isa_proxy, 0,
                  sizeof(::MCVSelection) );
      instance.SetNew(&new_MCVSelection);
      instance.SetNewArray(&newArray_MCVSelection);
      instance.SetDelete(&delete_MCVSelection);
      instance.SetDeleteArray(&deleteArray_MCVSelection);
      instance.SetDestructor(&destruct_MCVSelection);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVSelection*)
   {
      return GenerateInitInstanceLocal((::MCVSelection*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVSelection*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVTree_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVTree(void *p = 0);
   static void *newArray_MCVTree(Long_t size, void *p);
   static void delete_MCVTree(void *p);
   static void deleteArray_MCVTree(void *p);
   static void destruct_MCVTree(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVTree*)
   {
      ::MCVTree *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVTree >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVTree", ::MCVTree::Class_Version(), "code/MCVTree.h", 37,
                  typeid(::MCVTree), DefineBehavior(ptr, ptr),
                  &::MCVTree::Dictionary, isa_proxy, 0,
                  sizeof(::MCVTree) );
      instance.SetNew(&new_MCVTree);
      instance.SetNewArray(&newArray_MCVTree);
      instance.SetDelete(&delete_MCVTree);
      instance.SetDeleteArray(&deleteArray_MCVTree);
      instance.SetDestructor(&destruct_MCVTree);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVTree*)
   {
      return GenerateInitInstanceLocal((::MCVTree*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVTree*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVSelectionGUI_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_MCVSelectionGUI(void *p);
   static void deleteArray_MCVSelectionGUI(void *p);
   static void destruct_MCVSelectionGUI(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVSelectionGUI*)
   {
      ::MCVSelectionGUI *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVSelectionGUI >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVSelectionGUI", ::MCVSelectionGUI::Class_Version(), "code/MCVSelectionGUI.h", 75,
                  typeid(::MCVSelectionGUI), DefineBehavior(ptr, ptr),
                  &::MCVSelectionGUI::Dictionary, isa_proxy, 0,
                  sizeof(::MCVSelectionGUI) );
      instance.SetDelete(&delete_MCVSelectionGUI);
      instance.SetDeleteArray(&deleteArray_MCVSelectionGUI);
      instance.SetDestructor(&destruct_MCVSelectionGUI);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVSelectionGUI*)
   {
      return GenerateInitInstanceLocal((::MCVSelectionGUI*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVSelectionGUI*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVHisto3908_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVHisto3908(void *p = 0);
   static void *newArray_MCVHisto3908(Long_t size, void *p);
   static void delete_MCVHisto3908(void *p);
   static void deleteArray_MCVHisto3908(void *p);
   static void destruct_MCVHisto3908(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVHisto3908*)
   {
      ::MCVHisto3908 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVHisto3908 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVHisto3908", ::MCVHisto3908::Class_Version(), "code/MCVHisto3908.h", 59,
                  typeid(::MCVHisto3908), DefineBehavior(ptr, ptr),
                  &::MCVHisto3908::Dictionary, isa_proxy, 0,
                  sizeof(::MCVHisto3908) );
      instance.SetNew(&new_MCVHisto3908);
      instance.SetNewArray(&newArray_MCVHisto3908);
      instance.SetDelete(&delete_MCVHisto3908);
      instance.SetDeleteArray(&deleteArray_MCVHisto3908);
      instance.SetDestructor(&destruct_MCVHisto3908);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVHisto3908*)
   {
      return GenerateInitInstanceLocal((::MCVHisto3908*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVHisto3908*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVBurst_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVBurst(void *p = 0);
   static void *newArray_MCVBurst(Long_t size, void *p);
   static void delete_MCVBurst(void *p);
   static void deleteArray_MCVBurst(void *p);
   static void destruct_MCVBurst(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVBurst*)
   {
      ::MCVBurst *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVBurst >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVBurst", ::MCVBurst::Class_Version(), "code/MCVBurst.h", 28,
                  typeid(::MCVBurst), DefineBehavior(ptr, ptr),
                  &::MCVBurst::Dictionary, isa_proxy, 0,
                  sizeof(::MCVBurst) );
      instance.SetNew(&new_MCVBurst);
      instance.SetNewArray(&newArray_MCVBurst);
      instance.SetDelete(&delete_MCVBurst);
      instance.SetDeleteArray(&deleteArray_MCVBurst);
      instance.SetDestructor(&destruct_MCVBurst);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVBurst*)
   {
      return GenerateInitInstanceLocal((::MCVBurst*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVBurst*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVFilePKP3908_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVFilePKP3908(void *p = 0);
   static void *newArray_MCVFilePKP3908(Long_t size, void *p);
   static void delete_MCVFilePKP3908(void *p);
   static void deleteArray_MCVFilePKP3908(void *p);
   static void destruct_MCVFilePKP3908(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVFilePKP3908*)
   {
      ::MCVFilePKP3908 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVFilePKP3908 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVFilePKP3908", ::MCVFilePKP3908::Class_Version(), "code/MCVFilePKP3908.h", 40,
                  typeid(::MCVFilePKP3908), DefineBehavior(ptr, ptr),
                  &::MCVFilePKP3908::Dictionary, isa_proxy, 0,
                  sizeof(::MCVFilePKP3908) );
      instance.SetNew(&new_MCVFilePKP3908);
      instance.SetNewArray(&newArray_MCVFilePKP3908);
      instance.SetDelete(&delete_MCVFilePKP3908);
      instance.SetDeleteArray(&deleteArray_MCVFilePKP3908);
      instance.SetDestructor(&destruct_MCVFilePKP3908);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVFilePKP3908*)
   {
      return GenerateInitInstanceLocal((::MCVFilePKP3908*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVFilePKP3908*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVbsrMonitor_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_MCVbsrMonitor(void *p);
   static void deleteArray_MCVbsrMonitor(void *p);
   static void destruct_MCVbsrMonitor(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVbsrMonitor*)
   {
      ::MCVbsrMonitor *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVbsrMonitor >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVbsrMonitor", ::MCVbsrMonitor::Class_Version(), "code/MCVbsrMonitor.h", 86,
                  typeid(::MCVbsrMonitor), DefineBehavior(ptr, ptr),
                  &::MCVbsrMonitor::Dictionary, isa_proxy, 0,
                  sizeof(::MCVbsrMonitor) );
      instance.SetDelete(&delete_MCVbsrMonitor);
      instance.SetDeleteArray(&deleteArray_MCVbsrMonitor);
      instance.SetDestructor(&destruct_MCVbsrMonitor);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVbsrMonitor*)
   {
      return GenerateInitInstanceLocal((::MCVbsrMonitor*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVbsrMonitor*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVbsrMonitor_ric_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_MCVbsrMonitor_ric(void *p);
   static void deleteArray_MCVbsrMonitor_ric(void *p);
   static void destruct_MCVbsrMonitor_ric(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVbsrMonitor_ric*)
   {
      ::MCVbsrMonitor_ric *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVbsrMonitor_ric >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVbsrMonitor_ric", ::MCVbsrMonitor_ric::Class_Version(), "code/MCVbsrMonitor_ric.h", 82,
                  typeid(::MCVbsrMonitor_ric), DefineBehavior(ptr, ptr),
                  &::MCVbsrMonitor_ric::Dictionary, isa_proxy, 0,
                  sizeof(::MCVbsrMonitor_ric) );
      instance.SetDelete(&delete_MCVbsrMonitor_ric);
      instance.SetDeleteArray(&deleteArray_MCVbsrMonitor_ric);
      instance.SetDestructor(&destruct_MCVbsrMonitor_ric);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVbsrMonitor_ric*)
   {
      return GenerateInitInstanceLocal((::MCVbsrMonitor_ric*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVbsrMonitor_ric*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVAntiCoincidence_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVAntiCoincidence(void *p = 0);
   static void *newArray_MCVAntiCoincidence(Long_t size, void *p);
   static void delete_MCVAntiCoincidence(void *p);
   static void deleteArray_MCVAntiCoincidence(void *p);
   static void destruct_MCVAntiCoincidence(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVAntiCoincidence*)
   {
      ::MCVAntiCoincidence *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVAntiCoincidence >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVAntiCoincidence", ::MCVAntiCoincidence::Class_Version(), "code/MCVAntiCoincidence.h", 31,
                  typeid(::MCVAntiCoincidence), DefineBehavior(ptr, ptr),
                  &::MCVAntiCoincidence::Dictionary, isa_proxy, 0,
                  sizeof(::MCVAntiCoincidence) );
      instance.SetNew(&new_MCVAntiCoincidence);
      instance.SetNewArray(&newArray_MCVAntiCoincidence);
      instance.SetDelete(&delete_MCVAntiCoincidence);
      instance.SetDeleteArray(&deleteArray_MCVAntiCoincidence);
      instance.SetDestructor(&destruct_MCVAntiCoincidence);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVAntiCoincidence*)
   {
      return GenerateInitInstanceLocal((::MCVAntiCoincidence*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVAntiCoincidence*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVCalibration_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MCVCalibration(void *p = 0);
   static void *newArray_MCVCalibration(Long_t size, void *p);
   static void delete_MCVCalibration(void *p);
   static void deleteArray_MCVCalibration(void *p);
   static void destruct_MCVCalibration(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVCalibration*)
   {
      ::MCVCalibration *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVCalibration >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVCalibration", ::MCVCalibration::Class_Version(), "code/MCVCalibration.h", 29,
                  typeid(::MCVCalibration), DefineBehavior(ptr, ptr),
                  &::MCVCalibration::Dictionary, isa_proxy, 0,
                  sizeof(::MCVCalibration) );
      instance.SetNew(&new_MCVCalibration);
      instance.SetNewArray(&newArray_MCVCalibration);
      instance.SetDelete(&delete_MCVCalibration);
      instance.SetDeleteArray(&deleteArray_MCVCalibration);
      instance.SetDestructor(&destruct_MCVCalibration);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVCalibration*)
   {
      return GenerateInitInstanceLocal((::MCVCalibration*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVCalibration*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVSubMS_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_MCVSubMS(void *p);
   static void deleteArray_MCVSubMS(void *p);
   static void destruct_MCVSubMS(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVSubMS*)
   {
      ::MCVSubMS *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVSubMS >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVSubMS", ::MCVSubMS::Class_Version(), "code/MCVSubMS.h", 32,
                  typeid(::MCVSubMS), DefineBehavior(ptr, ptr),
                  &::MCVSubMS::Dictionary, isa_proxy, 0,
                  sizeof(::MCVSubMS) );
      instance.SetDelete(&delete_MCVSubMS);
      instance.SetDeleteArray(&deleteArray_MCVSubMS);
      instance.SetDestructor(&destruct_MCVSubMS);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVSubMS*)
   {
      return GenerateInitInstanceLocal((::MCVSubMS*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVSubMS*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void GRB_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_GRB(void *p = 0);
   static void *newArray_GRB(Long_t size, void *p);
   static void delete_GRB(void *p);
   static void deleteArray_GRB(void *p);
   static void destruct_GRB(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::GRB*)
   {
      ::GRB *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GRB >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GRB", ::GRB::Class_Version(), "code/GRB.h", 54,
                  typeid(::GRB), DefineBehavior(ptr, ptr),
                  &::GRB::Dictionary, isa_proxy, 0,
                  sizeof(::GRB) );
      instance.SetNew(&new_GRB);
      instance.SetNewArray(&newArray_GRB);
      instance.SetDelete(&delete_GRB);
      instance.SetDeleteArray(&deleteArray_GRB);
      instance.SetDestructor(&destruct_GRB);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::GRB*)
   {
      return GenerateInitInstanceLocal((::GRB*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GRB*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void GRB3908_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_GRB3908(void *p = 0);
   static void *newArray_GRB3908(Long_t size, void *p);
   static void delete_GRB3908(void *p);
   static void deleteArray_GRB3908(void *p);
   static void destruct_GRB3908(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::GRB3908*)
   {
      ::GRB3908 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GRB3908 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GRB3908", ::GRB3908::Class_Version(), "code/GRB3908.h", 18,
                  typeid(::GRB3908), DefineBehavior(ptr, ptr),
                  &::GRB3908::Dictionary, isa_proxy, 0,
                  sizeof(::GRB3908) );
      instance.SetNew(&new_GRB3908);
      instance.SetNewArray(&newArray_GRB3908);
      instance.SetDelete(&delete_GRB3908);
      instance.SetDeleteArray(&deleteArray_GRB3908);
      instance.SetDestructor(&destruct_GRB3908);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::GRB3908*)
   {
      return GenerateInitInstanceLocal((::GRB3908*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GRB3908*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void GRB3913_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_GRB3913(void *p = 0);
   static void *newArray_GRB3913(Long_t size, void *p);
   static void delete_GRB3913(void *p);
   static void deleteArray_GRB3913(void *p);
   static void destruct_GRB3913(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::GRB3913*)
   {
      ::GRB3913 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GRB3913 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GRB3913", ::GRB3913::Class_Version(), "code/GRB3913.h", 18,
                  typeid(::GRB3913), DefineBehavior(ptr, ptr),
                  &::GRB3913::Dictionary, isa_proxy, 0,
                  sizeof(::GRB3913) );
      instance.SetNew(&new_GRB3913);
      instance.SetNewArray(&newArray_GRB3913);
      instance.SetDelete(&delete_GRB3913);
      instance.SetDeleteArray(&deleteArray_GRB3913);
      instance.SetDestructor(&destruct_GRB3913);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::GRB3913*)
   {
      return GenerateInitInstanceLocal((::GRB3913*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GRB3913*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void GRB3913XZ_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_GRB3913XZ(void *p = 0);
   static void *newArray_GRB3913XZ(Long_t size, void *p);
   static void delete_GRB3913XZ(void *p);
   static void deleteArray_GRB3913XZ(void *p);
   static void destruct_GRB3913XZ(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::GRB3913XZ*)
   {
      ::GRB3913XZ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GRB3913XZ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GRB3913XZ", ::GRB3913XZ::Class_Version(), "code/GRB3913XZ.h", 20,
                  typeid(::GRB3913XZ), DefineBehavior(ptr, ptr),
                  &::GRB3913XZ::Dictionary, isa_proxy, 0,
                  sizeof(::GRB3913XZ) );
      instance.SetNew(&new_GRB3913XZ);
      instance.SetNewArray(&newArray_GRB3913XZ);
      instance.SetDelete(&delete_GRB3913XZ);
      instance.SetDeleteArray(&deleteArray_GRB3913XZ);
      instance.SetDestructor(&destruct_GRB3913XZ);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::GRB3913XZ*)
   {
      return GenerateInitInstanceLocal((::GRB3913XZ*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GRB3913XZ*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVFile3916_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_MCVFile3916(void *p);
   static void deleteArray_MCVFile3916(void *p);
   static void destruct_MCVFile3916(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVFile3916*)
   {
      ::MCVFile3916 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVFile3916 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVFile3916", ::MCVFile3916::Class_Version(), "code/MCVFile3916.h", 57,
                  typeid(::MCVFile3916), DefineBehavior(ptr, ptr),
                  &::MCVFile3916::Dictionary, isa_proxy, 0,
                  sizeof(::MCVFile3916) );
      instance.SetDelete(&delete_MCVFile3916);
      instance.SetDeleteArray(&deleteArray_MCVFile3916);
      instance.SetDestructor(&destruct_MCVFile3916);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVFile3916*)
   {
      return GenerateInitInstanceLocal((::MCVFile3916*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVFile3916*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MCVFile3201_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_MCVFile3201(void *p);
   static void deleteArray_MCVFile3201(void *p);
   static void destruct_MCVFile3201(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCVFile3201*)
   {
      ::MCVFile3201 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCVFile3201 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCVFile3201", ::MCVFile3201::Class_Version(), "code/MCVFile3201.h", 57,
                  typeid(::MCVFile3201), DefineBehavior(ptr, ptr),
                  &::MCVFile3201::Dictionary, isa_proxy, 0,
                  sizeof(::MCVFile3201) );
      instance.SetDelete(&delete_MCVFile3201);
      instance.SetDeleteArray(&deleteArray_MCVFile3201);
      instance.SetDestructor(&destruct_MCVFile3201);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCVFile3201*)
   {
      return GenerateInitInstanceLocal((::MCVFile3201*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCVFile3201*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *MCVFileInfo::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVFileInfo::Class_Name()
{
   return "MCVFileInfo";
}

//______________________________________________________________________________
const char *MCVFileInfo::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVFileInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVFileInfo::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVFileInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVFileInfo::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVFileInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVFileInfo::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVFileInfo*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVFile::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVFile::Class_Name()
{
   return "MCVFile";
}

//______________________________________________________________________________
const char *MCVFile::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVFile*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVFile::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVFile*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVFile::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVFile*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVFile::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVFile*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVHisto::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVHisto::Class_Name()
{
   return "MCVHisto";
}

//______________________________________________________________________________
const char *MCVHisto::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVHisto*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVHisto::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVHisto*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVHisto::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVHisto*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVHisto::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVHisto*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVFileTE::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVFileTE::Class_Name()
{
   return "MCVFileTE";
}

//______________________________________________________________________________
const char *MCVFileTE::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVFileTE*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVFileTE::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVFileTE*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVFileTE::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVFileTE*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVFileTE::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVFileTE*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVFilePKP::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVFilePKP::Class_Name()
{
   return "MCVFilePKP";
}

//______________________________________________________________________________
const char *MCVFilePKP::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVFilePKP*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVFilePKP::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVFilePKP*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVFilePKP::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVFilePKP*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVFilePKP::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVFilePKP*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVStdAnalysis::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVStdAnalysis::Class_Name()
{
   return "MCVStdAnalysis";
}

//______________________________________________________________________________
const char *MCVStdAnalysis::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVStdAnalysis*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVStdAnalysis::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVStdAnalysis*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVStdAnalysis::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVStdAnalysis*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVStdAnalysis::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVStdAnalysis*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVGridOffset::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVGridOffset::Class_Name()
{
   return "MCVGridOffset";
}

//______________________________________________________________________________
const char *MCVGridOffset::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVGridOffset*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVGridOffset::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVGridOffset*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVGridOffset::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVGridOffset*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVGridOffset::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVGridOffset*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVCountRate::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVCountRate::Class_Name()
{
   return "MCVCountRate";
}

//______________________________________________________________________________
const char *MCVCountRate::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVCountRate*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVCountRate::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVCountRate*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVCountRate::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVCountRate*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVCountRate::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVCountRate*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVRetriggering::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVRetriggering::Class_Name()
{
   return "MCVRetriggering";
}

//______________________________________________________________________________
const char *MCVRetriggering::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVRetriggering*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVRetriggering::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVRetriggering*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVRetriggering::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVRetriggering*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVRetriggering::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVRetriggering*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVGlobalRetriggering::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVGlobalRetriggering::Class_Name()
{
   return "MCVGlobalRetriggering";
}

//______________________________________________________________________________
const char *MCVGlobalRetriggering::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVGlobalRetriggering*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVGlobalRetriggering::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVGlobalRetriggering*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVGlobalRetriggering::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVGlobalRetriggering*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVGlobalRetriggering::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVGlobalRetriggering*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVSciRM::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVSciRM::Class_Name()
{
   return "MCVSciRM";
}

//______________________________________________________________________________
const char *MCVSciRM::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVSciRM*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVSciRM::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVSciRM*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVSciRM::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVSciRM*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVSciRM::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVSciRM*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVFitPeak::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVFitPeak::Class_Name()
{
   return "MCVFitPeak";
}

//______________________________________________________________________________
const char *MCVFitPeak::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVFitPeak*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVFitPeak::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVFitPeak*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVFitPeak::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVFitPeak*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVFitPeak::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVFitPeak*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVBurstOffset::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVBurstOffset::Class_Name()
{
   return "MCVBurstOffset";
}

//______________________________________________________________________________
const char *MCVBurstOffset::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVBurstOffset*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVBurstOffset::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVBurstOffset*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVBurstOffset::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVBurstOffset*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVBurstOffset::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVBurstOffset*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVElectricalCalib::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVElectricalCalib::Class_Name()
{
   return "MCVElectricalCalib";
}

//______________________________________________________________________________
const char *MCVElectricalCalib::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVElectricalCalib*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVElectricalCalib::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVElectricalCalib*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVElectricalCalib::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVElectricalCalib*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVElectricalCalib::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVElectricalCalib*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVEnergyThreshold::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVEnergyThreshold::Class_Name()
{
   return "MCVEnergyThreshold";
}

//______________________________________________________________________________
const char *MCVEnergyThreshold::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVEnergyThreshold*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVEnergyThreshold::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVEnergyThreshold*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVEnergyThreshold::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVEnergyThreshold*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVEnergyThreshold::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVEnergyThreshold*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVGridEnergyCal::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVGridEnergyCal::Class_Name()
{
   return "MCVGridEnergyCal";
}

//______________________________________________________________________________
const char *MCVGridEnergyCal::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVGridEnergyCal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVGridEnergyCal::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVGridEnergyCal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVGridEnergyCal::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVGridEnergyCal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVGridEnergyCal::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVGridEnergyCal*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVBarCorrelation::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVBarCorrelation::Class_Name()
{
   return "MCVBarCorrelation";
}

//______________________________________________________________________________
const char *MCVBarCorrelation::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVBarCorrelation*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVBarCorrelation::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVBarCorrelation*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVBarCorrelation::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVBarCorrelation*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVBarCorrelation::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVBarCorrelation*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVBkgSubtraction::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVBkgSubtraction::Class_Name()
{
   return "MCVBkgSubtraction";
}

//______________________________________________________________________________
const char *MCVBkgSubtraction::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVBkgSubtraction*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVBkgSubtraction::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVBkgSubtraction*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVBkgSubtraction::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVBkgSubtraction*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVBkgSubtraction::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVBkgSubtraction*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVBurstLandauFit::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVBurstLandauFit::Class_Name()
{
   return "MCVBurstLandauFit";
}

//______________________________________________________________________________
const char *MCVBurstLandauFit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVBurstLandauFit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVBurstLandauFit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVBurstLandauFit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVBurstLandauFit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVBurstLandauFit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVBurstLandauFit::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVBurstLandauFit*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVRawMonitor::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVRawMonitor::Class_Name()
{
   return "MCVRawMonitor";
}

//______________________________________________________________________________
const char *MCVRawMonitor::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVRawMonitor*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVRawMonitor::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVRawMonitor*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVRawMonitor::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVRawMonitor*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVRawMonitor::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVRawMonitor*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVAnalysis::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVAnalysis::Class_Name()
{
   return "MCVAnalysis";
}

//______________________________________________________________________________
const char *MCVAnalysis::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVAnalysis*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVAnalysis::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVAnalysis*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVAnalysis::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVAnalysis*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVAnalysis::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVAnalysis*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVBarMonitor::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVBarMonitor::Class_Name()
{
   return "MCVBarMonitor";
}

//______________________________________________________________________________
const char *MCVBarMonitor::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVBarMonitor*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVBarMonitor::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVBarMonitor*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVBarMonitor::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVBarMonitor*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVBarMonitor::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVBarMonitor*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVSelection::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVSelection::Class_Name()
{
   return "MCVSelection";
}

//______________________________________________________________________________
const char *MCVSelection::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVSelection*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVSelection::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVSelection*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVSelection::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVSelection*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVSelection::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVSelection*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVTree::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVTree::Class_Name()
{
   return "MCVTree";
}

//______________________________________________________________________________
const char *MCVTree::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVTree*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVTree::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVTree*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVTree::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVTree*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVTree::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVTree*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVSelectionGUI::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVSelectionGUI::Class_Name()
{
   return "MCVSelectionGUI";
}

//______________________________________________________________________________
const char *MCVSelectionGUI::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVSelectionGUI*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVSelectionGUI::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVSelectionGUI*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVSelectionGUI::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVSelectionGUI*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVSelectionGUI::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVSelectionGUI*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVHisto3908::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVHisto3908::Class_Name()
{
   return "MCVHisto3908";
}

//______________________________________________________________________________
const char *MCVHisto3908::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVHisto3908*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVHisto3908::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVHisto3908*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVHisto3908::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVHisto3908*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVHisto3908::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVHisto3908*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVBurst::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVBurst::Class_Name()
{
   return "MCVBurst";
}

//______________________________________________________________________________
const char *MCVBurst::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVBurst*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVBurst::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVBurst*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVBurst::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVBurst*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVBurst::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVBurst*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVFilePKP3908::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVFilePKP3908::Class_Name()
{
   return "MCVFilePKP3908";
}

//______________________________________________________________________________
const char *MCVFilePKP3908::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVFilePKP3908*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVFilePKP3908::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVFilePKP3908*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVFilePKP3908::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVFilePKP3908*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVFilePKP3908::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVFilePKP3908*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVbsrMonitor::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVbsrMonitor::Class_Name()
{
   return "MCVbsrMonitor";
}

//______________________________________________________________________________
const char *MCVbsrMonitor::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVbsrMonitor*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVbsrMonitor::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVbsrMonitor*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVbsrMonitor::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVbsrMonitor*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVbsrMonitor::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVbsrMonitor*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVbsrMonitor_ric::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVbsrMonitor_ric::Class_Name()
{
   return "MCVbsrMonitor_ric";
}

//______________________________________________________________________________
const char *MCVbsrMonitor_ric::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVbsrMonitor_ric*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVbsrMonitor_ric::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVbsrMonitor_ric*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVbsrMonitor_ric::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVbsrMonitor_ric*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVbsrMonitor_ric::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVbsrMonitor_ric*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVAntiCoincidence::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVAntiCoincidence::Class_Name()
{
   return "MCVAntiCoincidence";
}

//______________________________________________________________________________
const char *MCVAntiCoincidence::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVAntiCoincidence*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVAntiCoincidence::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVAntiCoincidence*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVAntiCoincidence::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVAntiCoincidence*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVAntiCoincidence::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVAntiCoincidence*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVCalibration::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVCalibration::Class_Name()
{
   return "MCVCalibration";
}

//______________________________________________________________________________
const char *MCVCalibration::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVCalibration*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVCalibration::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVCalibration*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVCalibration::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVCalibration*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVCalibration::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVCalibration*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVSubMS::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVSubMS::Class_Name()
{
   return "MCVSubMS";
}

//______________________________________________________________________________
const char *MCVSubMS::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVSubMS*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVSubMS::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVSubMS*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVSubMS::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVSubMS*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVSubMS::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVSubMS*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *GRB::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *GRB::Class_Name()
{
   return "GRB";
}

//______________________________________________________________________________
const char *GRB::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GRB*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GRB::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GRB*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GRB::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GRB*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GRB::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GRB*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *GRB3908::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *GRB3908::Class_Name()
{
   return "GRB3908";
}

//______________________________________________________________________________
const char *GRB3908::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GRB3908*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GRB3908::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GRB3908*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GRB3908::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GRB3908*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GRB3908::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GRB3908*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *GRB3913::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *GRB3913::Class_Name()
{
   return "GRB3913";
}

//______________________________________________________________________________
const char *GRB3913::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GRB3913*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GRB3913::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GRB3913*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GRB3913::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GRB3913*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GRB3913::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GRB3913*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *GRB3913XZ::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *GRB3913XZ::Class_Name()
{
   return "GRB3913XZ";
}

//______________________________________________________________________________
const char *GRB3913XZ::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GRB3913XZ*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GRB3913XZ::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GRB3913XZ*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GRB3913XZ::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GRB3913XZ*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GRB3913XZ::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GRB3913XZ*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVFile3916::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVFile3916::Class_Name()
{
   return "MCVFile3916";
}

//______________________________________________________________________________
const char *MCVFile3916::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVFile3916*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVFile3916::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVFile3916*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVFile3916::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVFile3916*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVFile3916::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVFile3916*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MCVFile3201::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCVFile3201::Class_Name()
{
   return "MCVFile3201";
}

//______________________________________________________________________________
const char *MCVFile3201::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVFile3201*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCVFile3201::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCVFile3201*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCVFile3201::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVFile3201*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCVFile3201::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCVFile3201*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void MCVFile::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVFile.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> status;
      R__b >> nfields;
      R__b.ReadStaticArray((char*)comment);
      R__b.ReadStaticArray((char*)path);
      R__b.ReadStaticArray((char*)fname);
      rg.Streamer(R__b);
      R__b >> enoise;
      calFile.Streamer(R__b);
      fitsname.Streamer(R__b);
      R__b >> conf;
      R__b.ReadStaticArray((float*)minX);
      R__b.ReadStaticArray((float*)minAB);
      R__b.ReadStaticArray((float*)maxX);
      R__b.ReadStaticArray((float*)maxAB);
      R__b.CheckByteCount(R__s, R__c, MCVFile::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVFile::IsA(), kTRUE);
      R__b << status;
      R__b << nfields;
      R__b.WriteArray(comment, 100);
      R__b.WriteArray(path, 200);
      R__b.WriteArray(fname, 200);
      rg.Streamer(R__b);
      R__b << enoise;
      calFile.Streamer(R__b);
      fitsname.Streamer(R__b);
      R__b << conf;
      R__b.WriteArray(minX, 30);
      R__b.WriteArray(minAB, 30);
      R__b.WriteArray(maxX, 30);
      R__b.WriteArray(maxAB, 30);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVFile::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVFile.
      TClass *R__cl = ::MCVFile::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "status", &status);
      R__insp.Inspect(R__cl, R__parent, "nfields", &nfields);
      R__insp.Inspect(R__cl, R__parent, "comment[100]", comment);
      R__insp.Inspect(R__cl, R__parent, "path[200]", path);
      R__insp.Inspect(R__cl, R__parent, "fname[200]", fname);
      R__insp.Inspect(R__cl, R__parent, "*timearray", &timearray);
      R__insp.Inspect(R__cl, R__parent, "fileInfo", &fileInfo);
      fileInfo.ShowMembers(R__insp, strcat(R__parent,"fileInfo.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*ferr", &ferr);
      R__insp.Inspect(R__cl, R__parent, "rg", &rg);
      rg.ShowMembers(R__insp, strcat(R__parent,"rg.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "enoise", &enoise);
      R__insp.Inspect(R__cl, R__parent, "calFile", &calFile);
      calFile.ShowMembers(R__insp, strcat(R__parent,"calFile.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fitsname", &fitsname);
      fitsname.ShowMembers(R__insp, strcat(R__parent,"fitsname.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*conf", &conf);
      R__insp.Inspect(R__cl, R__parent, "*stdconf", &stdconf);
      R__insp.Inspect(R__cl, R__parent, "barLen", &barLen);
      R__insp.Inspect(R__cl, R__parent, "gainFactor", &gainFactor);
      R__insp.Inspect(R__cl, R__parent, "u0A[30]", u0A);
      R__insp.Inspect(R__cl, R__parent, "u0B[30]", u0B);
      R__insp.Inspect(R__cl, R__parent, "alphaA[30]", alphaA);
      R__insp.Inspect(R__cl, R__parent, "alphaB[30]", alphaB);
      R__insp.Inspect(R__cl, R__parent, "oA[30]", oA);
      R__insp.Inspect(R__cl, R__parent, "oB[30]", oB);
      R__insp.Inspect(R__cl, R__parent, "alphaMean[30]", alphaMean);
      R__insp.Inspect(R__cl, R__parent, "alphaDelta[30]", alphaDelta);
      R__insp.Inspect(R__cl, R__parent, "cx1[30]", cx1);
      R__insp.Inspect(R__cl, R__parent, "cx2[30]", cx2);
      R__insp.Inspect(R__cl, R__parent, "cE1[30]", cE1);
      R__insp.Inspect(R__cl, R__parent, "Ea[30]", Ea);
      R__insp.Inspect(R__cl, R__parent, "Eb[30]", Eb);
      R__insp.Inspect(R__cl, R__parent, "corrFlag", &corrFlag);
      R__insp.Inspect(R__cl, R__parent, "*barpol", &barpol);
      R__insp.Inspect(R__cl, R__parent, "*fcA", &fcA);
      R__insp.Inspect(R__cl, R__parent, "*fcB", &fcB);
      R__insp.Inspect(R__cl, R__parent, "*fcBonA", &fcBonA);
      R__insp.Inspect(R__cl, R__parent, "recmodel", &recmodel);
      R__insp.Inspect(R__cl, R__parent, "minX[30]", minX);
      R__insp.Inspect(R__cl, R__parent, "minAB[30]", minAB);
      R__insp.Inspect(R__cl, R__parent, "maxX[30]", maxX);
      R__insp.Inspect(R__cl, R__parent, "maxAB[30]", maxAB);
      R__insp.Inspect(R__cl, R__parent, "soA[30]", soA);
      R__insp.Inspect(R__cl, R__parent, "soB[30]", soB);
      R__insp.Inspect(R__cl, R__parent, "*fp", &fp);
      R__insp.Inspect(R__cl, R__parent, "*tdata", &tdata);
      R__insp.Inspect(R__cl, R__parent, "rootdatapath", &rootdatapath);
      rootdatapath.ShowMembers(R__insp, strcat(R__parent,"rootdatapath.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "currevt", (void*)&currevt);
      ::ROOT::GenericShowMembers("MCALevt", (void*)&currevt, R__insp, strcat(R__parent,"currevt."),true);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "seed", &seed);
      R__insp.Inspect(R__cl, R__parent, "notmonotonic", &notmonotonic);
      R__insp.Inspect(R__cl, R__parent, "simulation", &simulation);
      R__insp.Inspect(R__cl, R__parent, "trigtrack", &trigtrack);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVFile(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVFile : new ::MCVFile;
   }
   static void *newArray_MCVFile(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVFile[nElements] : new ::MCVFile[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVFile(void *p) {
      delete ((::MCVFile*)p);
   }
   static void deleteArray_MCVFile(void *p) {
      delete [] ((::MCVFile*)p);
   }
   static void destruct_MCVFile(void *p) {
      typedef ::MCVFile current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVFile

//______________________________________________________________________________
void MCVHisto::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVHisto.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b.CheckByteCount(R__s, R__c, MCVHisto::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVHisto::IsA(), kTRUE);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVHisto::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVHisto.
      TClass *R__cl = ::MCVHisto::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*rawPDA", &rawPDA);
      R__insp.Inspect(R__cl, R__parent, "*rawPDB", &rawPDB);
      R__insp.Inspect(R__cl, R__parent, "*raw2D", &raw2D);
      R__insp.Inspect(R__cl, R__parent, "*rawPos", &rawPos);
      R__insp.Inspect(R__cl, R__parent, "*rawE", &rawE);
      R__insp.Inspect(R__cl, R__parent, "*rawDTime", &rawDTime);
      R__insp.Inspect(R__cl, R__parent, "*rawCRate", &rawCRate);
      R__insp.Inspect(R__cl, R__parent, "*rawCRDist", &rawCRDist);
      R__insp.Inspect(R__cl, R__parent, "*rawMult", &rawMult);
      R__insp.Inspect(R__cl, R__parent, "*rawSciRM3913", &rawSciRM3913);
      R__insp.Inspect(R__cl, R__parent, "*rawACRM3913", &rawACRM3913);
      R__insp.Inspect(R__cl, R__parent, "*sciRMX", &sciRMX);
      R__insp.Inspect(R__cl, R__parent, "*sciRMZ", &sciRMZ);
      R__insp.Inspect(R__cl, R__parent, "*hRMXR", &hRMXR);
      R__insp.Inspect(R__cl, R__parent, "*hRMZR", &hRMZR);
      R__insp.Inspect(R__cl, R__parent, "*gRMX", &gRMX);
      R__insp.Inspect(R__cl, R__parent, "*gRMZ", &gRMZ);
      R__insp.Inspect(R__cl, R__parent, "*gRMX3913", &gRMX3913);
      R__insp.Inspect(R__cl, R__parent, "*gRMZ3913", &gRMZ3913);
      R__insp.Inspect(R__cl, R__parent, "*gRMXR", &gRMXR);
      R__insp.Inspect(R__cl, R__parent, "*gRMZR", &gRMZR);
      R__insp.Inspect(R__cl, R__parent, "*totDT", &totDT);
      R__insp.Inspect(R__cl, R__parent, "*barcorr", &barcorr);
      R__insp.Inspect(R__cl, R__parent, "*barcorrLowDT", &barcorrLowDT);
      R__insp.Inspect(R__cl, R__parent, "*totCR", &totCR);
      R__insp.Inspect(R__cl, R__parent, "*totMult", &totMult);
      R__insp.Inspect(R__cl, R__parent, "*totE", &totE);
      R__insp.Inspect(R__cl, R__parent, "*hX", &hX);
      R__insp.Inspect(R__cl, R__parent, "*hZ", &hZ);
      R__insp.Inspect(R__cl, R__parent, "*hSubMS", &hSubMS);
      R__insp.Inspect(R__cl, R__parent, "*gCRX", &gCRX);
      R__insp.Inspect(R__cl, R__parent, "*gCRZ", &gCRZ);
      R__insp.Inspect(R__cl, R__parent, "*gMultX", &gMultX);
      R__insp.Inspect(R__cl, R__parent, "*gMultZ", &gMultZ);
      R__insp.Inspect(R__cl, R__parent, "*rawHisto", &rawHisto);
      R__insp.Inspect(R__cl, R__parent, "*fh", &fh);
      R__insp.Inspect(R__cl, R__parent, "roothistopath", &roothistopath);
      roothistopath.ShowMembers(R__insp, strcat(R__parent,"roothistopath.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "prtime[30]", prtime);
      R__insp.Inspect(R__cl, R__parent, "prt", &prt);
      R__insp.Inspect(R__cl, R__parent, "prmult", &prmult);
      R__insp.Inspect(R__cl, R__parent, "prbar", &prbar);
      R__insp.Inspect(R__cl, R__parent, "nlowDT", &nlowDT);
      R__insp.Inspect(R__cl, R__parent, "firstlowDT", &firstlowDT);
      R__insp.Inspect(R__cl, R__parent, "lowDTti", &lowDTti);
      R__insp.Inspect(R__cl, R__parent, "lowDTtf", &lowDTtf);
      R__insp.Inspect(R__cl, R__parent, "Eband[11]", Eband);
      R__insp.Inspect(R__cl, R__parent, "EbandUL[11]", EbandUL);
      R__insp.Inspect(R__cl, R__parent, "Eerr[11]", Eerr);
      R__insp.Inspect(R__cl, R__parent, "gf", &gf);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVHisto(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVHisto : new ::MCVHisto;
   }
   static void *newArray_MCVHisto(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVHisto[nElements] : new ::MCVHisto[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVHisto(void *p) {
      delete ((::MCVHisto*)p);
   }
   static void deleteArray_MCVHisto(void *p) {
      delete [] ((::MCVHisto*)p);
   }
   static void destruct_MCVHisto(void *p) {
      typedef ::MCVHisto current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVHisto

//______________________________________________________________________________
void MCVFileTE::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVFileTE.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      MCVFile::Streamer(R__b);
      MCVHisto::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, MCVFileTE::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVFileTE::IsA(), kTRUE);
      MCVFile::Streamer(R__b);
      MCVHisto::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVFileTE::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVFileTE.
      TClass *R__cl = ::MCVFileTE::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      MCVFile::ShowMembers(R__insp, R__parent);
      MCVHisto::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVFileTE(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVFileTE : new ::MCVFileTE;
   }
   static void *newArray_MCVFileTE(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVFileTE[nElements] : new ::MCVFileTE[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVFileTE(void *p) {
      delete ((::MCVFileTE*)p);
   }
   static void deleteArray_MCVFileTE(void *p) {
      delete [] ((::MCVFileTE*)p);
   }
   static void destruct_MCVFileTE(void *p) {
      typedef ::MCVFileTE current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVFileTE

//______________________________________________________________________________
void MCVFilePKP::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVFilePKP.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      MCVFile::Streamer(R__b);
      MCVHisto::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, MCVFilePKP::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVFilePKP::IsA(), kTRUE);
      MCVFile::Streamer(R__b);
      MCVHisto::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVFilePKP::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVFilePKP.
      TClass *R__cl = ::MCVFilePKP::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      MCVFile::ShowMembers(R__insp, R__parent);
      MCVHisto::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVFilePKP(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVFilePKP : new ::MCVFilePKP;
   }
   static void *newArray_MCVFilePKP(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVFilePKP[nElements] : new ::MCVFilePKP[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVFilePKP(void *p) {
      delete ((::MCVFilePKP*)p);
   }
   static void deleteArray_MCVFilePKP(void *p) {
      delete [] ((::MCVFilePKP*)p);
   }
   static void destruct_MCVFilePKP(void *p) {
      typedef ::MCVFilePKP current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVFilePKP

//______________________________________________________________________________
void MCVRawMonitor::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVRawMonitor.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TGTransientFrame::Streamer(R__b);
      R__b >> fFrame1;
      R__b >> fF0;
      R__b >> fF1;
      R__b >> fF2;
      R__b >> fF3;
      R__b >> fF4;
      R__b >> fF5;
      R__b >> fF6;
      R__b >> fF7;
      R__b >> fF8;
      R__b >> fF9;
      R__b >> fF10;
      R__b >> fOkButton;
      R__b >> fTab;
      R__b >> fL1;
      R__b >> fL2;
      R__b >> fL3;
      R__b >> fL4;
      R__b >> fL5;
      R__b >> fMenuBarItemLayout;
      R__b >> fMenuBarLayout;
      R__b >> fCleanup;
      R__b >> fEc0;
      R__b >> fEc1;
      R__b >> fEc2;
      R__b >> fEc3;
      R__b >> fEc4;
      R__b >> fEc5;
      R__b >> fEc6;
      R__b >> fEc7;
      R__b >> fEc8;
      R__b >> fEc9;
      R__b >> fEc10;
      R__b >> rPDA;
      R__b >> rPDB;
      R__b >> r2D;
      R__b >> rPos;
      R__b >> rE;
      R__b >> rCR;
      R__b >> rCRDist;
      R__b >> rDT;
      R__b >> rMult;
      R__b >> rSciRM3913;
      R__b >> rawHisto;
      R__b >> fMaxA;
      R__b >> fMinA;
      R__b >> fFitFrame;
      R__b >> fGetLimitsA;
      R__b >> fMinLabelA;
      R__b >> fMaxLabelA;
      R__b >> fFitA;
      R__b >> fMenuDock;
      R__b >> fMenuAll;
      R__b >> fMenuBurst;
      R__b >> fMenuGrid;
      R__b >> fMenuCalib;
      R__b >> fMenuEdit;
      R__b >> fMenuFile;
      R__b >> fMenuBar;
      R__b >> dAlo;
      R__b >> dAhi;
      R__b >> dBlo;
      R__b.ReadStaticArray((double*)par);
      R__b >> curbar;
      R__b >> redKi2;
      R__b >> anBurstOffset;
      R__b >> anBurstOffset2;
      R__b >> anFitPeak;
      R__b >> anFitPeak2;
      R__b >> anFitPeak3;
      R__b >> anGridOffset;
      R__b >> anElectricalCalib;
      R__b >> anEnergyThreshold;
      R__b >> anGridEnergyCal;
      R__b >> anBurstLandauFit;
      R__b.CheckByteCount(R__s, R__c, MCVRawMonitor::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVRawMonitor::IsA(), kTRUE);
      TGTransientFrame::Streamer(R__b);
      R__b << fFrame1;
      R__b << fF0;
      R__b << fF1;
      R__b << fF2;
      R__b << fF3;
      R__b << fF4;
      R__b << fF5;
      R__b << fF6;
      R__b << fF7;
      R__b << fF8;
      R__b << fF9;
      R__b << fF10;
      R__b << fOkButton;
      R__b << fTab;
      R__b << fL1;
      R__b << fL2;
      R__b << fL3;
      R__b << fL4;
      R__b << fL5;
      R__b << fMenuBarItemLayout;
      R__b << fMenuBarLayout;
      R__b << fCleanup;
      R__b << fEc0;
      R__b << fEc1;
      R__b << fEc2;
      R__b << fEc3;
      R__b << fEc4;
      R__b << fEc5;
      R__b << fEc6;
      R__b << fEc7;
      R__b << fEc8;
      R__b << fEc9;
      R__b << fEc10;
      R__b << rPDA;
      R__b << rPDB;
      R__b << r2D;
      R__b << rPos;
      R__b << rE;
      R__b << rCR;
      R__b << rCRDist;
      R__b << rDT;
      R__b << rMult;
      R__b << rSciRM3913;
      R__b << rawHisto;
      R__b << fMaxA;
      R__b << fMinA;
      R__b << fFitFrame;
      R__b << fGetLimitsA;
      R__b << fMinLabelA;
      R__b << fMaxLabelA;
      R__b << fFitA;
      R__b << fMenuDock;
      R__b << fMenuAll;
      R__b << fMenuBurst;
      R__b << fMenuGrid;
      R__b << fMenuCalib;
      R__b << fMenuEdit;
      R__b << fMenuFile;
      R__b << fMenuBar;
      R__b << dAlo;
      R__b << dAhi;
      R__b << dBlo;
      R__b.WriteArray(par, 6);
      R__b << curbar;
      R__b << redKi2;
      R__b << anBurstOffset;
      R__b << anBurstOffset2;
      R__b << anFitPeak;
      R__b << anFitPeak2;
      R__b << anFitPeak3;
      R__b << anGridOffset;
      R__b << anElectricalCalib;
      R__b << anEnergyThreshold;
      R__b << anGridEnergyCal;
      R__b << anBurstLandauFit;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVRawMonitor::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVRawMonitor.
      TClass *R__cl = ::MCVRawMonitor::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fFrame1", &fFrame1);
      R__insp.Inspect(R__cl, R__parent, "*fF0", &fF0);
      R__insp.Inspect(R__cl, R__parent, "*fF1", &fF1);
      R__insp.Inspect(R__cl, R__parent, "*fF2", &fF2);
      R__insp.Inspect(R__cl, R__parent, "*fF3", &fF3);
      R__insp.Inspect(R__cl, R__parent, "*fF4", &fF4);
      R__insp.Inspect(R__cl, R__parent, "*fF5", &fF5);
      R__insp.Inspect(R__cl, R__parent, "*fF6", &fF6);
      R__insp.Inspect(R__cl, R__parent, "*fF7", &fF7);
      R__insp.Inspect(R__cl, R__parent, "*fF8", &fF8);
      R__insp.Inspect(R__cl, R__parent, "*fF9", &fF9);
      R__insp.Inspect(R__cl, R__parent, "*fF10", &fF10);
      R__insp.Inspect(R__cl, R__parent, "*fOkButton", &fOkButton);
      R__insp.Inspect(R__cl, R__parent, "*fTab", &fTab);
      R__insp.Inspect(R__cl, R__parent, "*fL1", &fL1);
      R__insp.Inspect(R__cl, R__parent, "*fL2", &fL2);
      R__insp.Inspect(R__cl, R__parent, "*fL3", &fL3);
      R__insp.Inspect(R__cl, R__parent, "*fL4", &fL4);
      R__insp.Inspect(R__cl, R__parent, "*fL5", &fL5);
      R__insp.Inspect(R__cl, R__parent, "*fMenuBarItemLayout", &fMenuBarItemLayout);
      R__insp.Inspect(R__cl, R__parent, "*fMenuBarLayout", &fMenuBarLayout);
      R__insp.Inspect(R__cl, R__parent, "*fCleanup", &fCleanup);
      R__insp.Inspect(R__cl, R__parent, "*fEc0", &fEc0);
      R__insp.Inspect(R__cl, R__parent, "*fEc1", &fEc1);
      R__insp.Inspect(R__cl, R__parent, "*fEc2", &fEc2);
      R__insp.Inspect(R__cl, R__parent, "*fEc3", &fEc3);
      R__insp.Inspect(R__cl, R__parent, "*fEc4", &fEc4);
      R__insp.Inspect(R__cl, R__parent, "*fEc5", &fEc5);
      R__insp.Inspect(R__cl, R__parent, "*fEc6", &fEc6);
      R__insp.Inspect(R__cl, R__parent, "*fEc7", &fEc7);
      R__insp.Inspect(R__cl, R__parent, "*fEc8", &fEc8);
      R__insp.Inspect(R__cl, R__parent, "*fEc9", &fEc9);
      R__insp.Inspect(R__cl, R__parent, "*fEc10", &fEc10);
      R__insp.Inspect(R__cl, R__parent, "*rPDA", &rPDA);
      R__insp.Inspect(R__cl, R__parent, "*rPDB", &rPDB);
      R__insp.Inspect(R__cl, R__parent, "*r2D", &r2D);
      R__insp.Inspect(R__cl, R__parent, "*rPos", &rPos);
      R__insp.Inspect(R__cl, R__parent, "*rE", &rE);
      R__insp.Inspect(R__cl, R__parent, "*rCR", &rCR);
      R__insp.Inspect(R__cl, R__parent, "*rCRDist", &rCRDist);
      R__insp.Inspect(R__cl, R__parent, "*rDT", &rDT);
      R__insp.Inspect(R__cl, R__parent, "*rMult", &rMult);
      R__insp.Inspect(R__cl, R__parent, "*rSciRM3913", &rSciRM3913);
      R__insp.Inspect(R__cl, R__parent, "*rawHisto", &rawHisto);
      R__insp.Inspect(R__cl, R__parent, "*fMaxA", &fMaxA);
      R__insp.Inspect(R__cl, R__parent, "*fMinA", &fMinA);
      R__insp.Inspect(R__cl, R__parent, "*fFitFrame", &fFitFrame);
      R__insp.Inspect(R__cl, R__parent, "*fGetLimitsA", &fGetLimitsA);
      R__insp.Inspect(R__cl, R__parent, "*fMinLabelA", &fMinLabelA);
      R__insp.Inspect(R__cl, R__parent, "*fMaxLabelA", &fMaxLabelA);
      R__insp.Inspect(R__cl, R__parent, "*fFitA", &fFitA);
      R__insp.Inspect(R__cl, R__parent, "*fMenuDock", &fMenuDock);
      R__insp.Inspect(R__cl, R__parent, "*fMenuAll", &fMenuAll);
      R__insp.Inspect(R__cl, R__parent, "*fMenuBurst", &fMenuBurst);
      R__insp.Inspect(R__cl, R__parent, "*fMenuGrid", &fMenuGrid);
      R__insp.Inspect(R__cl, R__parent, "*fMenuCalib", &fMenuCalib);
      R__insp.Inspect(R__cl, R__parent, "*fMenuEdit", &fMenuEdit);
      R__insp.Inspect(R__cl, R__parent, "*fMenuFile", &fMenuFile);
      R__insp.Inspect(R__cl, R__parent, "*fMenuBar", &fMenuBar);
      R__insp.Inspect(R__cl, R__parent, "*conf", &conf);
      R__insp.Inspect(R__cl, R__parent, "*fileInfo", &fileInfo);
      R__insp.Inspect(R__cl, R__parent, "dAlo", &dAlo);
      R__insp.Inspect(R__cl, R__parent, "dAhi", &dAhi);
      R__insp.Inspect(R__cl, R__parent, "dBlo", &dBlo);
      R__insp.Inspect(R__cl, R__parent, "dBhi", &dBhi);
      R__insp.Inspect(R__cl, R__parent, "par[6]", par);
      R__insp.Inspect(R__cl, R__parent, "curbar", &curbar);
      R__insp.Inspect(R__cl, R__parent, "redKi2", &redKi2);
      R__insp.Inspect(R__cl, R__parent, "*anBurstOffset", &anBurstOffset);
      R__insp.Inspect(R__cl, R__parent, "*anBurstOffset2", &anBurstOffset2);
      R__insp.Inspect(R__cl, R__parent, "*anFitPeak", &anFitPeak);
      R__insp.Inspect(R__cl, R__parent, "*anFitPeak2", &anFitPeak2);
      R__insp.Inspect(R__cl, R__parent, "*anFitPeak3", &anFitPeak3);
      R__insp.Inspect(R__cl, R__parent, "*anGridOffset", &anGridOffset);
      R__insp.Inspect(R__cl, R__parent, "*anElectricalCalib", &anElectricalCalib);
      R__insp.Inspect(R__cl, R__parent, "*anEnergyThreshold", &anEnergyThreshold);
      R__insp.Inspect(R__cl, R__parent, "*anGridEnergyCal", &anGridEnergyCal);
      R__insp.Inspect(R__cl, R__parent, "*anBurstLandauFit", &anBurstLandauFit);
      TGTransientFrame::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_MCVRawMonitor(void *p) {
      delete ((::MCVRawMonitor*)p);
   }
   static void deleteArray_MCVRawMonitor(void *p) {
      delete [] ((::MCVRawMonitor*)p);
   }
   static void destruct_MCVRawMonitor(void *p) {
      typedef ::MCVRawMonitor current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVRawMonitor

//______________________________________________________________________________
void MCVFileInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVFileInfo.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b.ReadStaticArray((char*)filename);
      R__b >> runid;
      R__b >> pkttype;
      R__b >> nevents;
      R__b >> tstart;
      R__b >> tstop;
      R__b >> ttot;
      R__b >> pdhuformat;
      R__b >> pdhudata;
      R__b >> grid;
      R__b >> seed;
      calFile.Streamer(R__b);
      R__b >> barLen;
      R__b >> gainFactor;
      R__b.ReadStaticArray((double*)u0A);
      R__b.ReadStaticArray((double*)u0B);
      R__b.ReadStaticArray((double*)alphaA);
      R__b.ReadStaticArray((double*)alphaB);
      R__b.ReadStaticArray((double*)oA);
      R__b.ReadStaticArray((double*)oB);
      R__b.ReadStaticArray((int*)soA);
      R__b.ReadStaticArray((int*)soB);
      R__b >> notmonotonic;
      R__b >> nlowDT;
      R__b >> lowDTevt;
      R__b >> lowDTti;
      R__b >> lowDTtf;
      R__b >> teff;
      R__b.CheckByteCount(R__s, R__c, MCVFileInfo::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVFileInfo::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b.WriteArray(filename, 200);
      R__b << runid;
      R__b << pkttype;
      R__b << nevents;
      R__b << tstart;
      R__b << tstop;
      R__b << ttot;
      R__b << pdhuformat;
      R__b << pdhudata;
      R__b << grid;
      R__b << seed;
      calFile.Streamer(R__b);
      R__b << barLen;
      R__b << gainFactor;
      R__b.WriteArray(u0A, 30);
      R__b.WriteArray(u0B, 30);
      R__b.WriteArray(alphaA, 30);
      R__b.WriteArray(alphaB, 30);
      R__b.WriteArray(oA, 30);
      R__b.WriteArray(oB, 30);
      R__b.WriteArray(soA, 30);
      R__b.WriteArray(soB, 30);
      R__b << notmonotonic;
      R__b << nlowDT;
      R__b << lowDTevt;
      R__b << lowDTti;
      R__b << lowDTtf;
      R__b << teff;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVFileInfo::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVFileInfo.
      TClass *R__cl = ::MCVFileInfo::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "filename[200]", filename);
      R__insp.Inspect(R__cl, R__parent, "runid", &runid);
      R__insp.Inspect(R__cl, R__parent, "pkttype", &pkttype);
      R__insp.Inspect(R__cl, R__parent, "nevents", &nevents);
      R__insp.Inspect(R__cl, R__parent, "tstart", &tstart);
      R__insp.Inspect(R__cl, R__parent, "tstop", &tstop);
      R__insp.Inspect(R__cl, R__parent, "ttot", &ttot);
      R__insp.Inspect(R__cl, R__parent, "pdhuformat", &pdhuformat);
      R__insp.Inspect(R__cl, R__parent, "pdhudata", &pdhudata);
      R__insp.Inspect(R__cl, R__parent, "grid", &grid);
      R__insp.Inspect(R__cl, R__parent, "seed", &seed);
      R__insp.Inspect(R__cl, R__parent, "calFile", &calFile);
      calFile.ShowMembers(R__insp, strcat(R__parent,"calFile.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "barLen", &barLen);
      R__insp.Inspect(R__cl, R__parent, "gainFactor", &gainFactor);
      R__insp.Inspect(R__cl, R__parent, "u0A[30]", u0A);
      R__insp.Inspect(R__cl, R__parent, "u0B[30]", u0B);
      R__insp.Inspect(R__cl, R__parent, "alphaA[30]", alphaA);
      R__insp.Inspect(R__cl, R__parent, "alphaB[30]", alphaB);
      R__insp.Inspect(R__cl, R__parent, "oA[30]", oA);
      R__insp.Inspect(R__cl, R__parent, "oB[30]", oB);
      R__insp.Inspect(R__cl, R__parent, "soA[30]", soA);
      R__insp.Inspect(R__cl, R__parent, "soB[30]", soB);
      R__insp.Inspect(R__cl, R__parent, "notmonotonic", &notmonotonic);
      R__insp.Inspect(R__cl, R__parent, "nlowDT", &nlowDT);
      R__insp.Inspect(R__cl, R__parent, "lowDTevt", &lowDTevt);
      R__insp.Inspect(R__cl, R__parent, "lowDTti", &lowDTti);
      R__insp.Inspect(R__cl, R__parent, "lowDTtf", &lowDTtf);
      R__insp.Inspect(R__cl, R__parent, "teff", &teff);
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVFileInfo(void *p) {
      return  p ? new(p) ::MCVFileInfo : new ::MCVFileInfo;
   }
   static void *newArray_MCVFileInfo(Long_t nElements, void *p) {
      return p ? new(p) ::MCVFileInfo[nElements] : new ::MCVFileInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVFileInfo(void *p) {
      delete ((::MCVFileInfo*)p);
   }
   static void deleteArray_MCVFileInfo(void *p) {
      delete [] ((::MCVFileInfo*)p);
   }
   static void destruct_MCVFileInfo(void *p) {
      typedef ::MCVFileInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVFileInfo

//______________________________________________________________________________
void MCVAnalysis::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVAnalysis.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> lmaxarg1;
      R__b >> lmaxarg2;
      R__b >> lminarg1;
      R__b >> lminarg2;
      R__b >> sqrarg;
      R__b.StreamObject(&(currevt),typeid(MCALevt));
      R__b >> nentries;
      R__b >> ofac;
      R__b >> hifac;
      //R__b.ReadArray(wk1);
      //R__b.ReadArray(wk2);
      //R__b.ReadArray(time);
      //R__b.ReadArray(y);
      R__b >> nout;
      R__b >> jmax;
      R__b >> prob;
      R__b >> nevt;
      R__b >> maxFreq;
      R__b.CheckByteCount(R__s, R__c, MCVAnalysis::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVAnalysis::IsA(), kTRUE);
      R__b << lmaxarg1;
      R__b << lmaxarg2;
      R__b << lminarg1;
      R__b << lminarg2;
      R__b << sqrarg;
      R__b.StreamObject(&(currevt),typeid(MCALevt));
      R__b << nentries;
      R__b << ofac;
      R__b << hifac;
      //R__b.WriteArray(wk1, __COUNTER__);
      //R__b.WriteArray(wk2, __COUNTER__);
      //R__b.WriteArray(time, __COUNTER__);
      //R__b.WriteArray(y, __COUNTER__);
      R__b << nout;
      R__b << jmax;
      R__b << prob;
      R__b << nevt;
      R__b << maxFreq;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVAnalysis::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVAnalysis.
      TClass *R__cl = ::MCVAnalysis::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "lmaxarg1", &lmaxarg1);
      R__insp.Inspect(R__cl, R__parent, "lmaxarg2", &lmaxarg2);
      R__insp.Inspect(R__cl, R__parent, "lminarg1", &lminarg1);
      R__insp.Inspect(R__cl, R__parent, "lminarg2", &lminarg2);
      R__insp.Inspect(R__cl, R__parent, "sqrarg", &sqrarg);
      R__insp.Inspect(R__cl, R__parent, "adclim", &adclim);
      R__insp.Inspect(R__cl, R__parent, "currevt", (void*)&currevt);
      ::ROOT::GenericShowMembers("MCALevt", (void*)&currevt, R__insp, strcat(R__parent,"currevt."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*info", &info);
      R__insp.Inspect(R__cl, R__parent, "*tdata", &tdata);
      R__insp.Inspect(R__cl, R__parent, "nentries", &nentries);
      R__insp.Inspect(R__cl, R__parent, "ofac", &ofac);
      R__insp.Inspect(R__cl, R__parent, "hifac", &hifac);
      R__insp.Inspect(R__cl, R__parent, "*wk1", &wk1);
      R__insp.Inspect(R__cl, R__parent, "*wk2", &wk2);
      R__insp.Inspect(R__cl, R__parent, "*time", &time);
      R__insp.Inspect(R__cl, R__parent, "*y", &y);
      R__insp.Inspect(R__cl, R__parent, "nout", &nout);
      R__insp.Inspect(R__cl, R__parent, "jmax", &jmax);
      R__insp.Inspect(R__cl, R__parent, "prob", &prob);
      R__insp.Inspect(R__cl, R__parent, "nevt", &nevt);
      R__insp.Inspect(R__cl, R__parent, "maxFreq", &maxFreq);
      R__insp.Inspect(R__cl, R__parent, "*gLomb", &gLomb);
      R__insp.Inspect(R__cl, R__parent, "*hcorr", &hcorr);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVAnalysis(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVAnalysis : new ::MCVAnalysis;
   }
   static void *newArray_MCVAnalysis(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVAnalysis[nElements] : new ::MCVAnalysis[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVAnalysis(void *p) {
      delete ((::MCVAnalysis*)p);
   }
   static void deleteArray_MCVAnalysis(void *p) {
      delete [] ((::MCVAnalysis*)p);
   }
   static void destruct_MCVAnalysis(void *p) {
      typedef ::MCVAnalysis current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVAnalysis

//______________________________________________________________________________
void MCVStdAnalysis::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVStdAnalysis.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b.CheckByteCount(R__s, R__c, MCVStdAnalysis::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVStdAnalysis::IsA(), kTRUE);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVStdAnalysis::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVStdAnalysis.
      TClass *R__cl = ::MCVStdAnalysis::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*rawHisto", &rawHisto);
      R__insp.Inspect(R__cl, R__parent, "*info", &info);
      R__insp.Inspect(R__cl, R__parent, "*conf", &conf);
      R__insp.Inspect(R__cl, R__parent, "*c1", &c1);
      R__insp.Inspect(R__cl, R__parent, "*c2", &c2);
      R__insp.Inspect(R__cl, R__parent, "*fout", &fout);
      R__insp.Inspect(R__cl, R__parent, "*fref", &fref);
      R__insp.Inspect(R__cl, R__parent, "status", &status);
      R__insp.Inspect(R__cl, R__parent, "*refname", &refname);
      R__insp.Inspect(R__cl, R__parent, "outofspec[60]", outofspec);
      R__insp.Inspect(R__cl, R__parent, "barmask", &barmask);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVStdAnalysis(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVStdAnalysis : new ::MCVStdAnalysis;
   }
   static void *newArray_MCVStdAnalysis(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVStdAnalysis[nElements] : new ::MCVStdAnalysis[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVStdAnalysis(void *p) {
      delete ((::MCVStdAnalysis*)p);
   }
   static void deleteArray_MCVStdAnalysis(void *p) {
      delete [] ((::MCVStdAnalysis*)p);
   }
   static void destruct_MCVStdAnalysis(void *p) {
      typedef ::MCVStdAnalysis current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVStdAnalysis

//______________________________________________________________________________
void MCVGridOffset::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVGridOffset.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      MCVStdAnalysis::Streamer(R__b);
      R__b >> peak;
      R__b >> avgXAdoff;
      R__b >> avgXAdsig;
      R__b >> avgXBdoff;
      R__b >> avgXBdsig;
      R__b >> avgZAdoff;
      R__b >> avgZAdsig;
      R__b >> avgZBdoff;
      R__b >> avgZBdsig;
      R__b.CheckByteCount(R__s, R__c, MCVGridOffset::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVGridOffset::IsA(), kTRUE);
      MCVStdAnalysis::Streamer(R__b);
      R__b << peak;
      R__b << avgXAdoff;
      R__b << avgXAdsig;
      R__b << avgXBdoff;
      R__b << avgXBdsig;
      R__b << avgZAdoff;
      R__b << avgZAdsig;
      R__b << avgZBdoff;
      R__b << avgZBdsig;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVGridOffset::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVGridOffset.
      TClass *R__cl = ::MCVGridOffset::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "groff[60]", groff);
      R__insp.Inspect(R__cl, R__parent, "grsig[60]", grsig);
      R__insp.Inspect(R__cl, R__parent, "gramp[60]", gramp);
      R__insp.Inspect(R__cl, R__parent, "refoff[60]", refoff);
      R__insp.Inspect(R__cl, R__parent, "refsig[60]", refsig);
      R__insp.Inspect(R__cl, R__parent, "nextraoff", &nextraoff);
      R__insp.Inspect(R__cl, R__parent, "nextrasig", &nextrasig);
      R__insp.Inspect(R__cl, R__parent, "maxoffdev", &maxoffdev);
      R__insp.Inspect(R__cl, R__parent, "maxsigdev", &maxsigdev);
      R__insp.Inspect(R__cl, R__parent, "*peak", &peak);
      R__insp.Inspect(R__cl, R__parent, "avgXAdoff", &avgXAdoff);
      R__insp.Inspect(R__cl, R__parent, "avgXAdsig", &avgXAdsig);
      R__insp.Inspect(R__cl, R__parent, "avgXBdoff", &avgXBdoff);
      R__insp.Inspect(R__cl, R__parent, "avgXBdsig", &avgXBdsig);
      R__insp.Inspect(R__cl, R__parent, "avgZAdoff", &avgZAdoff);
      R__insp.Inspect(R__cl, R__parent, "avgZAdsig", &avgZAdsig);
      R__insp.Inspect(R__cl, R__parent, "avgZBdoff", &avgZBdoff);
      R__insp.Inspect(R__cl, R__parent, "avgZBdsig", &avgZBdsig);
      MCVStdAnalysis::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVGridOffset(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVGridOffset : new ::MCVGridOffset;
   }
   static void *newArray_MCVGridOffset(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVGridOffset[nElements] : new ::MCVGridOffset[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVGridOffset(void *p) {
      delete ((::MCVGridOffset*)p);
   }
   static void deleteArray_MCVGridOffset(void *p) {
      delete [] ((::MCVGridOffset*)p);
   }
   static void destruct_MCVGridOffset(void *p) {
      typedef ::MCVGridOffset current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVGridOffset

//______________________________________________________________________________
void MCVCountRate::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVCountRate.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      MCVStdAnalysis::Streamer(R__b);
      //R__b.ReadArray(crx);
      //R__b.ReadArray(sigx);
      //R__b.ReadArray(crz);
      //R__b.ReadArray(sigz);
      R__b >> drmax;
      R__b >> refrun;
      R__b >> maxpoisdev;
      R__b.ReadStaticArray((float*)refcr);
      R__b.ReadStaticArray((float*)refsig);
      R__b.ReadStaticArray((float*)dr);
      R__b.CheckByteCount(R__s, R__c, MCVCountRate::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVCountRate::IsA(), kTRUE);
      MCVStdAnalysis::Streamer(R__b);
      //R__b.WriteArray(crx, __COUNTER__);
      //R__b.WriteArray(sigx, __COUNTER__);
      //R__b.WriteArray(crz, __COUNTER__);
      //R__b.WriteArray(sigz, __COUNTER__);
      R__b << drmax;
      R__b << refrun;
      R__b << maxpoisdev;
      R__b.WriteArray(refcr, 30);
      R__b.WriteArray(refsig, 30);
      R__b.WriteArray(dr, 30);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVCountRate::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVCountRate.
      TClass *R__cl = ::MCVCountRate::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*crx", &crx);
      R__insp.Inspect(R__cl, R__parent, "*sigx", &sigx);
      R__insp.Inspect(R__cl, R__parent, "*crz", &crz);
      R__insp.Inspect(R__cl, R__parent, "*sigz", &sigz);
      R__insp.Inspect(R__cl, R__parent, "drmax", &drmax);
      R__insp.Inspect(R__cl, R__parent, "refrun", &refrun);
      R__insp.Inspect(R__cl, R__parent, "maxpoisdev", &maxpoisdev);
      R__insp.Inspect(R__cl, R__parent, "nextra", &nextra);
      R__insp.Inspect(R__cl, R__parent, "npois", &npois);
      R__insp.Inspect(R__cl, R__parent, "refcr[30]", refcr);
      R__insp.Inspect(R__cl, R__parent, "refsig[30]", refsig);
      R__insp.Inspect(R__cl, R__parent, "dr[30]", dr);
      MCVStdAnalysis::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVCountRate(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVCountRate : new ::MCVCountRate;
   }
   static void *newArray_MCVCountRate(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVCountRate[nElements] : new ::MCVCountRate[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVCountRate(void *p) {
      delete ((::MCVCountRate*)p);
   }
   static void deleteArray_MCVCountRate(void *p) {
      delete [] ((::MCVCountRate*)p);
   }
   static void destruct_MCVCountRate(void *p) {
      typedef ::MCVCountRate current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVCountRate

//______________________________________________________________________________
void MCVRetriggering::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVRetriggering.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      MCVStdAnalysis::Streamer(R__b);
      R__b >> rDT;
      R__b >> rCR;
      R__b >> rPDA;
      R__b.CheckByteCount(R__s, R__c, MCVRetriggering::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVRetriggering::IsA(), kTRUE);
      MCVStdAnalysis::Streamer(R__b);
      R__b << rDT;
      R__b << rCR;
      R__b << rPDA;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVRetriggering::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVRetriggering.
      TClass *R__cl = ::MCVRetriggering::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "totevts[30]", totevts);
      R__insp.Inspect(R__cl, R__parent, "avgCR[30]", avgCR);
      R__insp.Inspect(R__cl, R__parent, "tdead[30]", tdead);
      R__insp.Inspect(R__cl, R__parent, "tfirst[30]", tfirst);
      R__insp.Inspect(R__cl, R__parent, "tmax", &tmax);
      R__insp.Inspect(R__cl, R__parent, "nretriggering", &nretriggering);
      R__insp.Inspect(R__cl, R__parent, "nlowdeadtime", &nlowdeadtime);
      R__insp.Inspect(R__cl, R__parent, "maxfrac", &maxfrac);
      R__insp.Inspect(R__cl, R__parent, "nsigma", &nsigma);
      R__insp.Inspect(R__cl, R__parent, "mindt", &mindt);
      R__insp.Inspect(R__cl, R__parent, "extracnts[30]", extracnts);
      R__insp.Inspect(R__cl, R__parent, "extrafrac[30]", extrafrac);
      R__insp.Inspect(R__cl, R__parent, "statsig[30]", statsig);
      R__insp.Inspect(R__cl, R__parent, "*rDT", &rDT);
      R__insp.Inspect(R__cl, R__parent, "*rCR", &rCR);
      R__insp.Inspect(R__cl, R__parent, "*rPDA", &rPDA);
      R__insp.Inspect(R__cl, R__parent, "*fdt", &fdt);
      MCVStdAnalysis::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVRetriggering(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVRetriggering : new ::MCVRetriggering;
   }
   static void *newArray_MCVRetriggering(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVRetriggering[nElements] : new ::MCVRetriggering[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVRetriggering(void *p) {
      delete ((::MCVRetriggering*)p);
   }
   static void deleteArray_MCVRetriggering(void *p) {
      delete [] ((::MCVRetriggering*)p);
   }
   static void destruct_MCVRetriggering(void *p) {
      typedef ::MCVRetriggering current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVRetriggering

//______________________________________________________________________________
void MCVGridEnergyCal::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVGridEnergyCal.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      MCVStdAnalysis::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, MCVGridEnergyCal::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVGridEnergyCal::IsA(), kTRUE);
      MCVStdAnalysis::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVGridEnergyCal::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVGridEnergyCal.
      TClass *R__cl = ::MCVGridEnergyCal::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "mpv[30]", mpv);
      R__insp.Inspect(R__cl, R__parent, "sig[30]", sig);
      R__insp.Inspect(R__cl, R__parent, "amp[30]", amp);
      R__insp.Inspect(R__cl, R__parent, "mE[30]", mE);
      R__insp.Inspect(R__cl, R__parent, "refmpv[30]", refmpv);
      R__insp.Inspect(R__cl, R__parent, "refsig[30]", refsig);
      R__insp.Inspect(R__cl, R__parent, "refamp[30]", refamp);
      R__insp.Inspect(R__cl, R__parent, "meanmpv", &meanmpv);
      R__insp.Inspect(R__cl, R__parent, "meanE", &meanE);
      R__insp.Inspect(R__cl, R__parent, "noutmpv", &noutmpv);
      R__insp.Inspect(R__cl, R__parent, "noutsig", &noutsig);
      R__insp.Inspect(R__cl, R__parent, "noutamp", &noutamp);
      R__insp.Inspect(R__cl, R__parent, "maxmpvdev", &maxmpvdev);
      R__insp.Inspect(R__cl, R__parent, "maxsigdev", &maxsigdev);
      R__insp.Inspect(R__cl, R__parent, "maxampdev", &maxampdev);
      R__insp.Inspect(R__cl, R__parent, "refrun", &refrun);
      MCVStdAnalysis::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVGridEnergyCal(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVGridEnergyCal : new ::MCVGridEnergyCal;
   }
   static void *newArray_MCVGridEnergyCal(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVGridEnergyCal[nElements] : new ::MCVGridEnergyCal[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVGridEnergyCal(void *p) {
      delete ((::MCVGridEnergyCal*)p);
   }
   static void deleteArray_MCVGridEnergyCal(void *p) {
      delete [] ((::MCVGridEnergyCal*)p);
   }
   static void destruct_MCVGridEnergyCal(void *p) {
      typedef ::MCVGridEnergyCal current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVGridEnergyCal

//______________________________________________________________________________
void MCVSciRM::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVSciRM.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      MCVStdAnalysis::Streamer(R__b);
      R__b >> nout1X;
      R__b >> nout1Z;
      R__b >> nout2X;
      R__b >> nout2Z;
      R__b.CheckByteCount(R__s, R__c, MCVSciRM::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVSciRM::IsA(), kTRUE);
      MCVStdAnalysis::Streamer(R__b);
      R__b << nout1X;
      R__b << nout1Z;
      R__b << nout2X;
      R__b << nout2Z;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVSciRM::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVSciRM.
      TClass *R__cl = ::MCVSciRM::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*grmX", &grmX);
      R__insp.Inspect(R__cl, R__parent, "*grmZ", &grmZ);
      R__insp.Inspect(R__cl, R__parent, "*grmX3913", &grmX3913);
      R__insp.Inspect(R__cl, R__parent, "*grmZ3913", &grmZ3913);
      R__insp.Inspect(R__cl, R__parent, "*hX", &hX);
      R__insp.Inspect(R__cl, R__parent, "*hZ", &hZ);
      R__insp.Inspect(R__cl, R__parent, "*hXR", &hXR);
      R__insp.Inspect(R__cl, R__parent, "*hZR", &hZR);
      R__insp.Inspect(R__cl, R__parent, "*E", &E);
      R__insp.Inspect(R__cl, R__parent, "*E_err", &E_err);
      R__insp.Inspect(R__cl, R__parent, "*rmX3913", &rmX3913);
      R__insp.Inspect(R__cl, R__parent, "*rmX3913_err", &rmX3913_err);
      R__insp.Inspect(R__cl, R__parent, "*rmZ3913", &rmZ3913);
      R__insp.Inspect(R__cl, R__parent, "*rmZ3913_err", &rmZ3913_err);
      R__insp.Inspect(R__cl, R__parent, "*rmX", &rmX);
      R__insp.Inspect(R__cl, R__parent, "*rmX_err", &rmX_err);
      R__insp.Inspect(R__cl, R__parent, "*rmZ", &rmZ);
      R__insp.Inspect(R__cl, R__parent, "*rmZ_err", &rmZ_err);
      R__insp.Inspect(R__cl, R__parent, "refE[11]", refE);
      R__insp.Inspect(R__cl, R__parent, "refE_err[11]", refE_err);
      R__insp.Inspect(R__cl, R__parent, "refX[11]", refX);
      R__insp.Inspect(R__cl, R__parent, "refX_err[11]", refX_err);
      R__insp.Inspect(R__cl, R__parent, "refZ[11]", refZ);
      R__insp.Inspect(R__cl, R__parent, "refZ_err[11]", refZ_err);
      R__insp.Inspect(R__cl, R__parent, "refrun", &refrun);
      R__insp.Inspect(R__cl, R__parent, "nsigma", &nsigma);
      R__insp.Inspect(R__cl, R__parent, "dev1X[11]", dev1X);
      R__insp.Inspect(R__cl, R__parent, "dev1Z[11]", dev1Z);
      R__insp.Inspect(R__cl, R__parent, "dev2X[11]", dev2X);
      R__insp.Inspect(R__cl, R__parent, "dev2Z[11]", dev2Z);
      R__insp.Inspect(R__cl, R__parent, "nout1X", &nout1X);
      R__insp.Inspect(R__cl, R__parent, "nout1Z", &nout1Z);
      R__insp.Inspect(R__cl, R__parent, "nout2X", &nout2X);
      R__insp.Inspect(R__cl, R__parent, "nout2Z", &nout2Z);
      MCVStdAnalysis::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVSciRM(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVSciRM : new ::MCVSciRM;
   }
   static void *newArray_MCVSciRM(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVSciRM[nElements] : new ::MCVSciRM[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVSciRM(void *p) {
      delete ((::MCVSciRM*)p);
   }
   static void deleteArray_MCVSciRM(void *p) {
      delete [] ((::MCVSciRM*)p);
   }
   static void destruct_MCVSciRM(void *p) {
      typedef ::MCVSciRM current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVSciRM

//______________________________________________________________________________
void MCVEnergyThreshold::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVEnergyThreshold.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      MCVStdAnalysis::Streamer(R__b);
      R__b >> nout50;
      R__b.CheckByteCount(R__s, R__c, MCVEnergyThreshold::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVEnergyThreshold::IsA(), kTRUE);
      MCVStdAnalysis::Streamer(R__b);
      R__b << nout50;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVEnergyThreshold::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVEnergyThreshold.
      TClass *R__cl = ::MCVEnergyThreshold::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "th50[30]", th50);
      R__insp.Inspect(R__cl, R__parent, "th90[30]", th90);
      R__insp.Inspect(R__cl, R__parent, "ref50[30]", ref50);
      R__insp.Inspect(R__cl, R__parent, "ref90[30]", ref90);
      R__insp.Inspect(R__cl, R__parent, "refrun", &refrun);
      R__insp.Inspect(R__cl, R__parent, "maxdev", &maxdev);
      R__insp.Inspect(R__cl, R__parent, "nout50", &nout50);
      R__insp.Inspect(R__cl, R__parent, "nout90", &nout90);
      MCVStdAnalysis::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVEnergyThreshold(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVEnergyThreshold : new ::MCVEnergyThreshold;
   }
   static void *newArray_MCVEnergyThreshold(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVEnergyThreshold[nElements] : new ::MCVEnergyThreshold[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVEnergyThreshold(void *p) {
      delete ((::MCVEnergyThreshold*)p);
   }
   static void deleteArray_MCVEnergyThreshold(void *p) {
      delete [] ((::MCVEnergyThreshold*)p);
   }
   static void destruct_MCVEnergyThreshold(void *p) {
      typedef ::MCVEnergyThreshold current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVEnergyThreshold

//______________________________________________________________________________
void MCVBarMonitor::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVBarMonitor.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      MCVStdAnalysis::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, MCVBarMonitor::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVBarMonitor::IsA(), kTRUE);
      MCVStdAnalysis::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVBarMonitor::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVBarMonitor.
      TClass *R__cl = ::MCVBarMonitor::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      MCVStdAnalysis::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVBarMonitor(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVBarMonitor : new ::MCVBarMonitor;
   }
   static void *newArray_MCVBarMonitor(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVBarMonitor[nElements] : new ::MCVBarMonitor[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVBarMonitor(void *p) {
      delete ((::MCVBarMonitor*)p);
   }
   static void deleteArray_MCVBarMonitor(void *p) {
      delete [] ((::MCVBarMonitor*)p);
   }
   static void destruct_MCVBarMonitor(void *p) {
      typedef ::MCVBarMonitor current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVBarMonitor

//______________________________________________________________________________
void MCVFitPeak::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVFitPeak.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      MCVStdAnalysis::Streamer(R__b);
      R__b >> aux;
      R__b.CheckByteCount(R__s, R__c, MCVFitPeak::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVFitPeak::IsA(), kTRUE);
      MCVStdAnalysis::Streamer(R__b);
      R__b << (TObject*)aux;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVFitPeak::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVFitPeak.
      TClass *R__cl = ::MCVFitPeak::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*aux", &aux);
      R__insp.Inspect(R__cl, R__parent, "Et", &Et);
      R__insp.Inspect(R__cl, R__parent, "pc[30]", pc);
      R__insp.Inspect(R__cl, R__parent, "ps[30]", ps);
      R__insp.Inspect(R__cl, R__parent, "pa[30]", pa);
      R__insp.Inspect(R__cl, R__parent, "pr[30]", pr);
      R__insp.Inspect(R__cl, R__parent, "rki2[30]", rki2);
      R__insp.Inspect(R__cl, R__parent, "Ei", &Ei);
      R__insp.Inspect(R__cl, R__parent, "dEhi", &dEhi);
      R__insp.Inspect(R__cl, R__parent, "dElo", &dElo);
      R__insp.Inspect(R__cl, R__parent, "ibin", &ibin);
      R__insp.Inspect(R__cl, R__parent, "isEarray", &isEarray);
      MCVStdAnalysis::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVFitPeak(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVFitPeak : new ::MCVFitPeak;
   }
   static void *newArray_MCVFitPeak(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVFitPeak[nElements] : new ::MCVFitPeak[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVFitPeak(void *p) {
      delete ((::MCVFitPeak*)p);
   }
   static void deleteArray_MCVFitPeak(void *p) {
      delete [] ((::MCVFitPeak*)p);
   }
   static void destruct_MCVFitPeak(void *p) {
      typedef ::MCVFitPeak current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVFitPeak

//______________________________________________________________________________
void MCVBurstOffset::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVBurstOffset.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      MCVStdAnalysis::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, MCVBurstOffset::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVBurstOffset::IsA(), kTRUE);
      MCVStdAnalysis::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVBurstOffset::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVBurstOffset.
      TClass *R__cl = ::MCVBurstOffset::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "pc[30]", pc);
      R__insp.Inspect(R__cl, R__parent, "ps[30]", ps);
      R__insp.Inspect(R__cl, R__parent, "pa[30]", pa);
      R__insp.Inspect(R__cl, R__parent, "offdev[30]", offdev);
      R__insp.Inspect(R__cl, R__parent, "pdB", &pdB);
      R__insp.Inspect(R__cl, R__parent, "maxoffdev", &maxoffdev);
      R__insp.Inspect(R__cl, R__parent, "nextraoff", &nextraoff);
      R__insp.Inspect(R__cl, R__parent, "*refoff", &refoff);
      MCVStdAnalysis::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVBurstOffset(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVBurstOffset : new ::MCVBurstOffset;
   }
   static void *newArray_MCVBurstOffset(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVBurstOffset[nElements] : new ::MCVBurstOffset[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVBurstOffset(void *p) {
      delete ((::MCVBurstOffset*)p);
   }
   static void deleteArray_MCVBurstOffset(void *p) {
      delete [] ((::MCVBurstOffset*)p);
   }
   static void destruct_MCVBurstOffset(void *p) {
      typedef ::MCVBurstOffset current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVBurstOffset

//______________________________________________________________________________
void MCVTree::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVTree.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      MCVFile::Streamer(R__b);
      MCVHisto::Streamer(R__b);
      infoname.Streamer(R__b);
      R__b.ReadStaticArray((char*)outdataname);
      R__b >> fp;
      R__b >> fh;
      R__b >> sel;
      R__b.CheckByteCount(R__s, R__c, MCVTree::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVTree::IsA(), kTRUE);
      MCVFile::Streamer(R__b);
      MCVHisto::Streamer(R__b);
      infoname.Streamer(R__b);
      R__b.WriteArray(outdataname, 100);
      R__b << fp;
      R__b << fh;
      R__b << sel;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVTree::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVTree.
      TClass *R__cl = ::MCVTree::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*indata", &indata);
      R__insp.Inspect(R__cl, R__parent, "*outdata", &outdata);
      R__insp.Inspect(R__cl, R__parent, "*inhisto", &inhisto);
      R__insp.Inspect(R__cl, R__parent, "*conf", &conf);
      R__insp.Inspect(R__cl, R__parent, "*ininfo", &ininfo);
      R__insp.Inspect(R__cl, R__parent, "*outinfo", &outinfo);
      R__insp.Inspect(R__cl, R__parent, "inevt", (void*)&inevt);
      ::ROOT::GenericShowMembers("MCALevt", (void*)&inevt, R__insp, strcat(R__parent,"inevt."),true);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "inevents", &inevents);
      R__insp.Inspect(R__cl, R__parent, "outevents", &outevents);
      R__insp.Inspect(R__cl, R__parent, "infoname", &infoname);
      infoname.ShowMembers(R__insp, strcat(R__parent,"infoname.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "outdataname[100]", outdataname);
      R__insp.Inspect(R__cl, R__parent, "*fp", &fp);
      R__insp.Inspect(R__cl, R__parent, "*fh", &fh);
      R__insp.Inspect(R__cl, R__parent, "*sel", &sel);
      MCVFile::ShowMembers(R__insp, R__parent);
      MCVHisto::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVTree(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVTree : new ::MCVTree;
   }
   static void *newArray_MCVTree(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVTree[nElements] : new ::MCVTree[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVTree(void *p) {
      delete ((::MCVTree*)p);
   }
   static void deleteArray_MCVTree(void *p) {
      delete [] ((::MCVTree*)p);
   }
   static void destruct_MCVTree(void *p) {
      typedef ::MCVTree current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVTree

//______________________________________________________________________________
void MCVSelection::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVSelection.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> nbars;
      R__b.ReadStaticArray((int*)bars);
      R__b >> minA;
      R__b >> maxA;
      R__b >> minB;
      R__b >> maxB;
      R__b >> minMult;
      R__b >> maxMult;
      R__b >> minPos;
      R__b >> maxPos;
      R__b >> minE;
      R__b >> maxE;
      R__b >> minTime;
      R__b >> maxTime;
      R__b >> saveTracksFlg;
      R__b >> pdAEnable;
      R__b >> pdBEnable;
      R__b >> multEnable;
      R__b >> posEnable;
      R__b >> energyEnable;
      R__b >> timeEnable;
      R__b >> relToOffset;
      R__b.CheckByteCount(R__s, R__c, MCVSelection::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVSelection::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << nbars;
      R__b.WriteArray(bars, 30);
      R__b << minA;
      R__b << maxA;
      R__b << minB;
      R__b << maxB;
      R__b << minMult;
      R__b << maxMult;
      R__b << minPos;
      R__b << maxPos;
      R__b << minE;
      R__b << maxE;
      R__b << minTime;
      R__b << maxTime;
      R__b << saveTracksFlg;
      R__b << pdAEnable;
      R__b << pdBEnable;
      R__b << multEnable;
      R__b << posEnable;
      R__b << energyEnable;
      R__b << timeEnable;
      R__b << relToOffset;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVSelection::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVSelection.
      TClass *R__cl = ::MCVSelection::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "nbars", &nbars);
      R__insp.Inspect(R__cl, R__parent, "bars[30]", bars);
      R__insp.Inspect(R__cl, R__parent, "minA", &minA);
      R__insp.Inspect(R__cl, R__parent, "maxA", &maxA);
      R__insp.Inspect(R__cl, R__parent, "minB", &minB);
      R__insp.Inspect(R__cl, R__parent, "maxB", &maxB);
      R__insp.Inspect(R__cl, R__parent, "minMult", &minMult);
      R__insp.Inspect(R__cl, R__parent, "maxMult", &maxMult);
      R__insp.Inspect(R__cl, R__parent, "minPos", &minPos);
      R__insp.Inspect(R__cl, R__parent, "maxPos", &maxPos);
      R__insp.Inspect(R__cl, R__parent, "minE", &minE);
      R__insp.Inspect(R__cl, R__parent, "maxE", &maxE);
      R__insp.Inspect(R__cl, R__parent, "minTime", &minTime);
      R__insp.Inspect(R__cl, R__parent, "maxTime", &maxTime);
      R__insp.Inspect(R__cl, R__parent, "saveTracksFlg", &saveTracksFlg);
      R__insp.Inspect(R__cl, R__parent, "pdAEnable", &pdAEnable);
      R__insp.Inspect(R__cl, R__parent, "pdBEnable", &pdBEnable);
      R__insp.Inspect(R__cl, R__parent, "multEnable", &multEnable);
      R__insp.Inspect(R__cl, R__parent, "posEnable", &posEnable);
      R__insp.Inspect(R__cl, R__parent, "energyEnable", &energyEnable);
      R__insp.Inspect(R__cl, R__parent, "timeEnable", &timeEnable);
      R__insp.Inspect(R__cl, R__parent, "relToOffset", &relToOffset);
      R__insp.Inspect(R__cl, R__parent, "isBarStrong", &isBarStrong);
      R__insp.Inspect(R__cl, R__parent, "isPosStrong", &isPosStrong);
      R__insp.Inspect(R__cl, R__parent, "isEStrong", &isEStrong);
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVSelection(void *p) {
      return  p ? new(p) ::MCVSelection : new ::MCVSelection;
   }
   static void *newArray_MCVSelection(Long_t nElements, void *p) {
      return p ? new(p) ::MCVSelection[nElements] : new ::MCVSelection[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVSelection(void *p) {
      delete ((::MCVSelection*)p);
   }
   static void deleteArray_MCVSelection(void *p) {
      delete [] ((::MCVSelection*)p);
   }
   static void destruct_MCVSelection(void *p) {
      typedef ::MCVSelection current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVSelection

//______________________________________________________________________________
void MCVSelectionGUI::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVSelectionGUI.

   TGTransientFrame::Streamer(R__b);
}

//______________________________________________________________________________
void MCVSelectionGUI::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVSelectionGUI.
      TClass *R__cl = ::MCVSelectionGUI::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fL1", &fL1);
      R__insp.Inspect(R__cl, R__parent, "*fL2", &fL2);
      R__insp.Inspect(R__cl, R__parent, "*fL3", &fL3);
      R__insp.Inspect(R__cl, R__parent, "*fL4", &fL4);
      R__insp.Inspect(R__cl, R__parent, "*fL5", &fL5);
      R__insp.Inspect(R__cl, R__parent, "*fChkArr", &fChkArr);
      R__insp.Inspect(R__cl, R__parent, "*fChkCoinc", &fChkCoinc);
      R__insp.Inspect(R__cl, R__parent, "*fGroupArr", &fGroupArr);
      R__insp.Inspect(R__cl, R__parent, "*detHisto", &detHisto);
      R__insp.Inspect(R__cl, R__parent, "*rawHisto", &rawHisto);
      R__insp.Inspect(R__cl, R__parent, "*selHisto", &selHisto);
      R__insp.Inspect(R__cl, R__parent, "*hPDA", &hPDA);
      R__insp.Inspect(R__cl, R__parent, "*hPDB", &hPDB);
      R__insp.Inspect(R__cl, R__parent, "*hPos", &hPos);
      R__insp.Inspect(R__cl, R__parent, "*hE", &hE);
      R__insp.Inspect(R__cl, R__parent, "*hCR", &hCR);
      R__insp.Inspect(R__cl, R__parent, "*h2D", &h2D);
      R__insp.Inspect(R__cl, R__parent, "*fF0", &fF0);
      R__insp.Inspect(R__cl, R__parent, "*fFCoinc", &fFCoinc);
      R__insp.Inspect(R__cl, R__parent, "*fFPDA", &fFPDA);
      R__insp.Inspect(R__cl, R__parent, "*fFStrongFrame", &fFStrongFrame);
      R__insp.Inspect(R__cl, R__parent, "*fFrame1", &fFrame1);
      R__insp.Inspect(R__cl, R__parent, "*fF1", &fF1);
      R__insp.Inspect(R__cl, R__parent, "*fF2", &fF2);
      R__insp.Inspect(R__cl, R__parent, "*fFCoinc1", &fFCoinc1);
      R__insp.Inspect(R__cl, R__parent, "*fFCoinc2", &fFCoinc2);
      R__insp.Inspect(R__cl, R__parent, "*fFButtons", &fFButtons);
      R__insp.Inspect(R__cl, R__parent, "*fFCommands", &fFCommands);
      R__insp.Inspect(R__cl, R__parent, "*fFData", &fFData);
      R__insp.Inspect(R__cl, R__parent, "*fOkButton", &fOkButton);
      R__insp.Inspect(R__cl, R__parent, "*fZeroSupButton", &fZeroSupButton);
      R__insp.Inspect(R__cl, R__parent, "*fApplyButton", &fApplyButton);
      R__insp.Inspect(R__cl, R__parent, "*fTab", &fTab);
      R__insp.Inspect(R__cl, R__parent, "*fRelToOffset", &fRelToOffset);
      R__insp.Inspect(R__cl, R__parent, "*fStrongBar", &fStrongBar);
      R__insp.Inspect(R__cl, R__parent, "*fStrongPos", &fStrongPos);
      R__insp.Inspect(R__cl, R__parent, "*fStrongE", &fStrongE);
      R__insp.Inspect(R__cl, R__parent, "command[50]", command);
      R__insp.Inspect(R__cl, R__parent, "*indata", &indata);
      R__insp.Inspect(R__cl, R__parent, "*inhisto", &inhisto);
      R__insp.Inspect(R__cl, R__parent, "*ininfo", &ininfo);
      R__insp.Inspect(R__cl, R__parent, "sel", &sel);
      sel.ShowMembers(R__insp, strcat(R__parent,"sel.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*selector", &selector);
      R__insp.Inspect(R__cl, R__parent, "nsel", &nsel);
      TGTransientFrame::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_MCVSelectionGUI(void *p) {
      delete ((::MCVSelectionGUI*)p);
   }
   static void deleteArray_MCVSelectionGUI(void *p) {
      delete [] ((::MCVSelectionGUI*)p);
   }
   static void destruct_MCVSelectionGUI(void *p) {
      typedef ::MCVSelectionGUI current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVSelectionGUI

//______________________________________________________________________________
void MCVElectricalCalib::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVElectricalCalib.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      MCVStdAnalysis::Streamer(R__b);
      R__b.ReadStaticArray((float*)p1amp);
      R__b.ReadStaticArray((float*)p1cen);
      R__b.ReadStaticArray((float*)p1sig);
      R__b.ReadStaticArray((float*)p1nevt);
      R__b.ReadStaticArray((float*)p2amp);
      R__b.ReadStaticArray((float*)p2cen);
      R__b.ReadStaticArray((float*)p2sig);
      R__b.ReadStaticArray((float*)p2nevt);
      R__b.ReadStaticArray((float*)r1cen);
      R__b.ReadStaticArray((float*)r1sig);
      R__b.ReadStaticArray((float*)r2cen);
      R__b.ReadStaticArray((float*)r2sig);
      R__b >> nextraoff1;
      R__b >> nextrasig1;
      R__b >> nextraoff2;
      R__b >> nextrasig2;
      R__b >> nminevt1;
      R__b >> nminevt2;
      R__b >> maxoffdev;
      R__b >> maxsigdev;
      R__b >> minevents;
      R__b >> refrun;
      R__b >> peak;
      R__b >> peak2;
      R__b.CheckByteCount(R__s, R__c, MCVElectricalCalib::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVElectricalCalib::IsA(), kTRUE);
      MCVStdAnalysis::Streamer(R__b);
      R__b.WriteArray(p1amp, 60);
      R__b.WriteArray(p1cen, 60);
      R__b.WriteArray(p1sig, 60);
      R__b.WriteArray(p1nevt, 60);
      R__b.WriteArray(p2amp, 60);
      R__b.WriteArray(p2cen, 60);
      R__b.WriteArray(p2sig, 60);
      R__b.WriteArray(p2nevt, 60);
      R__b.WriteArray(r1cen, 60);
      R__b.WriteArray(r1sig, 60);
      R__b.WriteArray(r2cen, 60);
      R__b.WriteArray(r2sig, 60);
      R__b << nextraoff1;
      R__b << nextrasig1;
      R__b << nextraoff2;
      R__b << nextrasig2;
      R__b << nminevt1;
      R__b << nminevt2;
      R__b << maxoffdev;
      R__b << maxsigdev;
      R__b << minevents;
      R__b << refrun;
      R__b << peak;
      R__b << peak2;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVElectricalCalib::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVElectricalCalib.
      TClass *R__cl = ::MCVElectricalCalib::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "pnum", &pnum);
      R__insp.Inspect(R__cl, R__parent, "thr", &thr);
      R__insp.Inspect(R__cl, R__parent, "p1amp[60]", p1amp);
      R__insp.Inspect(R__cl, R__parent, "p1cen[60]", p1cen);
      R__insp.Inspect(R__cl, R__parent, "p1sig[60]", p1sig);
      R__insp.Inspect(R__cl, R__parent, "p1nevt[60]", p1nevt);
      R__insp.Inspect(R__cl, R__parent, "p2amp[60]", p2amp);
      R__insp.Inspect(R__cl, R__parent, "p2cen[60]", p2cen);
      R__insp.Inspect(R__cl, R__parent, "p2sig[60]", p2sig);
      R__insp.Inspect(R__cl, R__parent, "p2nevt[60]", p2nevt);
      R__insp.Inspect(R__cl, R__parent, "r1cen[60]", r1cen);
      R__insp.Inspect(R__cl, R__parent, "r1sig[60]", r1sig);
      R__insp.Inspect(R__cl, R__parent, "r2cen[60]", r2cen);
      R__insp.Inspect(R__cl, R__parent, "r2sig[60]", r2sig);
      R__insp.Inspect(R__cl, R__parent, "nextraoff1", &nextraoff1);
      R__insp.Inspect(R__cl, R__parent, "nextrasig1", &nextrasig1);
      R__insp.Inspect(R__cl, R__parent, "nextraoff2", &nextraoff2);
      R__insp.Inspect(R__cl, R__parent, "nextrasig2", &nextrasig2);
      R__insp.Inspect(R__cl, R__parent, "nminevt1", &nminevt1);
      R__insp.Inspect(R__cl, R__parent, "nminevt2", &nminevt2);
      R__insp.Inspect(R__cl, R__parent, "maxoffdev", &maxoffdev);
      R__insp.Inspect(R__cl, R__parent, "maxsigdev", &maxsigdev);
      R__insp.Inspect(R__cl, R__parent, "minevents", &minevents);
      R__insp.Inspect(R__cl, R__parent, "refrun", &refrun);
      R__insp.Inspect(R__cl, R__parent, "*peak", &peak);
      R__insp.Inspect(R__cl, R__parent, "*peak2", &peak2);
      MCVStdAnalysis::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVElectricalCalib(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVElectricalCalib : new ::MCVElectricalCalib;
   }
   static void *newArray_MCVElectricalCalib(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVElectricalCalib[nElements] : new ::MCVElectricalCalib[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVElectricalCalib(void *p) {
      delete ((::MCVElectricalCalib*)p);
   }
   static void deleteArray_MCVElectricalCalib(void *p) {
      delete [] ((::MCVElectricalCalib*)p);
   }
   static void destruct_MCVElectricalCalib(void *p) {
      typedef ::MCVElectricalCalib current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVElectricalCalib

//______________________________________________________________________________
void MCVHisto3908::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVHisto3908.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> MCALElim0;
      R__b >> MCALElim1;
      R__b.CheckByteCount(R__s, R__c, MCVHisto3908::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVHisto3908::IsA(), kTRUE);
      R__b << MCALElim0;
      R__b << MCALElim1;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVHisto3908::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVHisto3908.
      TClass *R__cl = ::MCVHisto3908::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "sitmsecs[6]", sitmsecs);
      R__insp.Inspect(R__cl, R__parent, "*rawEt", &rawEt);
      R__insp.Inspect(R__cl, R__parent, "*rawbsr", &rawbsr);
      R__insp.Inspect(R__cl, R__parent, "*rawbsr_ric", &rawbsr_ric);
      R__insp.Inspect(R__cl, R__parent, "*Et_mcal", &Et_mcal);
      R__insp.Inspect(R__cl, R__parent, "*gdr_E2_mcal[6]", &gdr_E2_mcal);
      R__insp.Inspect(R__cl, R__parent, "*gdr_mcal[2][4][6]", &gdr_mcal);
      R__insp.Inspect(R__cl, R__parent, "*gdr_E2_mcal_ric[6]", &gdr_E2_mcal_ric);
      R__insp.Inspect(R__cl, R__parent, "*gdr_mcal_ric[2][4][6]", &gdr_mcal_ric);
      R__insp.Inspect(R__cl, R__parent, "t0bsr", &t0bsr);
      R__insp.Inspect(R__cl, R__parent, "t0bsr_ric", &t0bsr_ric);
      R__insp.Inspect(R__cl, R__parent, "t0Et", &t0Et);
      R__insp.Inspect(R__cl, R__parent, "pesohistEt", &pesohistEt);
      R__insp.Inspect(R__cl, R__parent, "pesohistbsr", &pesohistbsr);
      R__insp.Inspect(R__cl, R__parent, "numE", &numE);
      R__insp.Inspect(R__cl, R__parent, "MCALElim0", &MCALElim0);
      R__insp.Inspect(R__cl, R__parent, "MCALElim1", &MCALElim1);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVHisto3908(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVHisto3908 : new ::MCVHisto3908;
   }
   static void *newArray_MCVHisto3908(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVHisto3908[nElements] : new ::MCVHisto3908[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVHisto3908(void *p) {
      delete ((::MCVHisto3908*)p);
   }
   static void deleteArray_MCVHisto3908(void *p) {
      delete [] ((::MCVHisto3908*)p);
   }
   static void destruct_MCVHisto3908(void *p) {
      typedef ::MCVHisto3908 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVHisto3908

//______________________________________________________________________________
void MCVFilePKP3908::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVFilePKP3908.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      MCVFilePKP::Streamer(R__b);
      MCVHisto3908::Streamer(R__b);
      R__b >> burstarray;
      R__b >> nburst;
      R__b.CheckByteCount(R__s, R__c, MCVFilePKP3908::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVFilePKP3908::IsA(), kTRUE);
      MCVFilePKP::Streamer(R__b);
      MCVHisto3908::Streamer(R__b);
      R__b << burstarray;
      R__b << nburst;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVFilePKP3908::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVFilePKP3908.
      TClass *R__cl = ::MCVFilePKP3908::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "bsrinfo", (void*)&bsrinfo);
      ::ROOT::GenericShowMembers("MCVbsrInfo", (void*)&bsrinfo, R__insp, strcat(R__parent,"bsrinfo."),true);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "currbsr", (void*)&currbsr);
      ::ROOT::GenericShowMembers("MCALbsr", (void*)&currbsr, R__insp, strcat(R__parent,"currbsr."),true);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "currpkt", (void*)&currpkt);
      ::ROOT::GenericShowMembers("MCALpkt", (void*)&currpkt, R__insp, strcat(R__parent,"currpkt."),true);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "pktnumb", &pktnumb);
      R__insp.Inspect(R__cl, R__parent, "*burstid", &burstid);
      R__insp.Inspect(R__cl, R__parent, "inittime", &inittime);
      R__insp.Inspect(R__cl, R__parent, "*burstarray", &burstarray);
      R__insp.Inspect(R__cl, R__parent, "nburst", &nburst);
      R__insp.Inspect(R__cl, R__parent, "*tdatabsr", &tdatabsr);
      MCVFilePKP::ShowMembers(R__insp, R__parent);
      MCVHisto3908::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVFilePKP3908(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVFilePKP3908 : new ::MCVFilePKP3908;
   }
   static void *newArray_MCVFilePKP3908(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVFilePKP3908[nElements] : new ::MCVFilePKP3908[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVFilePKP3908(void *p) {
      delete ((::MCVFilePKP3908*)p);
   }
   static void deleteArray_MCVFilePKP3908(void *p) {
      delete [] ((::MCVFilePKP3908*)p);
   }
   static void destruct_MCVFilePKP3908(void *p) {
      typedef ::MCVFilePKP3908 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVFilePKP3908

//______________________________________________________________________________
void MCVbsrMonitor::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVbsrMonitor.

   TGTransientFrame::Streamer(R__b);
}

//______________________________________________________________________________
void MCVbsrMonitor::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVbsrMonitor.
      TClass *R__cl = ::MCVbsrMonitor::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fileInfo", &fileInfo);
      R__insp.Inspect(R__cl, R__parent, "*conf", &conf);
      R__insp.Inspect(R__cl, R__parent, "*rawbsr", &rawbsr);
      R__insp.Inspect(R__cl, R__parent, "titolo[50]", titolo);
      R__insp.Inspect(R__cl, R__parent, "*allmcal", &allmcal);
      R__insp.Inspect(R__cl, R__parent, "sitwinttime[6]", sitwinttime);
      R__insp.Inspect(R__cl, R__parent, "*gdr_E2_mcal[6]", &gdr_E2_mcal);
      R__insp.Inspect(R__cl, R__parent, "*gdr_mcal[2][4][6]", &gdr_mcal);
      R__insp.Inspect(R__cl, R__parent, "*gdr_sa[2][4][6]", &gdr_sa);
      R__insp.Inspect(R__cl, R__parent, "*Et_mcal", &Et_mcal);
      TGTransientFrame::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_MCVbsrMonitor(void *p) {
      delete ((::MCVbsrMonitor*)p);
   }
   static void deleteArray_MCVbsrMonitor(void *p) {
      delete [] ((::MCVbsrMonitor*)p);
   }
   static void destruct_MCVbsrMonitor(void *p) {
      typedef ::MCVbsrMonitor current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVbsrMonitor

//______________________________________________________________________________
void MCVbsrMonitor_ric::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVbsrMonitor_ric.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TGTransientFrame::Streamer(R__b);
      R__b >> nsigma;
      R__b.CheckByteCount(R__s, R__c, MCVbsrMonitor_ric::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVbsrMonitor_ric::IsA(), kTRUE);
      TGTransientFrame::Streamer(R__b);
      R__b << nsigma;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVbsrMonitor_ric::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVbsrMonitor_ric.
      TClass *R__cl = ::MCVbsrMonitor_ric::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fileInfo", &fileInfo);
      R__insp.Inspect(R__cl, R__parent, "*conf", &conf);
      R__insp.Inspect(R__cl, R__parent, "*rawbsr_ric", &rawbsr_ric);
      R__insp.Inspect(R__cl, R__parent, "*burstarray", &burstarray);
      R__insp.Inspect(R__cl, R__parent, "titolo[50]", titolo);
      R__insp.Inspect(R__cl, R__parent, "*allmcal", &allmcal);
      R__insp.Inspect(R__cl, R__parent, "sitwinttime[6]", sitwinttime);
      R__insp.Inspect(R__cl, R__parent, "nsigma", &nsigma);
      R__insp.Inspect(R__cl, R__parent, "*gdr_E2_mcal[6]", &gdr_E2_mcal);
      R__insp.Inspect(R__cl, R__parent, "*gdr_mcal[2][4][6]", &gdr_mcal);
      R__insp.Inspect(R__cl, R__parent, "*gdr_sa[2][4][6]", &gdr_sa);
      TGTransientFrame::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_MCVbsrMonitor_ric(void *p) {
      delete ((::MCVbsrMonitor_ric*)p);
   }
   static void deleteArray_MCVbsrMonitor_ric(void *p) {
      delete [] ((::MCVbsrMonitor_ric*)p);
   }
   static void destruct_MCVbsrMonitor_ric(void *p) {
      typedef ::MCVbsrMonitor_ric current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVbsrMonitor_ric

//______________________________________________________________________________
void MCVBurst::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVBurst.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> burstid;
      R__b >> bstart;
      R__b >> bstop;
      R__b >> inittime;
      R__b >> nburstevents;
      R__b >> bsrsit;
      R__b >> nume;
      R__b >> numg;
      R__b >> inipkt;
      R__b >> finpkt;
      R__b >> bsr;
      R__b >> ber;
      R__b.CheckByteCount(R__s, R__c, MCVBurst::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVBurst::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << burstid;
      R__b << bstart;
      R__b << bstop;
      R__b << inittime;
      R__b << nburstevents;
      R__b << bsrsit;
      R__b << nume;
      R__b << numg;
      R__b << inipkt;
      R__b << finpkt;
      R__b << bsr;
      R__b << ber;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVBurst::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVBurst.
      TClass *R__cl = ::MCVBurst::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "burstid", &burstid);
      R__insp.Inspect(R__cl, R__parent, "bstart", &bstart);
      R__insp.Inspect(R__cl, R__parent, "bstop", &bstop);
      R__insp.Inspect(R__cl, R__parent, "inittime", &inittime);
      R__insp.Inspect(R__cl, R__parent, "nburstevents", &nburstevents);
      R__insp.Inspect(R__cl, R__parent, "bsrsit", &bsrsit);
      R__insp.Inspect(R__cl, R__parent, "nume", &nume);
      R__insp.Inspect(R__cl, R__parent, "numg", &numg);
      R__insp.Inspect(R__cl, R__parent, "inipkt", &inipkt);
      R__insp.Inspect(R__cl, R__parent, "finpkt", &finpkt);
      R__insp.Inspect(R__cl, R__parent, "bsr", &bsr);
      R__insp.Inspect(R__cl, R__parent, "ber", &ber);
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVBurst(void *p) {
      return  p ? new(p) ::MCVBurst : new ::MCVBurst;
   }
   static void *newArray_MCVBurst(Long_t nElements, void *p) {
      return p ? new(p) ::MCVBurst[nElements] : new ::MCVBurst[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVBurst(void *p) {
      delete ((::MCVBurst*)p);
   }
   static void deleteArray_MCVBurst(void *p) {
      delete [] ((::MCVBurst*)p);
   }
   static void destruct_MCVBurst(void *p) {
      typedef ::MCVBurst current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVBurst

//______________________________________________________________________________
void MCVAntiCoincidence::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVAntiCoincidence.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      MCVStdAnalysis::Streamer(R__b);
      R__b >> minbin;
      R__b >> maxbin;
      R__b.CheckByteCount(R__s, R__c, MCVAntiCoincidence::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVAntiCoincidence::IsA(), kTRUE);
      MCVStdAnalysis::Streamer(R__b);
      R__b << minbin;
      R__b << maxbin;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVAntiCoincidence::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVAntiCoincidence.
      TClass *R__cl = ::MCVAntiCoincidence::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "minbin", &minbin);
      R__insp.Inspect(R__cl, R__parent, "maxbin", &maxbin);
      R__insp.Inspect(R__cl, R__parent, "herate", &herate);
      R__insp.Inspect(R__cl, R__parent, "herateref", &herateref);
      MCVStdAnalysis::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVAntiCoincidence(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVAntiCoincidence : new ::MCVAntiCoincidence;
   }
   static void *newArray_MCVAntiCoincidence(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVAntiCoincidence[nElements] : new ::MCVAntiCoincidence[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVAntiCoincidence(void *p) {
      delete ((::MCVAntiCoincidence*)p);
   }
   static void deleteArray_MCVAntiCoincidence(void *p) {
      delete [] ((::MCVAntiCoincidence*)p);
   }
   static void destruct_MCVAntiCoincidence(void *p) {
      typedef ::MCVAntiCoincidence current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVAntiCoincidence

//______________________________________________________________________________
void MCVCalibration::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVCalibration.

   ::Error("MCVCalibration::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void MCVCalibration::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVCalibration.
      TClass *R__cl = ::MCVCalibration::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "nhit[31][2]", nhit);
      R__insp.Inspect(R__cl, R__parent, "data[31][2][3][30]", data);
      R__insp.Inspect(R__cl, R__parent, "y2[31][2][30]", y2);
      R__insp.Inspect(R__cl, R__parent, "X", &X);
      R__insp.Inspect(R__cl, R__parent, "Y", &Y);
      R__insp.Inspect(R__cl, R__parent, "dataK[31][2][2][30]", dataK);
      R__insp.Inspect(R__cl, R__parent, "y2K[31][2][30]", y2K);
      R__insp.Inspect(R__cl, R__parent, "u0A[30]", u0A);
      R__insp.Inspect(R__cl, R__parent, "u0B[30]", u0B);
      R__insp.Inspect(R__cl, R__parent, "alphaA[30]", alphaA);
      R__insp.Inspect(R__cl, R__parent, "alphaB[30]", alphaB);
      R__insp.Inspect(R__cl, R__parent, "oA[30]", oA);
      R__insp.Inspect(R__cl, R__parent, "oB[30]", oB);
      R__insp.Inspect(R__cl, R__parent, "param[12]", param);
      R__insp.Inspect(R__cl, R__parent, "poserr[20]", poserr);
      R__insp.Inspect(R__cl, R__parent, "calib", &calib);
      R__insp.Inspect(R__cl, R__parent, "cbar", &cbar);
      R__insp.Inspect(R__cl, R__parent, "cgainA", &cgainA);
      R__insp.Inspect(R__cl, R__parent, "cgainB", &cgainB);
      R__insp.Inspect(R__cl, R__parent, "calphaA", &calphaA);
      R__insp.Inspect(R__cl, R__parent, "calphaB", &calphaB);
      R__insp.Inspect(R__cl, R__parent, "calibName", &calibName);
      calibName.ShowMembers(R__insp, strcat(R__parent,"calibName.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "XDatFile", &XDatFile);
      XDatFile.ShowMembers(R__insp, strcat(R__parent,"XDatFile.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "ZDatFile", &ZDatFile);
      ZDatFile.ShowMembers(R__insp, strcat(R__parent,"ZDatFile.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "calFile", &calFile);
      calFile.ShowMembers(R__insp, strcat(R__parent,"calFile.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*stdconf", &stdconf);
      R__insp.Inspect(R__cl, R__parent, "*conf", &conf);
      R__insp.Inspect(R__cl, R__parent, "*hcpdA", &hcpdA);
      R__insp.Inspect(R__cl, R__parent, "*hcpdB", &hcpdB);
      R__insp.Inspect(R__cl, R__parent, "*hcBonA", &hcBonA);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVCalibration(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVCalibration : new ::MCVCalibration;
   }
   static void *newArray_MCVCalibration(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVCalibration[nElements] : new ::MCVCalibration[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVCalibration(void *p) {
      delete ((::MCVCalibration*)p);
   }
   static void deleteArray_MCVCalibration(void *p) {
      delete [] ((::MCVCalibration*)p);
   }
   static void destruct_MCVCalibration(void *p) {
      typedef ::MCVCalibration current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVCalibration

//______________________________________________________________________________
void MCVSubMS::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVSubMS.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> hSubMS;
      int R__i;
      for (R__i = 0; R__i < 4; R__i++)
         R__b >> iniwin[R__i];
      for (R__i = 0; R__i < 4; R__i++)
         R__b >> finwin[R__i];
      R__b.ReadStaticArray((int*)nwin);
      R__b.ReadStaticArray((int*)nthr);
      R__b.ReadStaticArray((int*)ntrg);
      R__b.ReadStaticArray((bool*)activewin);
      R__b.ReadStaticArray((double*)winduration);
      R__b.ReadStaticArray((double*)tprev);
      R__b.CheckByteCount(R__s, R__c, MCVSubMS::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVSubMS::IsA(), kTRUE);
      R__b << (TObject*)hSubMS;
      int R__i;
      for (R__i = 0; R__i < 4; R__i++)
         R__b << iniwin[R__i];
      for (R__i = 0; R__i < 4; R__i++)
         R__b << finwin[R__i];
      R__b.WriteArray(nwin, 4);
      R__b.WriteArray(nthr, 4);
      R__b.WriteArray(ntrg, 4);
      R__b.WriteArray(activewin, 4);
      R__b.WriteArray(winduration, 4);
      R__b.WriteArray(tprev, 4);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVSubMS::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVSubMS.
      TClass *R__cl = ::MCVSubMS::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*hSubMS", &hSubMS);
      R__insp.Inspect(R__cl, R__parent, "*iniwin[4]", &iniwin);
      R__insp.Inspect(R__cl, R__parent, "*finwin[4]", &finwin);
      R__insp.Inspect(R__cl, R__parent, "nwin[4]", nwin);
      R__insp.Inspect(R__cl, R__parent, "nthr[4]", nthr);
      R__insp.Inspect(R__cl, R__parent, "ntrg[4]", ntrg);
      R__insp.Inspect(R__cl, R__parent, "activewin[4]", activewin);
      R__insp.Inspect(R__cl, R__parent, "winduration[4]", winduration);
      R__insp.Inspect(R__cl, R__parent, "tprev[4]", tprev);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_MCVSubMS(void *p) {
      delete ((::MCVSubMS*)p);
   }
   static void deleteArray_MCVSubMS(void *p) {
      delete [] ((::MCVSubMS*)p);
   }
   static void destruct_MCVSubMS(void *p) {
      typedef ::MCVSubMS current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVSubMS

//______________________________________________________________________________
void MCVGlobalRetriggering::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVGlobalRetriggering.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      MCVStdAnalysis::Streamer(R__b);
      R__b >> mu;
      R__b.ReadStaticArray((double*)par);
      R__b >> c0;
      R__b >> e0;
      R__b.CheckByteCount(R__s, R__c, MCVGlobalRetriggering::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVGlobalRetriggering::IsA(), kTRUE);
      MCVStdAnalysis::Streamer(R__b);
      R__b << mu;
      R__b.WriteArray(par, 2);
      R__b << c0;
      R__b << e0;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVGlobalRetriggering::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVGlobalRetriggering.
      TClass *R__cl = ::MCVGlobalRetriggering::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "mu", &mu);
      R__insp.Inspect(R__cl, R__parent, "tmax", &tmax);
      R__insp.Inspect(R__cl, R__parent, "maxfrac", &maxfrac);
      R__insp.Inspect(R__cl, R__parent, "fitlow", &fitlow);
      R__insp.Inspect(R__cl, R__parent, "fithi", &fithi);
      R__insp.Inspect(R__cl, R__parent, "extracnts", &extracnts);
      R__insp.Inspect(R__cl, R__parent, "extrafrac", &extrafrac);
      R__insp.Inspect(R__cl, R__parent, "par[2]", par);
      R__insp.Inspect(R__cl, R__parent, "c0", &c0);
      R__insp.Inspect(R__cl, R__parent, "e0", &e0);
      R__insp.Inspect(R__cl, R__parent, "*hDT", &hDT);
      R__insp.Inspect(R__cl, R__parent, "*fdt", &fdt);
      MCVStdAnalysis::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVGlobalRetriggering(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVGlobalRetriggering : new ::MCVGlobalRetriggering;
   }
   static void *newArray_MCVGlobalRetriggering(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVGlobalRetriggering[nElements] : new ::MCVGlobalRetriggering[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVGlobalRetriggering(void *p) {
      delete ((::MCVGlobalRetriggering*)p);
   }
   static void deleteArray_MCVGlobalRetriggering(void *p) {
      delete [] ((::MCVGlobalRetriggering*)p);
   }
   static void destruct_MCVGlobalRetriggering(void *p) {
      typedef ::MCVGlobalRetriggering current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVGlobalRetriggering

//______________________________________________________________________________
void MCVBarCorrelation::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVBarCorrelation.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      MCVStdAnalysis::Streamer(R__b);
      R__b >> maxiter;
      R__b >> maxsigma;
      //R__b.ReadArray(avgbc);
      //R__b.ReadArray(avgbclow);
      //R__b.ReadArray(stdbc);
      //R__b.ReadArray(stdbclow);
      R__b.CheckByteCount(R__s, R__c, MCVBarCorrelation::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVBarCorrelation::IsA(), kTRUE);
      MCVStdAnalysis::Streamer(R__b);
      R__b << maxiter;
      R__b << maxsigma;
      //R__b.WriteArray(avgbc, __COUNTER__);
      //R__b.WriteArray(avgbclow, __COUNTER__);
      //R__b.WriteArray(stdbc, __COUNTER__);
      //R__b.WriteArray(stdbclow, __COUNTER__);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVBarCorrelation::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVBarCorrelation.
      TClass *R__cl = ::MCVBarCorrelation::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "maxiter", &maxiter);
      R__insp.Inspect(R__cl, R__parent, "maxsigma", &maxsigma);
      R__insp.Inspect(R__cl, R__parent, "*avgbc", &avgbc);
      R__insp.Inspect(R__cl, R__parent, "*avgbclow", &avgbclow);
      R__insp.Inspect(R__cl, R__parent, "*stdbc", &stdbc);
      R__insp.Inspect(R__cl, R__parent, "*stdbclow", &stdbclow);
      MCVStdAnalysis::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVBarCorrelation(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVBarCorrelation : new ::MCVBarCorrelation;
   }
   static void *newArray_MCVBarCorrelation(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVBarCorrelation[nElements] : new ::MCVBarCorrelation[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVBarCorrelation(void *p) {
      delete ((::MCVBarCorrelation*)p);
   }
   static void deleteArray_MCVBarCorrelation(void *p) {
      delete [] ((::MCVBarCorrelation*)p);
   }
   static void destruct_MCVBarCorrelation(void *p) {
      typedef ::MCVBarCorrelation current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVBarCorrelation

//______________________________________________________________________________
void MCVBkgSubtraction::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVBkgSubtraction.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      MCVStdAnalysis::Streamer(R__b);
      refname.Streamer(R__b);
      simname.Streamer(R__b);
      R__b >> epeak;
      R__b >> simCompare;
      R__b.CheckByteCount(R__s, R__c, MCVBkgSubtraction::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVBkgSubtraction::IsA(), kTRUE);
      MCVStdAnalysis::Streamer(R__b);
      refname.Streamer(R__b);
      simname.Streamer(R__b);
      R__b << epeak;
      R__b << simCompare;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVBkgSubtraction::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVBkgSubtraction.
      TClass *R__cl = ::MCVBkgSubtraction::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "refname", &refname);
      refname.ShowMembers(R__insp, strcat(R__parent,"refname.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "simname", &simname);
      simname.ShowMembers(R__insp, strcat(R__parent,"simname.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fbkg", &fbkg);
      R__insp.Inspect(R__cl, R__parent, "*fsim", &fsim);
      R__insp.Inspect(R__cl, R__parent, "*hstotE", &hstotE);
      R__insp.Inspect(R__cl, R__parent, "*asrawE", &asrawE);
      R__insp.Inspect(R__cl, R__parent, "*abkgrawE", &abkgrawE);
      R__insp.Inspect(R__cl, R__parent, "*arawE", &arawE);
      R__insp.Inspect(R__cl, R__parent, "*asimrawE", &asimrawE);
      R__insp.Inspect(R__cl, R__parent, "*asim", &asim);
      R__insp.Inspect(R__cl, R__parent, "*hsimtotE", &hsimtotE);
      R__insp.Inspect(R__cl, R__parent, "*hsX", &hsX);
      R__insp.Inspect(R__cl, R__parent, "*hsZ", &hsZ);
      R__insp.Inspect(R__cl, R__parent, "epeak", &epeak);
      R__insp.Inspect(R__cl, R__parent, "simCompare", &simCompare);
      R__insp.Inspect(R__cl, R__parent, "pc[30]", pc);
      R__insp.Inspect(R__cl, R__parent, "ps[30]", ps);
      R__insp.Inspect(R__cl, R__parent, "pr[30]", pr);
      R__insp.Inspect(R__cl, R__parent, "pcsim[30]", pcsim);
      R__insp.Inspect(R__cl, R__parent, "pssim[30]", pssim);
      R__insp.Inspect(R__cl, R__parent, "prsim[30]", prsim);
      R__insp.Inspect(R__cl, R__parent, "pctot", &pctot);
      R__insp.Inspect(R__cl, R__parent, "pstot", &pstot);
      R__insp.Inspect(R__cl, R__parent, "prtot", &prtot);
      R__insp.Inspect(R__cl, R__parent, "pcsimtot", &pcsimtot);
      R__insp.Inspect(R__cl, R__parent, "pssimtot", &pssimtot);
      R__insp.Inspect(R__cl, R__parent, "prsimtot", &prsimtot);
      MCVStdAnalysis::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVBkgSubtraction(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVBkgSubtraction : new ::MCVBkgSubtraction;
   }
   static void *newArray_MCVBkgSubtraction(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVBkgSubtraction[nElements] : new ::MCVBkgSubtraction[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVBkgSubtraction(void *p) {
      delete ((::MCVBkgSubtraction*)p);
   }
   static void deleteArray_MCVBkgSubtraction(void *p) {
      delete [] ((::MCVBkgSubtraction*)p);
   }
   static void destruct_MCVBkgSubtraction(void *p) {
      typedef ::MCVBkgSubtraction current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVBkgSubtraction

//______________________________________________________________________________
void MCVBurstLandauFit::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVBurstLandauFit.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      MCVStdAnalysis::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, MCVBurstLandauFit::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVBurstLandauFit::IsA(), kTRUE);
      MCVStdAnalysis::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVBurstLandauFit::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVBurstLandauFit.
      TClass *R__cl = ::MCVBurstLandauFit::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "mpv[30]", mpv);
      R__insp.Inspect(R__cl, R__parent, "sig[30]", sig);
      R__insp.Inspect(R__cl, R__parent, "amp[30]", amp);
      R__insp.Inspect(R__cl, R__parent, "mE[30]", mE);
      R__insp.Inspect(R__cl, R__parent, "refmpv[30]", refmpv);
      R__insp.Inspect(R__cl, R__parent, "refsig[30]", refsig);
      R__insp.Inspect(R__cl, R__parent, "refamp[30]", refamp);
      R__insp.Inspect(R__cl, R__parent, "meanmpv", &meanmpv);
      R__insp.Inspect(R__cl, R__parent, "meanE", &meanE);
      R__insp.Inspect(R__cl, R__parent, "noutmpv", &noutmpv);
      R__insp.Inspect(R__cl, R__parent, "noutsig", &noutsig);
      R__insp.Inspect(R__cl, R__parent, "noutamp", &noutamp);
      R__insp.Inspect(R__cl, R__parent, "maxmpvdev", &maxmpvdev);
      R__insp.Inspect(R__cl, R__parent, "maxsigdev", &maxsigdev);
      R__insp.Inspect(R__cl, R__parent, "maxampdev", &maxampdev);
      R__insp.Inspect(R__cl, R__parent, "refrun", &refrun);
      MCVStdAnalysis::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCVBurstLandauFit(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVBurstLandauFit : new ::MCVBurstLandauFit;
   }
   static void *newArray_MCVBurstLandauFit(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MCVBurstLandauFit[nElements] : new ::MCVBurstLandauFit[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCVBurstLandauFit(void *p) {
      delete ((::MCVBurstLandauFit*)p);
   }
   static void deleteArray_MCVBurstLandauFit(void *p) {
      delete [] ((::MCVBurstLandauFit*)p);
   }
   static void destruct_MCVBurstLandauFit(void *p) {
      typedef ::MCVBurstLandauFit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVBurstLandauFit

//______________________________________________________________________________
void GRB::Streamer(TBuffer &R__b)
{
   // Stream an object of class GRB.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> info;
      R__b >> fi;
      R__b >> hclc;
      R__b >> h2clc;
      R__b >> ghr;
      R__b >> mcalstyle;
      R__b >> epoch;
      R__b >> tzero;
      R__b >> hEbkg;
      R__b >> hEgrb;
      R__b >> hLE;
      R__b >> hHE;
      R__b >> thr;
      R__b >> nevents;
      R__b >> nbins;
      R__b >> barsX;
      R__b >> barsZ;
      R__b >> tstart;
      R__b >> tstop;
      R__b >> t0;
      R__b >> tbin;
      R__b >> emin;
      R__b >> emax;
      R__b >> orbit;
      R__b >> alertcode;
      R__b >> tsearch;
      R__b >> burstid;
      R__b >> nEbins;
      //R__b.ReadArray(mcalEbin);
      //R__b.ReadArray(pha);
      //R__b.ReadArray(bkg);
      //R__b.ReadArray(ebkg);
      //R__b.ReadArray(fpeak);
      //R__b.ReadArray(efpeak);
      //R__b.ReadArray(tpeak);
      //R__b.ReadArray(fluence);
      //R__b.ReadArray(efluence);
      //R__b.ReadArray(binpeak);
      R__b >> bkgLE;
      R__b >> bkgHE;
      R__b >> ebkgLE;
      R__b >> ebkgHE;
      R__b >> cbkg;
      R__b >> ecbkg;
      R__b >> cfpeak;
      R__b >> ecfpeak;
      R__b >> ctpeak;
      R__b >> cfluence;
      R__b >> ecfluence;
      R__b >> cbinpeak;
      R__b >> i90lo;
      R__b >> i90hi;
      R__b >> i0;
      R__b >> hr;
      R__b >> ehr;
      R__b >> t90;
      R__b >> et90;
      R__b >> avgE;
      R__b >> maxE;
      R__b >> tbkgini;
      R__b >> tbkgfin;
      R__b >> tgrbini;
      R__b >> tgrbfin;
      R__b >> year;
      R__b >> month;
      R__b >> day;
      R__b >> hour;
      R__b >> min;
      R__b >> sec;
      R__b.CheckByteCount(R__s, R__c, GRB::IsA());
   } else {
      R__c = R__b.WriteVersion(GRB::IsA(), kTRUE);
      R__b << info;
      R__b << fi;
      R__b << (TObject*)hclc;
      R__b << (TObject*)h2clc;
      R__b << ghr;
      R__b << mcalstyle;
      R__b << epoch;
      R__b << tzero;
      R__b << (TObject*)hEbkg;
      R__b << (TObject*)hEgrb;
      R__b << (TObject*)hLE;
      R__b << (TObject*)hHE;
      R__b << thr;
      R__b << nevents;
      R__b << nbins;
      R__b << barsX;
      R__b << barsZ;
      R__b << tstart;
      R__b << tstop;
      R__b << t0;
      R__b << tbin;
      R__b << emin;
      R__b << emax;
      R__b << orbit;
      R__b << alertcode;
      R__b << tsearch;
      R__b << burstid;
      R__b << nEbins;
      //R__b.WriteArray(mcalEbin, __COUNTER__);
      //R__b.WriteArray(pha, __COUNTER__);
      //R__b.WriteArray(bkg, __COUNTER__);
      //R__b.WriteArray(ebkg, __COUNTER__);
      //R__b.WriteArray(fpeak, __COUNTER__);
      //R__b.WriteArray(efpeak, __COUNTER__);
      //R__b.WriteArray(tpeak, __COUNTER__);
      //R__b.WriteArray(fluence, __COUNTER__);
      //R__b.WriteArray(efluence, __COUNTER__);
      //R__b.WriteArray(binpeak, __COUNTER__);
      R__b << bkgLE;
      R__b << bkgHE;
      R__b << ebkgLE;
      R__b << ebkgHE;
      R__b << cbkg;
      R__b << ecbkg;
      R__b << cfpeak;
      R__b << ecfpeak;
      R__b << ctpeak;
      R__b << cfluence;
      R__b << ecfluence;
      R__b << cbinpeak;
      R__b << i90lo;
      R__b << i90hi;
      R__b << i0;
      R__b << hr;
      R__b << ehr;
      R__b << t90;
      R__b << et90;
      R__b << avgE;
      R__b << maxE;
      R__b << tbkgini;
      R__b << tbkgfin;
      R__b << tgrbini;
      R__b << tgrbfin;
      R__b << year;
      R__b << month;
      R__b << day;
      R__b << hour;
      R__b << min;
      R__b << sec;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void GRB::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class GRB.
      TClass *R__cl = ::GRB::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*info", &info);
      R__insp.Inspect(R__cl, R__parent, "*fi", &fi);
      R__insp.Inspect(R__cl, R__parent, "*hclc", &hclc);
      R__insp.Inspect(R__cl, R__parent, "*h2clc", &h2clc);
      R__insp.Inspect(R__cl, R__parent, "*ghr", &ghr);
      R__insp.Inspect(R__cl, R__parent, "*mcalstyle", &mcalstyle);
      R__insp.Inspect(R__cl, R__parent, "*epoch", &epoch);
      R__insp.Inspect(R__cl, R__parent, "*tzero", &tzero);
      R__insp.Inspect(R__cl, R__parent, "*hEbkg", &hEbkg);
      R__insp.Inspect(R__cl, R__parent, "*hEgrb", &hEgrb);
      R__insp.Inspect(R__cl, R__parent, "*hLE", &hLE);
      R__insp.Inspect(R__cl, R__parent, "*hHE", &hHE);
      R__insp.Inspect(R__cl, R__parent, "thr", &thr);
      R__insp.Inspect(R__cl, R__parent, "nevents", &nevents);
      R__insp.Inspect(R__cl, R__parent, "nbins", &nbins);
      R__insp.Inspect(R__cl, R__parent, "barsX", &barsX);
      R__insp.Inspect(R__cl, R__parent, "barsZ", &barsZ);
      R__insp.Inspect(R__cl, R__parent, "tstart", &tstart);
      R__insp.Inspect(R__cl, R__parent, "tstop", &tstop);
      R__insp.Inspect(R__cl, R__parent, "t0", &t0);
      R__insp.Inspect(R__cl, R__parent, "tbin", &tbin);
      R__insp.Inspect(R__cl, R__parent, "emin", &emin);
      R__insp.Inspect(R__cl, R__parent, "emax", &emax);
      R__insp.Inspect(R__cl, R__parent, "orbit", &orbit);
      R__insp.Inspect(R__cl, R__parent, "alertcode", &alertcode);
      R__insp.Inspect(R__cl, R__parent, "tsearch", &tsearch);
      R__insp.Inspect(R__cl, R__parent, "burstid", &burstid);
      R__insp.Inspect(R__cl, R__parent, "nEbins", &nEbins);
      R__insp.Inspect(R__cl, R__parent, "*mcalEbin", &mcalEbin);
      R__insp.Inspect(R__cl, R__parent, "*pha", &pha);
      R__insp.Inspect(R__cl, R__parent, "*bkg", &bkg);
      R__insp.Inspect(R__cl, R__parent, "*ebkg", &ebkg);
      R__insp.Inspect(R__cl, R__parent, "*fpeak", &fpeak);
      R__insp.Inspect(R__cl, R__parent, "*efpeak", &efpeak);
      R__insp.Inspect(R__cl, R__parent, "*tpeak", &tpeak);
      R__insp.Inspect(R__cl, R__parent, "*fluence", &fluence);
      R__insp.Inspect(R__cl, R__parent, "*efluence", &efluence);
      R__insp.Inspect(R__cl, R__parent, "*binpeak", &binpeak);
      R__insp.Inspect(R__cl, R__parent, "bkgLE", &bkgLE);
      R__insp.Inspect(R__cl, R__parent, "bkgHE", &bkgHE);
      R__insp.Inspect(R__cl, R__parent, "ebkgLE", &ebkgLE);
      R__insp.Inspect(R__cl, R__parent, "ebkgHE", &ebkgHE);
      R__insp.Inspect(R__cl, R__parent, "cbkg", &cbkg);
      R__insp.Inspect(R__cl, R__parent, "ecbkg", &ecbkg);
      R__insp.Inspect(R__cl, R__parent, "cfpeak", &cfpeak);
      R__insp.Inspect(R__cl, R__parent, "ecfpeak", &ecfpeak);
      R__insp.Inspect(R__cl, R__parent, "ctpeak", &ctpeak);
      R__insp.Inspect(R__cl, R__parent, "cfluence", &cfluence);
      R__insp.Inspect(R__cl, R__parent, "ecfluence", &ecfluence);
      R__insp.Inspect(R__cl, R__parent, "cbinpeak", &cbinpeak);
      R__insp.Inspect(R__cl, R__parent, "i90lo", &i90lo);
      R__insp.Inspect(R__cl, R__parent, "i90hi", &i90hi);
      R__insp.Inspect(R__cl, R__parent, "i0", &i0);
      R__insp.Inspect(R__cl, R__parent, "hr", &hr);
      R__insp.Inspect(R__cl, R__parent, "ehr", &ehr);
      R__insp.Inspect(R__cl, R__parent, "t90", &t90);
      R__insp.Inspect(R__cl, R__parent, "et90", &et90);
      R__insp.Inspect(R__cl, R__parent, "avgE", &avgE);
      R__insp.Inspect(R__cl, R__parent, "maxE", &maxE);
      R__insp.Inspect(R__cl, R__parent, "tbkgini", &tbkgini);
      R__insp.Inspect(R__cl, R__parent, "tbkgfin", &tbkgfin);
      R__insp.Inspect(R__cl, R__parent, "tgrbini", &tgrbini);
      R__insp.Inspect(R__cl, R__parent, "tgrbfin", &tgrbfin);
      R__insp.Inspect(R__cl, R__parent, "year", &year);
      R__insp.Inspect(R__cl, R__parent, "month", &month);
      R__insp.Inspect(R__cl, R__parent, "day", &day);
      R__insp.Inspect(R__cl, R__parent, "hour", &hour);
      R__insp.Inspect(R__cl, R__parent, "min", &min);
      R__insp.Inspect(R__cl, R__parent, "sec", &sec);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_GRB(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::GRB : new ::GRB;
   }
   static void *newArray_GRB(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::GRB[nElements] : new ::GRB[nElements];
   }
   // Wrapper around operator delete
   static void delete_GRB(void *p) {
      delete ((::GRB*)p);
   }
   static void deleteArray_GRB(void *p) {
      delete [] ((::GRB*)p);
   }
   static void destruct_GRB(void *p) {
      typedef ::GRB current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::GRB

//______________________________________________________________________________
void GRB3908::Streamer(TBuffer &R__b)
{
   // Stream an object of class GRB3908.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      GRB::Streamer(R__b);
      R__b.StreamObject(&(inevt),typeid(MCALevt));
      R__b >> data;
      int R__i;
      for (R__i = 0; R__i < 84; R__i++)
         R__b >> hlc[0][0][R__i];
      R__b >> hpoisson;
      R__b >> cStdLE;
      R__b >> cStdME;
      R__b >> cStdHE;
      R__b >> cpXZ;
      R__b >> cStdDiag;
      R__b >> cPosDiag;
      R__b >> cVSBDiag;
      R__b >> cTotal;
      R__b >> hDTbkg;
      R__b >> hDTgrb;
      R__b >> hbarcorr;
      R__b >> hMult;
      R__b >> hX;
      R__b >> hZ;
      R__b >> hbarsbkg;
      R__b >> hbarsgrb;
      R__b >> gbart;
      R__b >> gEt;
      R__b.ReadStaticArray((int*)nbars);
      R__b.ReadStaticArray((int*)cuboni);
      R__b >> dt0;
      R__b >> nsubms;
      R__b >> mint;
      R__b.CheckByteCount(R__s, R__c, GRB3908::IsA());
   } else {
      R__c = R__b.WriteVersion(GRB3908::IsA(), kTRUE);
      GRB::Streamer(R__b);
      R__b.StreamObject(&(inevt),typeid(MCALevt));
      R__b << data;
      int R__i;
      for (R__i = 0; R__i < 84; R__i++)
         R__b << (TObject*)hlc[0][0][R__i];
      R__b << (TObject*)hpoisson;
      R__b << cStdLE;
      R__b << cStdME;
      R__b << cStdHE;
      R__b << cpXZ;
      R__b << cStdDiag;
      R__b << cPosDiag;
      R__b << cVSBDiag;
      R__b << cTotal;
      R__b << (TObject*)hDTbkg;
      R__b << (TObject*)hDTgrb;
      R__b << (TObject*)hbarcorr;
      R__b << (TObject*)hMult;
      R__b << (TObject*)hX;
      R__b << (TObject*)hZ;
      R__b << (TObject*)hbarsbkg;
      R__b << (TObject*)hbarsgrb;
      R__b << gbart;
      R__b << gEt;
      R__b.WriteArray(nbars, 30);
      R__b.WriteArray(cuboni, 8);
      R__b << dt0;
      R__b << nsubms;
      R__b << mint;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void GRB3908::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class GRB3908.
      TClass *R__cl = ::GRB3908::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "inevt", (void*)&inevt);
      ::ROOT::GenericShowMembers("MCALevt", (void*)&inevt, R__insp, strcat(R__parent,"inevt."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*data", &data);
      R__insp.Inspect(R__cl, R__parent, "*hlc[3][4][7]", &hlc);
      R__insp.Inspect(R__cl, R__parent, "*hpoisson", &hpoisson);
      R__insp.Inspect(R__cl, R__parent, "*cStdLE", &cStdLE);
      R__insp.Inspect(R__cl, R__parent, "*cStdME", &cStdME);
      R__insp.Inspect(R__cl, R__parent, "*cStdHE", &cStdHE);
      R__insp.Inspect(R__cl, R__parent, "*cpXZ", &cpXZ);
      R__insp.Inspect(R__cl, R__parent, "*cStdDiag", &cStdDiag);
      R__insp.Inspect(R__cl, R__parent, "*cPosDiag", &cPosDiag);
      R__insp.Inspect(R__cl, R__parent, "*cVSBDiag", &cVSBDiag);
      R__insp.Inspect(R__cl, R__parent, "*cTotal", &cTotal);
      R__insp.Inspect(R__cl, R__parent, "*hDTbkg", &hDTbkg);
      R__insp.Inspect(R__cl, R__parent, "*hDTgrb", &hDTgrb);
      R__insp.Inspect(R__cl, R__parent, "*hbarcorr", &hbarcorr);
      R__insp.Inspect(R__cl, R__parent, "*hMult", &hMult);
      R__insp.Inspect(R__cl, R__parent, "*hX", &hX);
      R__insp.Inspect(R__cl, R__parent, "*hZ", &hZ);
      R__insp.Inspect(R__cl, R__parent, "*hbarsbkg", &hbarsbkg);
      R__insp.Inspect(R__cl, R__parent, "*hbarsgrb", &hbarsgrb);
      R__insp.Inspect(R__cl, R__parent, "*gbart", &gbart);
      R__insp.Inspect(R__cl, R__parent, "*gEt", &gEt);
      R__insp.Inspect(R__cl, R__parent, "nbars[30]", nbars);
      R__insp.Inspect(R__cl, R__parent, "cuboni[8]", cuboni);
      R__insp.Inspect(R__cl, R__parent, "dt0", &dt0);
      R__insp.Inspect(R__cl, R__parent, "nsubms", &nsubms);
      R__insp.Inspect(R__cl, R__parent, "mint", &mint);
      GRB::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_GRB3908(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::GRB3908 : new ::GRB3908;
   }
   static void *newArray_GRB3908(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::GRB3908[nElements] : new ::GRB3908[nElements];
   }
   // Wrapper around operator delete
   static void delete_GRB3908(void *p) {
      delete ((::GRB3908*)p);
   }
   static void deleteArray_GRB3908(void *p) {
      delete [] ((::GRB3908*)p);
   }
   static void destruct_GRB3908(void *p) {
      typedef ::GRB3908 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::GRB3908

//______________________________________________________________________________
void GRB3913::Streamer(TBuffer &R__b)
{
   // Stream an object of class GRB3913.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      GRB::Streamer(R__b);
      //R__b.ReadArray(time);
      //R__b.ReadArray(data);
      //R__b.ReadArray(dataAC);
      //R__b.ReadArray(dataEbin);
      R__b >> ns;
      R__b >> plane;
      R__b.CheckByteCount(R__s, R__c, GRB3913::IsA());
   } else {
      R__c = R__b.WriteVersion(GRB3913::IsA(), kTRUE);
      GRB::Streamer(R__b);
      //R__b.WriteArray(time, __COUNTER__);
      //R__b.WriteArray(data, __COUNTER__);
      //R__b.WriteArray(dataAC, __COUNTER__);
      //R__b.WriteArray(dataEbin, __COUNTER__);
      R__b << ns;
      R__b << plane;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void GRB3913::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class GRB3913.
      TClass *R__cl = ::GRB3913::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*time", &time);
      R__insp.Inspect(R__cl, R__parent, "*data", &data);
      R__insp.Inspect(R__cl, R__parent, "*dataAC", &dataAC);
      R__insp.Inspect(R__cl, R__parent, "*dataEbin", &dataEbin);
      R__insp.Inspect(R__cl, R__parent, "ns", &ns);
      R__insp.Inspect(R__cl, R__parent, "plane", &plane);
      GRB::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_GRB3913(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::GRB3913 : new ::GRB3913;
   }
   static void *newArray_GRB3913(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::GRB3913[nElements] : new ::GRB3913[nElements];
   }
   // Wrapper around operator delete
   static void delete_GRB3913(void *p) {
      delete ((::GRB3913*)p);
   }
   static void deleteArray_GRB3913(void *p) {
      delete [] ((::GRB3913*)p);
   }
   static void destruct_GRB3913(void *p) {
      typedef ::GRB3913 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::GRB3913

//______________________________________________________________________________
void GRB3913XZ::Streamer(TBuffer &R__b)
{
   // Stream an object of class GRB3913XZ.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> cpXZ;
      //R__b.ReadArray(time);
      //R__b.ReadArray(data);
      //R__b.ReadArray(dataAC);
      //R__b.ReadArray(dataEbin);
      R__b >> t90X;
      R__b >> t90Z;
      R__b >> ns;
      R__b >> pX;
      R__b >> pZ;
      R__b.CheckByteCount(R__s, R__c, GRB3913XZ::IsA());
   } else {
      R__c = R__b.WriteVersion(GRB3913XZ::IsA(), kTRUE);
      R__b << cpXZ;
      //R__b.WriteArray(time, __COUNTER__);
      //R__b.WriteArray(data, __COUNTER__);
      //R__b.WriteArray(dataAC, __COUNTER__);
      //R__b.WriteArray(dataEbin, __COUNTER__);
      R__b << t90X;
      R__b << t90Z;
      R__b << ns;
      R__b << pX;
      R__b << pZ;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void GRB3913XZ::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class GRB3913XZ.
      TClass *R__cl = ::GRB3913XZ::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*cpXZ", &cpXZ);
      R__insp.Inspect(R__cl, R__parent, "*time", &time);
      R__insp.Inspect(R__cl, R__parent, "*data", &data);
      R__insp.Inspect(R__cl, R__parent, "*dataAC", &dataAC);
      R__insp.Inspect(R__cl, R__parent, "*dataEbin", &dataEbin);
      R__insp.Inspect(R__cl, R__parent, "t90X", &t90X);
      R__insp.Inspect(R__cl, R__parent, "t90Z", &t90Z);
      R__insp.Inspect(R__cl, R__parent, "ns", &ns);
      R__insp.Inspect(R__cl, R__parent, "*pX", &pX);
      R__insp.Inspect(R__cl, R__parent, "*pZ", &pZ);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_GRB3913XZ(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::GRB3913XZ : new ::GRB3913XZ;
   }
   static void *newArray_GRB3913XZ(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::GRB3913XZ[nElements] : new ::GRB3913XZ[nElements];
   }
   // Wrapper around operator delete
   static void delete_GRB3913XZ(void *p) {
      delete ((::GRB3913XZ*)p);
   }
   static void deleteArray_GRB3913XZ(void *p) {
      delete [] ((::GRB3913XZ*)p);
   }
   static void destruct_GRB3913XZ(void *p) {
      typedef ::GRB3913XZ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::GRB3913XZ

//______________________________________________________________________________
void MCVFile3916::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVFile3916.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> status;
      R__b >> nfields;
      R__b.ReadStaticArray((char*)comment);
      R__b >> contact;
      //R__b.ReadArray(iX);
      //R__b.ReadArray(iY);
      //R__b.ReadArray(iZ);
      //R__b.ReadArray(time);
      //R__b.ReadArray(ephi);
      //R__b.ReadArray(etheta);
      //R__b.ReadArray(posvali);
      R__b >> isRoot;
      R__b >> isFits;
      R__b >> fi;
      R__b >> fo;
      R__b >> nevents;
      R__b >> tdata;
      R__b.StreamObject(&(evt),typeid(gpsevt));
      filename.Streamer(R__b);
      outname.Streamer(R__b);
      R__b >> a;
      R__b >> b;
      R__b >> f;
      R__b >> e;
      R__b >> e1;
      R__b >> rad2deg;
      R__b >> p;
      R__b >> theta;
      R__b >> N;
      R__b >> mintime;
      R__b >> maxtime;
      R__b >> nentries;
      R__b >> verbose;
      R__b >> eci;
      R__b >> o1;
      R__b >> o2;
      R__b >> m;
      R__b.CheckByteCount(R__s, R__c, MCVFile3916::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVFile3916::IsA(), kTRUE);
      R__b << status;
      R__b << nfields;
      R__b.WriteArray(comment, 100);
      R__b << contact;
      //R__b.WriteArray(iX, __COUNTER__);
      //R__b.WriteArray(iY, __COUNTER__);
      //R__b.WriteArray(iZ, __COUNTER__);
      //R__b.WriteArray(time, __COUNTER__);
      //R__b.WriteArray(ephi, __COUNTER__);
      //R__b.WriteArray(etheta, __COUNTER__);
      //R__b.WriteArray(posvali, __COUNTER__);
      R__b << isRoot;
      R__b << isFits;
      R__b << fi;
      R__b << fo;
      R__b << nevents;
      R__b << tdata;
      R__b.StreamObject(&(evt),typeid(gpsevt));
      filename.Streamer(R__b);
      outname.Streamer(R__b);
      R__b << a;
      R__b << b;
      R__b << f;
      R__b << e;
      R__b << e1;
      R__b << rad2deg;
      R__b << p;
      R__b << theta;
      R__b << N;
      R__b << mintime;
      R__b << maxtime;
      R__b << nentries;
      R__b << verbose;
      R__b << eci;
      R__b << o1;
      R__b << o2;
      R__b << m;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVFile3916::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVFile3916.
      TClass *R__cl = ::MCVFile3916::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "status", &status);
      R__insp.Inspect(R__cl, R__parent, "nfields", &nfields);
      R__insp.Inspect(R__cl, R__parent, "comment[100]", comment);
      R__insp.Inspect(R__cl, R__parent, "contact", &contact);
      R__insp.Inspect(R__cl, R__parent, "*iX", &iX);
      R__insp.Inspect(R__cl, R__parent, "*iY", &iY);
      R__insp.Inspect(R__cl, R__parent, "*iZ", &iZ);
      R__insp.Inspect(R__cl, R__parent, "*time", &time);
      R__insp.Inspect(R__cl, R__parent, "*ephi", &ephi);
      R__insp.Inspect(R__cl, R__parent, "*etheta", &etheta);
      R__insp.Inspect(R__cl, R__parent, "*posvali", &posvali);
      R__insp.Inspect(R__cl, R__parent, "isRoot", &isRoot);
      R__insp.Inspect(R__cl, R__parent, "isFits", &isFits);
      R__insp.Inspect(R__cl, R__parent, "*fi", &fi);
      R__insp.Inspect(R__cl, R__parent, "*fo", &fo);
      R__insp.Inspect(R__cl, R__parent, "nevents", &nevents);
      R__insp.Inspect(R__cl, R__parent, "*tdata", &tdata);
      R__insp.Inspect(R__cl, R__parent, "evt", (void*)&evt);
      ::ROOT::GenericShowMembers("gpsevt", (void*)&evt, R__insp, strcat(R__parent,"evt."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "filename", &filename);
      filename.ShowMembers(R__insp, strcat(R__parent,"filename.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "outname", &outname);
      outname.ShowMembers(R__insp, strcat(R__parent,"outname.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "a", &a);
      R__insp.Inspect(R__cl, R__parent, "b", &b);
      R__insp.Inspect(R__cl, R__parent, "f", &f);
      R__insp.Inspect(R__cl, R__parent, "e", &e);
      R__insp.Inspect(R__cl, R__parent, "e1", &e1);
      R__insp.Inspect(R__cl, R__parent, "rad2deg", &rad2deg);
      R__insp.Inspect(R__cl, R__parent, "p", &p);
      R__insp.Inspect(R__cl, R__parent, "theta", &theta);
      R__insp.Inspect(R__cl, R__parent, "N", &N);
      R__insp.Inspect(R__cl, R__parent, "mintime", &mintime);
      R__insp.Inspect(R__cl, R__parent, "maxtime", &maxtime);
      R__insp.Inspect(R__cl, R__parent, "nentries", &nentries);
      R__insp.Inspect(R__cl, R__parent, "verbose", &verbose);
      R__insp.Inspect(R__cl, R__parent, "eci", &eci);
      R__insp.Inspect(R__cl, R__parent, "o1", &o1);
      R__insp.Inspect(R__cl, R__parent, "o2", &o2);
      R__insp.Inspect(R__cl, R__parent, "m", &m);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_MCVFile3916(void *p) {
      delete ((::MCVFile3916*)p);
   }
   static void deleteArray_MCVFile3916(void *p) {
      delete [] ((::MCVFile3916*)p);
   }
   static void destruct_MCVFile3916(void *p) {
      typedef ::MCVFile3916 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVFile3916

//______________________________________________________________________________
void MCVFile3201::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCVFile3201.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> status;
      R__b >> nfields;
      R__b.ReadStaticArray((char*)comment);
      R__b >> contact;
      //R__b.ReadArray(posvali);
      R__b >> isRoot;
      R__b >> isFits;
      R__b >> fi;
      R__b >> fo;
      R__b >> nevents;
      R__b >> verbose;
      R__b >> mintime;
      R__b >> maxtime;
      R__b >> nentries;
      R__b >> tdata;
      R__b.StreamObject(&(evt),typeid(hkevt));
      //R__b.ReadArray(time);
      //R__b.ReadArray(orphase);
      //R__b.ReadArray(plopmode);
      //R__b.ReadArray(digitbit);
      //R__b.ReadArray(rtmbit);
      //R__b.ReadArray(zstatus);
      //R__b.ReadArray(zvalue);
      //R__b.ReadArray(sentgnd);
      filename.Streamer(R__b);
      outname.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, MCVFile3201::IsA());
   } else {
      R__c = R__b.WriteVersion(MCVFile3201::IsA(), kTRUE);
      R__b << status;
      R__b << nfields;
      R__b.WriteArray(comment, 100);
      R__b << contact;
      //R__b.WriteArray(posvali, __COUNTER__);
      R__b << isRoot;
      R__b << isFits;
      R__b << fi;
      R__b << fo;
      R__b << nevents;
      R__b << verbose;
      R__b << mintime;
      R__b << maxtime;
      R__b << nentries;
      R__b << tdata;
      R__b.StreamObject(&(evt),typeid(hkevt));
      //R__b.WriteArray(time, __COUNTER__);
      //R__b.WriteArray(orphase, __COUNTER__);
      //R__b.WriteArray(plopmode, __COUNTER__);
      //R__b.WriteArray(digitbit, __COUNTER__);
      //R__b.WriteArray(rtmbit, __COUNTER__);
      //R__b.WriteArray(zstatus, __COUNTER__);
      //R__b.WriteArray(zvalue, __COUNTER__);
      //R__b.WriteArray(sentgnd, __COUNTER__);
      filename.Streamer(R__b);
      outname.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MCVFile3201::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MCVFile3201.
      TClass *R__cl = ::MCVFile3201::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "status", &status);
      R__insp.Inspect(R__cl, R__parent, "nfields", &nfields);
      R__insp.Inspect(R__cl, R__parent, "comment[100]", comment);
      R__insp.Inspect(R__cl, R__parent, "contact", &contact);
      R__insp.Inspect(R__cl, R__parent, "*posvali", &posvali);
      R__insp.Inspect(R__cl, R__parent, "isRoot", &isRoot);
      R__insp.Inspect(R__cl, R__parent, "isFits", &isFits);
      R__insp.Inspect(R__cl, R__parent, "*fi", &fi);
      R__insp.Inspect(R__cl, R__parent, "*fo", &fo);
      R__insp.Inspect(R__cl, R__parent, "nevents", &nevents);
      R__insp.Inspect(R__cl, R__parent, "verbose", &verbose);
      R__insp.Inspect(R__cl, R__parent, "mintime", &mintime);
      R__insp.Inspect(R__cl, R__parent, "maxtime", &maxtime);
      R__insp.Inspect(R__cl, R__parent, "nentries", &nentries);
      R__insp.Inspect(R__cl, R__parent, "*tdata", &tdata);
      R__insp.Inspect(R__cl, R__parent, "evt", (void*)&evt);
      ::ROOT::GenericShowMembers("hkevt", (void*)&evt, R__insp, strcat(R__parent,"evt."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*time", &time);
      R__insp.Inspect(R__cl, R__parent, "*orphase", &orphase);
      R__insp.Inspect(R__cl, R__parent, "*plopmode", &plopmode);
      R__insp.Inspect(R__cl, R__parent, "*digitbit", &digitbit);
      R__insp.Inspect(R__cl, R__parent, "*rtmbit", &rtmbit);
      R__insp.Inspect(R__cl, R__parent, "*zstatus", &zstatus);
      R__insp.Inspect(R__cl, R__parent, "*zvalue", &zvalue);
      R__insp.Inspect(R__cl, R__parent, "*sentgnd", &sentgnd);
      R__insp.Inspect(R__cl, R__parent, "filename", &filename);
      filename.ShowMembers(R__insp, strcat(R__parent,"filename.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "outname", &outname);
      outname.ShowMembers(R__insp, strcat(R__parent,"outname.")); R__parent[R__ncp] = 0;
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_MCVFile3201(void *p) {
      delete ((::MCVFile3201*)p);
   }
   static void deleteArray_MCVFile3201(void *p) {
      delete [] ((::MCVFile3201*)p);
   }
   static void destruct_MCVFile3201(void *p) {
      typedef ::MCVFile3201 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCVFile3201

/********************************************************
* code/MCVDict.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableMCVDict();

extern "C" void G__set_cpp_environmentMCVDict() {
  G__add_compiledheader("TROOT.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("MCVFile.h");
  G__add_compiledheader("MCVFileTE.h");
  G__add_compiledheader("MCVFilePKP.h");
  G__add_compiledheader("MCVHisto.h");
  G__add_compiledheader("MCVRawMonitor.h");
  G__add_compiledheader("MCVFileInfo.h");
  G__add_compiledheader("MCVAnalysis.h");
  G__add_compiledheader("MCVStdAnalysis.h");
  G__add_compiledheader("MCVGridOffset.h");
  G__add_compiledheader("MCVCountRate.h");
  G__add_compiledheader("MCVRetriggering.h");
  G__add_compiledheader("MCVGridEnergyCal.h");
  G__add_compiledheader("MCVSciRM.h");
  G__add_compiledheader("MCVEnergyThreshold.h");
  G__add_compiledheader("MCVBarMonitor.h");
  G__add_compiledheader("MCVTree.h");
  G__add_compiledheader("MCVSelection.h");
  G__add_compiledheader("MCVSelectionGUI.h");
  G__add_compiledheader("MCVFitPeak.h");
  G__add_compiledheader("MCVBurstOffset.h");
  G__add_compiledheader("MCVElectricalCalib.h");
  G__add_compiledheader("MCVHisto3908.h");
  G__add_compiledheader("MCVFilePKP3908.h");
  G__add_compiledheader("MCVbsrMonitor.h");
  G__add_compiledheader("MCVbsrMonitor_ric.h");
  G__add_compiledheader("MCVBurst.h");
  G__add_compiledheader("MCVAntiCoincidence.h");
  G__add_compiledheader("MCVCalibration.h");
  G__add_compiledheader("MCVSubMS.h");
  G__add_compiledheader("MCVGlobalRetriggering.h");
  G__add_compiledheader("MCVBarCorrelation.h");
  G__add_compiledheader("MCVBkgSubtraction.h");
  G__add_compiledheader("MCVBurstLandauFit.h");
  G__add_compiledheader("GRB.h");
  G__add_compiledheader("GRB3908.h");
  G__add_compiledheader("GRB3913.h");
  G__add_compiledheader("GRB3913XZ.h");
  G__add_compiledheader("MCVFile3916.h");
  G__add_compiledheader("MCVFile3201.h");
  G__cpp_reset_tagtableMCVDict();
}
#include <new>
extern "C" int G__cpp_dllrevMCVDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MCVFileInfo */
static int G__MCVDict_512_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFileInfo* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVFileInfo[n];
     } else {
       p = new((void*) gvp) MCVFileInfo[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVFileInfo;
     } else {
       p = new((void*) gvp) MCVFileInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_512_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFileInfo*) G__getstructoffset())->PrintCalibrationParameters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_512_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFileInfo*) G__getstructoffset())->PrintFileInfo();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_512_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVFileInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_512_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFileInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_512_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVFileInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_512_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVFileInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_512_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVFileInfo*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_512_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFileInfo*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_512_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFileInfo*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_512_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFileInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_512_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFileInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_512_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVFileInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_512_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFileInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_512_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVFileInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_512_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVFileInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVFileInfo(*(MCVFileInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVFileInfo G__TMCVFileInfo;
static int G__MCVDict_512_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVFileInfo*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVFileInfo*) (soff+(sizeof(MCVFileInfo)*i)))->~G__TMCVFileInfo();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVFileInfo*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVFileInfo*) (soff))->~G__TMCVFileInfo();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_512_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFileInfo* dest = (MCVFileInfo*) G__getstructoffset();
   *dest = *(MCVFileInfo*) libp->para[0].ref;
   const MCVFileInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVFile */
static int G__MCVDict_517_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFile* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVFile[n];
     } else {
       p = new((void*) gvp) MCVFile[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVFile;
     } else {
       p = new((void*) gvp) MCVFile;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFile);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFile* p = NULL;
   long gvp = G__getgvp();
   //m: 1
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new MCVFile((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MCVFile((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFile);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFile*) G__getstructoffset())->CreateRootFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((MCVFile*) G__getstructoffset())->GetDataPath());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCVFile*) G__getstructoffset())->GetFileInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MCVFile*) G__getstructoffset())->IsGrid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MCVFile*) G__getstructoffset())->IsPDHUData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MCVFile*) G__getstructoffset())->IsPDHUFormat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFile*) G__getstructoffset())->PrintCalibrationParameters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFile*) G__getstructoffset())->PrintFileInfo();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFile*) G__getstructoffset())->SetCalibrationFile((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFile*) G__getstructoffset())->SetSeed((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFile*) G__getstructoffset())->SetRootFileName((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVFile::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFile::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVFile::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVFile::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVFile*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFile*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFile*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFile*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFile::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVFile::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFile::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_517_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVFile::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_517_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVFile* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVFile(*(MCVFile*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFile);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVFile G__TMCVFile;
static int G__MCVDict_517_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVFile*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVFile*) (soff+(sizeof(MCVFile)*i)))->~G__TMCVFile();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVFile*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVFile*) (soff))->~G__TMCVFile();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_517_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFile* dest = (MCVFile*) G__getstructoffset();
   *dest = *(MCVFile*) libp->para[0].ref;
   const MCVFile& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVHisto */
static int G__MCVDict_549_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVHisto* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVHisto[n];
     } else {
       p = new((void*) gvp) MCVHisto[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVHisto;
     } else {
       p = new((void*) gvp) MCVHisto;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVHisto);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_549_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVHisto* p = NULL;
   long gvp = G__getgvp();
   //m: 1
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new MCVHisto((TObjArray*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MCVHisto((TObjArray*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVHisto);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_549_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCVHisto*) G__getstructoffset())->GetEffectiveTime((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_549_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCVHisto*) G__getstructoffset())->GetEffectiveTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_549_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((MCVHisto*) G__getstructoffset())->GetHistoPath());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_549_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVHisto*) G__getstructoffset())->FillHisto((MCALevt*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_549_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCVHisto*) G__getstructoffset())->GetRawHisto());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_549_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVHisto::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_549_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVHisto::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_549_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVHisto::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_549_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVHisto::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_549_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVHisto*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_549_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVHisto*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_549_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVHisto*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_549_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVHisto*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_549_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVHisto::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_549_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVHisto::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_549_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVHisto::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_549_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVHisto::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_549_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVHisto* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVHisto(*(MCVHisto*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVHisto);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVHisto G__TMCVHisto;
static int G__MCVDict_549_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVHisto*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVHisto*) (soff+(sizeof(MCVHisto)*i)))->~G__TMCVHisto();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVHisto*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVHisto*) (soff))->~G__TMCVHisto();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_549_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVHisto* dest = (MCVHisto*) G__getstructoffset();
   *dest = *(MCVHisto*) libp->para[0].ref;
   const MCVHisto& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVFileTE */
static int G__MCVDict_550_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFileTE* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVFileTE[n];
     } else {
       p = new((void*) gvp) MCVFileTE[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVFileTE;
     } else {
       p = new((void*) gvp) MCVFileTE;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFileTE);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_550_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFileTE* p = NULL;
   long gvp = G__getgvp();
   //m: 1
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new MCVFileTE((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MCVFileTE((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFileTE);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_550_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFileTE*) G__getstructoffset())->BuildTimeArray();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_550_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFileTE*) G__getstructoffset())->CreateRootFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_550_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((MCVFileTE*) G__getstructoffset())->GetCountRate((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_550_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((MCVFileTE*) G__getstructoffset())->GetCountRate((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_550_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFileTE*) G__getstructoffset())->ProcessData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_550_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVFileTE::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_550_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFileTE::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_550_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVFileTE::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_550_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVFileTE::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_550_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVFileTE*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_550_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFileTE*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_550_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFileTE*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_550_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFileTE*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_550_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFileTE::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_550_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVFileTE::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_550_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFileTE::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_550_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVFileTE::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_550_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVFileTE* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVFileTE(*(MCVFileTE*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFileTE);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVFileTE G__TMCVFileTE;
static int G__MCVDict_550_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVFileTE*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVFileTE*) (soff+(sizeof(MCVFileTE)*i)))->~G__TMCVFileTE();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVFileTE*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVFileTE*) (soff))->~G__TMCVFileTE();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_550_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFileTE* dest = (MCVFileTE*) G__getstructoffset();
   *dest = *(MCVFileTE*) libp->para[0].ref;
   const MCVFileTE& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVFilePKP */
static int G__MCVDict_551_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFilePKP* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVFilePKP[n];
     } else {
       p = new((void*) gvp) MCVFilePKP[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVFilePKP;
     } else {
       p = new((void*) gvp) MCVFilePKP;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_551_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFilePKP* p = NULL;
   long gvp = G__getgvp();
   //m: 1
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new MCVFilePKP((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MCVFilePKP((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_551_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP*) G__getstructoffset())->CreateRootFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_551_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MCVFilePKP*) G__getstructoffset())->Add3913SciRatemeters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_551_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP*) G__getstructoffset())->Process3902Data();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_551_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP*) G__getstructoffset())->Process3909Data();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_551_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP*) G__getstructoffset())->ProcessTrigTrackData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_551_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP*) G__getstructoffset())->PrintEvent((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_551_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVFilePKP::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_551_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFilePKP::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_551_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVFilePKP::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_551_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVFilePKP::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_551_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVFilePKP*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_551_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_551_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_551_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_551_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFilePKP::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_551_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVFilePKP::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_551_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFilePKP::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_551_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVFilePKP::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_551_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVFilePKP* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVFilePKP(*(MCVFilePKP*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVFilePKP G__TMCVFilePKP;
static int G__MCVDict_551_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVFilePKP*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVFilePKP*) (soff+(sizeof(MCVFilePKP)*i)))->~G__TMCVFilePKP();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVFilePKP*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVFilePKP*) (soff))->~G__TMCVFilePKP();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_551_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFilePKP* dest = (MCVFilePKP*) G__getstructoffset();
   *dest = *(MCVFilePKP*) libp->para[0].ref;
   const MCVFilePKP& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVStdAnalysis */
static int G__MCVDict_821_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVStdAnalysis* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVStdAnalysis[n];
     } else {
       p = new((void*) gvp) MCVStdAnalysis[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVStdAnalysis;
     } else {
       p = new((void*) gvp) MCVStdAnalysis;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVStdAnalysis* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVStdAnalysis((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCVStdAnalysis((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVStdAnalysis((TObjArray*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCVStdAnalysis((TObjArray*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCVStdAnalysis*) G__getstructoffset())->Calculate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCVStdAnalysis*) G__getstructoffset())->CreateGraphErrors((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCVStdAnalysis*) G__getstructoffset())->CreateGraph((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MCVStdAnalysis*) G__getstructoffset())->IsOK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVStdAnalysis*) G__getstructoffset())->PrintComment();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVStdAnalysis*) G__getstructoffset())->PrintResults();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVStdAnalysis*) G__getstructoffset())->SaveToFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVStdAnalysis*) G__getstructoffset())->SetBarMask((unsigned long) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MCVStdAnalysis*) G__getstructoffset())->SetCanvases((TCanvas*) G__int(libp->para[0]), (TCanvas*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MCVStdAnalysis*) G__getstructoffset())->SetCanvases((TCanvas*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVStdAnalysis*) G__getstructoffset())->SetFileInfo((MCVFileInfo*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVStdAnalysis*) G__getstructoffset())->SetHistoCollection((TObjArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVStdAnalysis*) G__getstructoffset())->UpdateGlobalFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVStdAnalysis::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVStdAnalysis::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVStdAnalysis::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVStdAnalysis::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVStdAnalysis*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVStdAnalysis*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVStdAnalysis*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVStdAnalysis*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVStdAnalysis::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVStdAnalysis::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVStdAnalysis::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_821_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVStdAnalysis::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_821_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVStdAnalysis* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVStdAnalysis(*(MCVStdAnalysis*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVStdAnalysis G__TMCVStdAnalysis;
static int G__MCVDict_821_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVStdAnalysis*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVStdAnalysis*) (soff+(sizeof(MCVStdAnalysis)*i)))->~G__TMCVStdAnalysis();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVStdAnalysis*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVStdAnalysis*) (soff))->~G__TMCVStdAnalysis();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_821_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVStdAnalysis* dest = (MCVStdAnalysis*) G__getstructoffset();
   *dest = *(MCVStdAnalysis*) libp->para[0].ref;
   const MCVStdAnalysis& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVGridOffset */
static int G__MCVDict_822_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVGridOffset* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVGridOffset[n];
     } else {
       p = new((void*) gvp) MCVGridOffset[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVGridOffset;
     } else {
       p = new((void*) gvp) MCVGridOffset;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVGridOffset);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVGridOffset* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVGridOffset((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCVGridOffset((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVGridOffset((TObjArray*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCVGridOffset((TObjArray*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVGridOffset);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCVGridOffset*) G__getstructoffset())->Calculate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((MCVGridOffset*) G__getstructoffset())->GetGroff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((MCVGridOffset*) G__getstructoffset())->GetGrsig());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((MCVGridOffset*) G__getstructoffset())->GetGramp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVGridOffset*) G__getstructoffset())->PrintResults();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVGridOffset*) G__getstructoffset())->SaveToFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVGridOffset*) G__getstructoffset())->UpdateGlobalFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVGridOffset*) G__getstructoffset())->UpdateCalibrationFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVGridOffset::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVGridOffset::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVGridOffset::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVGridOffset::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVGridOffset*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVGridOffset*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVGridOffset*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVGridOffset*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVGridOffset::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVGridOffset::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVGridOffset::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_822_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVGridOffset::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_822_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVGridOffset* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVGridOffset(*(MCVGridOffset*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVGridOffset);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVGridOffset G__TMCVGridOffset;
static int G__MCVDict_822_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVGridOffset*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVGridOffset*) (soff+(sizeof(MCVGridOffset)*i)))->~G__TMCVGridOffset();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVGridOffset*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVGridOffset*) (soff))->~G__TMCVGridOffset();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_822_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVGridOffset* dest = (MCVGridOffset*) G__getstructoffset();
   *dest = *(MCVGridOffset*) libp->para[0].ref;
   const MCVGridOffset& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVCountRate */
static int G__MCVDict_823_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVCountRate* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVCountRate[n];
     } else {
       p = new((void*) gvp) MCVCountRate[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVCountRate;
     } else {
       p = new((void*) gvp) MCVCountRate;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVCountRate);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_823_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVCountRate* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVCountRate((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCVCountRate((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVCountRate((TObjArray*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCVCountRate((TObjArray*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVCountRate);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_823_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCVCountRate*) G__getstructoffset())->Calculate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_823_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVCountRate*) G__getstructoffset())->PrintResults();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_823_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVCountRate*) G__getstructoffset())->SaveToFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_823_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVCountRate::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_823_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVCountRate::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_823_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVCountRate::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_823_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVCountRate::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_823_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVCountRate*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_823_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVCountRate*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_823_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVCountRate*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_823_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVCountRate*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_823_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVCountRate::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_823_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVCountRate::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_823_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVCountRate::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_823_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVCountRate::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_823_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVCountRate* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVCountRate(*(MCVCountRate*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVCountRate);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVCountRate G__TMCVCountRate;
static int G__MCVDict_823_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVCountRate*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVCountRate*) (soff+(sizeof(MCVCountRate)*i)))->~G__TMCVCountRate();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVCountRate*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVCountRate*) (soff))->~G__TMCVCountRate();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_823_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVCountRate* dest = (MCVCountRate*) G__getstructoffset();
   *dest = *(MCVCountRate*) libp->para[0].ref;
   const MCVCountRate& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVRetriggering */
static int G__MCVDict_824_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVRetriggering* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVRetriggering[n];
     } else {
       p = new((void*) gvp) MCVRetriggering[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVRetriggering;
     } else {
       p = new((void*) gvp) MCVRetriggering;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVRetriggering);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_824_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVRetriggering* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVRetriggering((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCVRetriggering((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVRetriggering((TObjArray*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCVRetriggering((TObjArray*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVRetriggering);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_824_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCVRetriggering*) G__getstructoffset())->Calculate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_824_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVRetriggering*) G__getstructoffset())->PrintResults();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_824_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVRetriggering::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_824_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVRetriggering::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_824_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVRetriggering::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_824_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVRetriggering::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_824_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVRetriggering*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_824_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVRetriggering*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_824_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVRetriggering*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_824_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVRetriggering*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_824_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVRetriggering::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_824_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVRetriggering::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_824_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVRetriggering::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_824_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVRetriggering::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_824_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVRetriggering* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVRetriggering(*(MCVRetriggering*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVRetriggering);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVRetriggering G__TMCVRetriggering;
static int G__MCVDict_824_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVRetriggering*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVRetriggering*) (soff+(sizeof(MCVRetriggering)*i)))->~G__TMCVRetriggering();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVRetriggering*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVRetriggering*) (soff))->~G__TMCVRetriggering();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_824_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVRetriggering* dest = (MCVRetriggering*) G__getstructoffset();
   *dest = *(MCVRetriggering*) libp->para[0].ref;
   const MCVRetriggering& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVGlobalRetriggering */
static int G__MCVDict_825_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVGlobalRetriggering* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVGlobalRetriggering[n];
     } else {
       p = new((void*) gvp) MCVGlobalRetriggering[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVGlobalRetriggering;
     } else {
       p = new((void*) gvp) MCVGlobalRetriggering;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVGlobalRetriggering);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_825_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVGlobalRetriggering* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVGlobalRetriggering((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCVGlobalRetriggering((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVGlobalRetriggering((TObjArray*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCVGlobalRetriggering((TObjArray*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVGlobalRetriggering);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_825_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCVGlobalRetriggering*) G__getstructoffset())->Calculate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_825_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVGlobalRetriggering*) G__getstructoffset())->PrintResults();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_825_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVGlobalRetriggering::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_825_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVGlobalRetriggering::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_825_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVGlobalRetriggering::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_825_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVGlobalRetriggering::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_825_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVGlobalRetriggering*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_825_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVGlobalRetriggering*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_825_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVGlobalRetriggering*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_825_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVGlobalRetriggering*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_825_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVGlobalRetriggering::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_825_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVGlobalRetriggering::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_825_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVGlobalRetriggering::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_825_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVGlobalRetriggering::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_825_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVGlobalRetriggering* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVGlobalRetriggering(*(MCVGlobalRetriggering*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVGlobalRetriggering);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVGlobalRetriggering G__TMCVGlobalRetriggering;
static int G__MCVDict_825_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVGlobalRetriggering*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVGlobalRetriggering*) (soff+(sizeof(MCVGlobalRetriggering)*i)))->~G__TMCVGlobalRetriggering();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVGlobalRetriggering*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVGlobalRetriggering*) (soff))->~G__TMCVGlobalRetriggering();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_825_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVGlobalRetriggering* dest = (MCVGlobalRetriggering*) G__getstructoffset();
   *dest = *(MCVGlobalRetriggering*) libp->para[0].ref;
   const MCVGlobalRetriggering& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVSciRM */
static int G__MCVDict_826_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVSciRM* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVSciRM[n];
     } else {
       p = new((void*) gvp) MCVSciRM[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVSciRM;
     } else {
       p = new((void*) gvp) MCVSciRM;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVSciRM);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_826_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVSciRM* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVSciRM((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCVSciRM((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVSciRM((TObjArray*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCVSciRM((TObjArray*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVSciRM);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_826_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCVSciRM*) G__getstructoffset())->Calculate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_826_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSciRM*) G__getstructoffset())->PrintResults();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_826_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSciRM*) G__getstructoffset())->SaveToFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_826_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSciRM*) G__getstructoffset())->UpdateGlobalFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_826_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVSciRM::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_826_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVSciRM::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_826_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVSciRM::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_826_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVSciRM::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_826_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVSciRM*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_826_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSciRM*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_826_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSciRM*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_826_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSciRM*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_826_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVSciRM::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_826_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVSciRM::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_826_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVSciRM::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_826_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVSciRM::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_826_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVSciRM* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVSciRM(*(MCVSciRM*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVSciRM);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVSciRM G__TMCVSciRM;
static int G__MCVDict_826_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVSciRM*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVSciRM*) (soff+(sizeof(MCVSciRM)*i)))->~G__TMCVSciRM();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVSciRM*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVSciRM*) (soff))->~G__TMCVSciRM();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_826_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVSciRM* dest = (MCVSciRM*) G__getstructoffset();
   *dest = *(MCVSciRM*) libp->para[0].ref;
   const MCVSciRM& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVFitPeak */
static int G__MCVDict_827_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFitPeak* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVFitPeak[n];
     } else {
       p = new((void*) gvp) MCVFitPeak[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVFitPeak;
     } else {
       p = new((void*) gvp) MCVFitPeak;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFitPeak);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFitPeak* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVFitPeak(
(double) G__double(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (MCVFileInfo*) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MCVFitPeak(
(double) G__double(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (MCVFileInfo*) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVFitPeak(
(double) G__double(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (MCVFileInfo*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MCVFitPeak(
(double) G__double(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (MCVFileInfo*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVFitPeak((double) G__double(libp->para[0]), (TObjArray*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCVFitPeak((double) G__double(libp->para[0]), (TObjArray*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFitPeak);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCVFitPeak*) G__getstructoffset())->Calculate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFitPeak*) G__getstructoffset())->PrintResults();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFitPeak*) G__getstructoffset())->SaveToFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((MCVFitPeak*) G__getstructoffset())->GetCenter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((MCVFitPeak*) G__getstructoffset())->GetSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((MCVFitPeak*) G__getstructoffset())->GetAmplitude());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((MCVFitPeak*) G__getstructoffset())->GetCounts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFitPeak*) G__getstructoffset())->SetUpperDE((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFitPeak*) G__getstructoffset())->SetLowerDE((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFitPeak*) G__getstructoffset())->UpdateFit((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVFitPeak::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFitPeak::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVFitPeak::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVFitPeak::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVFitPeak*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFitPeak*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFitPeak*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFitPeak*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFitPeak::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVFitPeak::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFitPeak::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_827_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVFitPeak::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_827_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVFitPeak* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVFitPeak(*(MCVFitPeak*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFitPeak);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVFitPeak G__TMCVFitPeak;
static int G__MCVDict_827_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVFitPeak*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVFitPeak*) (soff+(sizeof(MCVFitPeak)*i)))->~G__TMCVFitPeak();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVFitPeak*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVFitPeak*) (soff))->~G__TMCVFitPeak();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_827_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFitPeak* dest = (MCVFitPeak*) G__getstructoffset();
   *dest = *(MCVFitPeak*) libp->para[0].ref;
   const MCVFitPeak& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVBurstOffset */
static int G__MCVDict_828_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVBurstOffset* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBurstOffset[n];
     } else {
       p = new((void*) gvp) MCVBurstOffset[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBurstOffset;
     } else {
       p = new((void*) gvp) MCVBurstOffset;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVBurstOffset);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_828_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVBurstOffset* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBurstOffset(
(bool) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (MCVFileInfo*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MCVBurstOffset(
(bool) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (MCVFileInfo*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBurstOffset((bool) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCVBurstOffset((bool) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVBurstOffset);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_828_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCVBurstOffset*) G__getstructoffset())->Calculate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_828_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBurstOffset*) G__getstructoffset())->PrintResults();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_828_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBurstOffset*) G__getstructoffset())->SaveToFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_828_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBurstOffset*) G__getstructoffset())->UpdateCalibrationFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_828_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((MCVBurstOffset*) G__getstructoffset())->GetPeakCenter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_828_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVBurstOffset::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_828_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVBurstOffset::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_828_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVBurstOffset::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_828_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVBurstOffset::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_828_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVBurstOffset*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_828_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBurstOffset*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_828_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBurstOffset*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_828_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBurstOffset*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_828_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVBurstOffset::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_828_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVBurstOffset::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_828_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVBurstOffset::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_828_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVBurstOffset::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_828_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVBurstOffset* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVBurstOffset(*(MCVBurstOffset*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVBurstOffset);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVBurstOffset G__TMCVBurstOffset;
static int G__MCVDict_828_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVBurstOffset*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVBurstOffset*) (soff+(sizeof(MCVBurstOffset)*i)))->~G__TMCVBurstOffset();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVBurstOffset*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVBurstOffset*) (soff))->~G__TMCVBurstOffset();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_828_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVBurstOffset* dest = (MCVBurstOffset*) G__getstructoffset();
   *dest = *(MCVBurstOffset*) libp->para[0].ref;
   const MCVBurstOffset& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVElectricalCalib */
static int G__MCVDict_829_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVElectricalCalib* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVElectricalCalib[n];
     } else {
       p = new((void*) gvp) MCVElectricalCalib[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVElectricalCalib;
     } else {
       p = new((void*) gvp) MCVElectricalCalib;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVElectricalCalib);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_829_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVElectricalCalib* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVElectricalCalib((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCVElectricalCalib((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVElectricalCalib((TObjArray*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCVElectricalCalib((TObjArray*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVElectricalCalib);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_829_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCVElectricalCalib*) G__getstructoffset())->Calculate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_829_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVElectricalCalib*) G__getstructoffset())->PrintResults();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_829_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVElectricalCalib*) G__getstructoffset())->SaveToFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_829_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVElectricalCalib*) G__getstructoffset())->SetNPeaks((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_829_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVElectricalCalib*) G__getstructoffset())->SetThreshold((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_829_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVElectricalCalib::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_829_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVElectricalCalib::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_829_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVElectricalCalib::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_829_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVElectricalCalib::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_829_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVElectricalCalib*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_829_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVElectricalCalib*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_829_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVElectricalCalib*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_829_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVElectricalCalib*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_829_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVElectricalCalib::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_829_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVElectricalCalib::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_829_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVElectricalCalib::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_829_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVElectricalCalib::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_829_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVElectricalCalib* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVElectricalCalib(*(MCVElectricalCalib*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVElectricalCalib);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVElectricalCalib G__TMCVElectricalCalib;
static int G__MCVDict_829_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVElectricalCalib*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVElectricalCalib*) (soff+(sizeof(MCVElectricalCalib)*i)))->~G__TMCVElectricalCalib();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVElectricalCalib*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVElectricalCalib*) (soff))->~G__TMCVElectricalCalib();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_829_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVElectricalCalib* dest = (MCVElectricalCalib*) G__getstructoffset();
   *dest = *(MCVElectricalCalib*) libp->para[0].ref;
   const MCVElectricalCalib& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVEnergyThreshold */
static int G__MCVDict_830_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVEnergyThreshold* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVEnergyThreshold[n];
     } else {
       p = new((void*) gvp) MCVEnergyThreshold[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVEnergyThreshold;
     } else {
       p = new((void*) gvp) MCVEnergyThreshold;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVEnergyThreshold);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_830_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVEnergyThreshold* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVEnergyThreshold((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCVEnergyThreshold((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVEnergyThreshold((TObjArray*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCVEnergyThreshold((TObjArray*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVEnergyThreshold);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_830_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCVEnergyThreshold*) G__getstructoffset())->Calculate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_830_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVEnergyThreshold*) G__getstructoffset())->PrintResults();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_830_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVEnergyThreshold*) G__getstructoffset())->SaveToFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_830_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVEnergyThreshold::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_830_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVEnergyThreshold::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_830_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVEnergyThreshold::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_830_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVEnergyThreshold::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_830_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVEnergyThreshold*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_830_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVEnergyThreshold*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_830_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVEnergyThreshold*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_830_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVEnergyThreshold*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_830_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVEnergyThreshold::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_830_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVEnergyThreshold::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_830_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVEnergyThreshold::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_830_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVEnergyThreshold::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_830_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVEnergyThreshold* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVEnergyThreshold(*(MCVEnergyThreshold*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVEnergyThreshold);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVEnergyThreshold G__TMCVEnergyThreshold;
static int G__MCVDict_830_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVEnergyThreshold*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVEnergyThreshold*) (soff+(sizeof(MCVEnergyThreshold)*i)))->~G__TMCVEnergyThreshold();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVEnergyThreshold*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVEnergyThreshold*) (soff))->~G__TMCVEnergyThreshold();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_830_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVEnergyThreshold* dest = (MCVEnergyThreshold*) G__getstructoffset();
   *dest = *(MCVEnergyThreshold*) libp->para[0].ref;
   const MCVEnergyThreshold& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVGridEnergyCal */
static int G__MCVDict_831_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVGridEnergyCal* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVGridEnergyCal[n];
     } else {
       p = new((void*) gvp) MCVGridEnergyCal[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVGridEnergyCal;
     } else {
       p = new((void*) gvp) MCVGridEnergyCal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVGridEnergyCal);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_831_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVGridEnergyCal* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVGridEnergyCal((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCVGridEnergyCal((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVGridEnergyCal((TObjArray*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCVGridEnergyCal((TObjArray*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVGridEnergyCal);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_831_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCVGridEnergyCal*) G__getstructoffset())->Calculate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_831_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVGridEnergyCal*) G__getstructoffset())->PrintResults();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_831_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVGridEnergyCal*) G__getstructoffset())->SaveToFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_831_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVGridEnergyCal*) G__getstructoffset())->UpdateCalibrationFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_831_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVGridEnergyCal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_831_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVGridEnergyCal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_831_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVGridEnergyCal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_831_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVGridEnergyCal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_831_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVGridEnergyCal*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_831_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVGridEnergyCal*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_831_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVGridEnergyCal*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_831_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVGridEnergyCal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_831_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVGridEnergyCal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_831_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVGridEnergyCal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_831_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVGridEnergyCal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_831_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVGridEnergyCal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_831_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVGridEnergyCal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVGridEnergyCal(*(MCVGridEnergyCal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVGridEnergyCal);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVGridEnergyCal G__TMCVGridEnergyCal;
static int G__MCVDict_831_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVGridEnergyCal*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVGridEnergyCal*) (soff+(sizeof(MCVGridEnergyCal)*i)))->~G__TMCVGridEnergyCal();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVGridEnergyCal*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVGridEnergyCal*) (soff))->~G__TMCVGridEnergyCal();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_831_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVGridEnergyCal* dest = (MCVGridEnergyCal*) G__getstructoffset();
   *dest = *(MCVGridEnergyCal*) libp->para[0].ref;
   const MCVGridEnergyCal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVBarCorrelation */
static int G__MCVDict_832_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVBarCorrelation* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBarCorrelation[n];
     } else {
       p = new((void*) gvp) MCVBarCorrelation[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBarCorrelation;
     } else {
       p = new((void*) gvp) MCVBarCorrelation;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVBarCorrelation);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_832_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVBarCorrelation* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBarCorrelation((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCVBarCorrelation((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBarCorrelation((TObjArray*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCVBarCorrelation((TObjArray*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVBarCorrelation);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_832_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCVBarCorrelation*) G__getstructoffset())->Calculate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_832_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBarCorrelation*) G__getstructoffset())->PrintResults();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_832_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVBarCorrelation::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_832_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVBarCorrelation::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_832_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVBarCorrelation::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_832_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVBarCorrelation::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_832_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVBarCorrelation*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_832_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBarCorrelation*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_832_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBarCorrelation*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_832_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBarCorrelation*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_832_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVBarCorrelation::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_832_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVBarCorrelation::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_832_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVBarCorrelation::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_832_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVBarCorrelation::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_832_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVBarCorrelation* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVBarCorrelation(*(MCVBarCorrelation*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVBarCorrelation);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVBarCorrelation G__TMCVBarCorrelation;
static int G__MCVDict_832_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVBarCorrelation*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVBarCorrelation*) (soff+(sizeof(MCVBarCorrelation)*i)))->~G__TMCVBarCorrelation();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVBarCorrelation*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVBarCorrelation*) (soff))->~G__TMCVBarCorrelation();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_832_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVBarCorrelation* dest = (MCVBarCorrelation*) G__getstructoffset();
   *dest = *(MCVBarCorrelation*) libp->para[0].ref;
   const MCVBarCorrelation& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVBkgSubtraction */
static int G__MCVDict_837_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVBkgSubtraction* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBkgSubtraction[n];
     } else {
       p = new((void*) gvp) MCVBkgSubtraction[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBkgSubtraction;
     } else {
       p = new((void*) gvp) MCVBkgSubtraction;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVBkgSubtraction);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_837_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVBkgSubtraction* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBkgSubtraction((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCVBkgSubtraction((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBkgSubtraction((TObjArray*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCVBkgSubtraction((TObjArray*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVBkgSubtraction);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_837_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCVBkgSubtraction*) G__getstructoffset())->Calculate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_837_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBkgSubtraction*) G__getstructoffset())->PrintResults();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_837_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBkgSubtraction*) G__getstructoffset())->DrawZoom();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_837_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBkgSubtraction*) G__getstructoffset())->FitTotEHisto();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_837_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBkgSubtraction*) G__getstructoffset())->FitSimTotEHisto();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_837_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBkgSubtraction*) G__getstructoffset())->SimulationCompare();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_837_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVBkgSubtraction::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_837_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVBkgSubtraction::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_837_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVBkgSubtraction::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_837_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVBkgSubtraction::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_837_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVBkgSubtraction*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_837_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBkgSubtraction*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_837_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBkgSubtraction*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_837_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBkgSubtraction*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_837_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVBkgSubtraction::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_837_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVBkgSubtraction::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_837_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVBkgSubtraction::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_837_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVBkgSubtraction::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_837_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVBkgSubtraction* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVBkgSubtraction(*(MCVBkgSubtraction*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVBkgSubtraction);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVBkgSubtraction G__TMCVBkgSubtraction;
static int G__MCVDict_837_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVBkgSubtraction*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVBkgSubtraction*) (soff+(sizeof(MCVBkgSubtraction)*i)))->~G__TMCVBkgSubtraction();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVBkgSubtraction*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVBkgSubtraction*) (soff))->~G__TMCVBkgSubtraction();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_837_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVBkgSubtraction* dest = (MCVBkgSubtraction*) G__getstructoffset();
   *dest = *(MCVBkgSubtraction*) libp->para[0].ref;
   const MCVBkgSubtraction& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVBurstLandauFit */
static int G__MCVDict_838_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVBurstLandauFit* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBurstLandauFit[n];
     } else {
       p = new((void*) gvp) MCVBurstLandauFit[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBurstLandauFit;
     } else {
       p = new((void*) gvp) MCVBurstLandauFit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVBurstLandauFit);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_838_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVBurstLandauFit* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBurstLandauFit((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCVBurstLandauFit((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBurstLandauFit((TObjArray*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCVBurstLandauFit((TObjArray*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVBurstLandauFit);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_838_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCVBurstLandauFit*) G__getstructoffset())->Calculate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_838_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBurstLandauFit*) G__getstructoffset())->PrintResults();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_838_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVBurstLandauFit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_838_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVBurstLandauFit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_838_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVBurstLandauFit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_838_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVBurstLandauFit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_838_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVBurstLandauFit*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_838_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBurstLandauFit*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_838_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBurstLandauFit*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_838_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBurstLandauFit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_838_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVBurstLandauFit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_838_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVBurstLandauFit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_838_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVBurstLandauFit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_838_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVBurstLandauFit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_838_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVBurstLandauFit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVBurstLandauFit(*(MCVBurstLandauFit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVBurstLandauFit);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVBurstLandauFit G__TMCVBurstLandauFit;
static int G__MCVDict_838_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVBurstLandauFit*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVBurstLandauFit*) (soff+(sizeof(MCVBurstLandauFit)*i)))->~G__TMCVBurstLandauFit();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVBurstLandauFit*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVBurstLandauFit*) (soff))->~G__TMCVBurstLandauFit();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_838_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVBurstLandauFit* dest = (MCVBurstLandauFit*) G__getstructoffset();
   *dest = *(MCVBurstLandauFit*) libp->para[0].ref;
   const MCVBurstLandauFit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVRawMonitor */
static int G__MCVDict_840_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVRawMonitor* p = NULL;
   long gvp = G__getgvp();
   //m: 4
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new MCVRawMonitor(
(const TGWindow*) G__int(libp->para[0]), (TGWindow*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) MCVRawMonitor(
(const TGWindow*) G__int(libp->para[0]), (TGWindow*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVRawMonitor);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVRawMonitor*) G__getstructoffset())->CloseWindow();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVRawMonitor*) G__getstructoffset())->FillRaw();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVRawMonitor*) G__getstructoffset())->InitMenu();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MCVRawMonitor*) G__getstructoffset())->ProcessMessage((Long_t) G__int(libp->para[0]), (Long_t) G__int(libp->para[1])
, (Long_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVRawMonitor*) G__getstructoffset())->Set2DLimits((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVRawMonitor*) G__getstructoffset())->SetConf((TEnv*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVRawMonitor*) G__getstructoffset())->SetFileInfo((MCVFileInfo*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVRawMonitor*) G__getstructoffset())->SetHistoCollection((TObjArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCVRawMonitor*) G__getstructoffset())->GetHistoCollection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCVRawMonitor*) G__getstructoffset())->GetFileInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVRawMonitor::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVRawMonitor::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVRawMonitor::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVRawMonitor::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVRawMonitor*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVRawMonitor*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVRawMonitor*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVRawMonitor*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVRawMonitor::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVRawMonitor::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVRawMonitor::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_840_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVRawMonitor::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVRawMonitor G__TMCVRawMonitor;
static int G__MCVDict_840_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVRawMonitor*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVRawMonitor*) (soff+(sizeof(MCVRawMonitor)*i)))->~G__TMCVRawMonitor();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVRawMonitor*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVRawMonitor*) (soff))->~G__TMCVRawMonitor();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVAnalysis */
static int G__MCVDict_841_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVAnalysis* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVAnalysis[n];
     } else {
       p = new((void*) gvp) MCVAnalysis[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVAnalysis;
     } else {
       p = new((void*) gvp) MCVAnalysis;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVAnalysis);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVAnalysis* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVAnalysis((TTree*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCVAnalysis((TTree*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVAnalysis((TTree*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCVAnalysis((TTree*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVAnalysis);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVAnalysis*) G__getstructoffset())->DoLombNormPeriod((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVAnalysis*) G__getstructoffset())->DoLombNormPeriod((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (unsigned long) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCVAnalysis*) G__getstructoffset())->GetCorrelationMatrix((float) G__double(libp->para[0]), (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCVAnalysis*) G__getstructoffset())->GetLombNormPeriod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCVAnalysis*) G__getstructoffset())->GetLinearCorrelation((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MCVAnalysis*) G__getstructoffset())->GetMaxFreq());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCVAnalysis*) G__getstructoffset())->GetEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MCVAnalysis*) G__getstructoffset())->GetProb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVAnalysis*) G__getstructoffset())->SetADCRelativeLimit((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVAnalysis*) G__getstructoffset())->SetData((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVAnalysis*) G__getstructoffset())->SetFileInfo((MCVFileInfo*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVAnalysis*) G__getstructoffset())->SetHifac((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVAnalysis*) G__getstructoffset())->SetOfac((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVAnalysis::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVAnalysis::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVAnalysis::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVAnalysis::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVAnalysis*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVAnalysis*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVAnalysis*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVAnalysis*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVAnalysis::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVAnalysis::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVAnalysis::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_841_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVAnalysis::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_841_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVAnalysis* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVAnalysis(*(MCVAnalysis*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVAnalysis);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVAnalysis G__TMCVAnalysis;
static int G__MCVDict_841_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVAnalysis*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVAnalysis*) (soff+(sizeof(MCVAnalysis)*i)))->~G__TMCVAnalysis();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVAnalysis*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVAnalysis*) (soff))->~G__TMCVAnalysis();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_841_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVAnalysis* dest = (MCVAnalysis*) G__getstructoffset();
   *dest = *(MCVAnalysis*) libp->para[0].ref;
   const MCVAnalysis& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVBarMonitor */
static int G__MCVDict_842_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVBarMonitor* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBarMonitor[n];
     } else {
       p = new((void*) gvp) MCVBarMonitor[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBarMonitor;
     } else {
       p = new((void*) gvp) MCVBarMonitor;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVBarMonitor);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_842_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVBarMonitor* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBarMonitor((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCVBarMonitor((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBarMonitor((TObjArray*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCVBarMonitor((TObjArray*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVBarMonitor);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_842_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCVBarMonitor*) G__getstructoffset())->Calculate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_842_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBarMonitor*) G__getstructoffset())->PrintResults();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_842_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVBarMonitor::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_842_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVBarMonitor::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_842_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVBarMonitor::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_842_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVBarMonitor::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_842_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVBarMonitor*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_842_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBarMonitor*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_842_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBarMonitor*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_842_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBarMonitor*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_842_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVBarMonitor::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_842_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVBarMonitor::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_842_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVBarMonitor::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_842_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVBarMonitor::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_842_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVBarMonitor* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVBarMonitor(*(MCVBarMonitor*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVBarMonitor);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVBarMonitor G__TMCVBarMonitor;
static int G__MCVDict_842_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVBarMonitor*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVBarMonitor*) (soff+(sizeof(MCVBarMonitor)*i)))->~G__TMCVBarMonitor();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVBarMonitor*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVBarMonitor*) (soff))->~G__TMCVBarMonitor();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_842_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVBarMonitor* dest = (MCVBarMonitor*) G__getstructoffset();
   *dest = *(MCVBarMonitor*) libp->para[0].ref;
   const MCVBarMonitor& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVSelection */
static int G__MCVDict_843_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVSelection* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVSelection[n];
     } else {
       p = new((void*) gvp) MCVSelection[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVSelection;
     } else {
       p = new((void*) gvp) MCVSelection;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVSelection);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_843_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSelection*) G__getstructoffset())->PrintSelection();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_843_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSelection*) G__getstructoffset())->SetDefault();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_843_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVSelection::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_843_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVSelection::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_843_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVSelection::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_843_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVSelection::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_843_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVSelection*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_843_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSelection*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_843_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSelection*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_843_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSelection*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_843_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVSelection::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_843_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVSelection::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_843_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVSelection::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_843_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVSelection::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_843_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVSelection* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVSelection(*(MCVSelection*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVSelection);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVSelection G__TMCVSelection;
static int G__MCVDict_843_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVSelection*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVSelection*) (soff+(sizeof(MCVSelection)*i)))->~G__TMCVSelection();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVSelection*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVSelection*) (soff))->~G__TMCVSelection();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_843_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVSelection* dest = (MCVSelection*) G__getstructoffset();
   *dest = *(MCVSelection*) libp->para[0].ref;
   const MCVSelection& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVTree */
static int G__MCVDict_844_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVTree* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVTree[n];
     } else {
       p = new((void*) gvp) MCVTree[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVTree;
     } else {
       p = new((void*) gvp) MCVTree;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVTree);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVTree* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVTree(
(TTree*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MCVTree(
(TTree*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVTree((TTree*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCVTree((TTree*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVTree);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVTree* p = NULL;
   long gvp = G__getgvp();
   //m: 5
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new MCVTree(
(TTree*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2]), (TTree*) G__int(libp->para[3])
, (MCVFileInfo*) G__int(libp->para[4]));
   } else {
     p = new((void*) gvp) MCVTree(
(TTree*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2]), (TTree*) G__int(libp->para[3])
, (MCVFileInfo*) G__int(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVTree);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVTree*) G__getstructoffset())->ApplyCalibration();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVTree*) G__getstructoffset())->DoSelection((MCVSelection*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVTree*) G__getstructoffset())->DoZeroSuppression();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCVTree*) G__getstructoffset())->GetOutputData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCVTree*) G__getstructoffset())->GetOutputHisto());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCVTree*) G__getstructoffset())->GetOutputInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVTree*) G__getstructoffset())->MuonTrackSelection();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVTree*) G__getstructoffset())->SaveData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVTree*) G__getstructoffset())->Shift((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVTree*) G__getstructoffset())->UpdateSciRM();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVTree::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVTree::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVTree::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVTree::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVTree*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVTree*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVTree*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVTree*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVTree::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVTree::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVTree::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_844_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVTree::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_844_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVTree* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVTree(*(MCVTree*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVTree);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVTree G__TMCVTree;
static int G__MCVDict_844_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVTree*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVTree*) (soff+(sizeof(MCVTree)*i)))->~G__TMCVTree();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVTree*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVTree*) (soff))->~G__TMCVTree();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_844_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVTree* dest = (MCVTree*) G__getstructoffset();
   *dest = *(MCVTree*) libp->para[0].ref;
   const MCVTree& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVSelectionGUI */
static int G__MCVDict_851_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVSelectionGUI* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVSelectionGUI(
(const TGWindow*) G__int(libp->para[0]), (TGWindow*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (TTree*) G__int(libp->para[4]), (MCVFileInfo*) G__int(libp->para[5])
, (TObjArray*) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) MCVSelectionGUI(
(const TGWindow*) G__int(libp->para[0]), (TGWindow*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (TTree*) G__int(libp->para[4]), (MCVFileInfo*) G__int(libp->para[5])
, (TObjArray*) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVSelectionGUI(
(const TGWindow*) G__int(libp->para[0]), (TGWindow*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (TTree*) G__int(libp->para[4]), (MCVFileInfo*) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) MCVSelectionGUI(
(const TGWindow*) G__int(libp->para[0]), (TGWindow*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (TTree*) G__int(libp->para[4]), (MCVFileInfo*) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVSelectionGUI(
(const TGWindow*) G__int(libp->para[0]), (TGWindow*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (TTree*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) MCVSelectionGUI(
(const TGWindow*) G__int(libp->para[0]), (TGWindow*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (TTree*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVSelectionGUI(
(const TGWindow*) G__int(libp->para[0]), (TGWindow*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MCVSelectionGUI(
(const TGWindow*) G__int(libp->para[0]), (TGWindow*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVSelectionGUI);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_851_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSelectionGUI*) G__getstructoffset())->CloseWindow();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_851_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MCVSelectionGUI*) G__getstructoffset())->ProcessMessage((Long_t) G__int(libp->para[0]), (Long_t) G__int(libp->para[1])
, (Long_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_851_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSelectionGUI*) G__getstructoffset())->EnableSelection((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_851_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSelectionGUI*) G__getstructoffset())->SetDefault((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_851_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVSelectionGUI::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_851_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVSelectionGUI::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_851_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVSelectionGUI::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_851_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVSelectionGUI::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_851_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVSelectionGUI*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_851_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSelectionGUI*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_851_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSelectionGUI*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_851_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSelectionGUI*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_851_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVSelectionGUI::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_851_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVSelectionGUI::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_851_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVSelectionGUI::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_851_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVSelectionGUI::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVSelectionGUI G__TMCVSelectionGUI;
static int G__MCVDict_851_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVSelectionGUI*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVSelectionGUI*) (soff+(sizeof(MCVSelectionGUI)*i)))->~G__TMCVSelectionGUI();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVSelectionGUI*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVSelectionGUI*) (soff))->~G__TMCVSelectionGUI();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVHisto3908 */
static int G__MCVDict_852_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVHisto3908* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVHisto3908[n];
     } else {
       p = new((void*) gvp) MCVHisto3908[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVHisto3908;
     } else {
       p = new((void*) gvp) MCVHisto3908;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVHisto3908);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_852_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVHisto3908*) G__getstructoffset())->FillHisto3908((MCALevt*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_852_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVHisto3908*) G__getstructoffset())->FillHisto3908_ric((MCALevt*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_852_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVHisto3908*) G__getstructoffset())->FillGraph3908((int) G__int(libp->para[0]), (MCALbsr*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_852_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVHisto3908*) G__getstructoffset())->FillGlobalHisto3908();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_852_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVHisto3908::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_852_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVHisto3908::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_852_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVHisto3908::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_852_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVHisto3908::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_852_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVHisto3908*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_852_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVHisto3908*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_852_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVHisto3908*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_852_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVHisto3908*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_852_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVHisto3908::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_852_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVHisto3908::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_852_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVHisto3908::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_852_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVHisto3908::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_852_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVHisto3908* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVHisto3908(*(MCVHisto3908*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVHisto3908);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVHisto3908 G__TMCVHisto3908;
static int G__MCVDict_852_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVHisto3908*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVHisto3908*) (soff+(sizeof(MCVHisto3908)*i)))->~G__TMCVHisto3908();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVHisto3908*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVHisto3908*) (soff))->~G__TMCVHisto3908();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_852_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVHisto3908* dest = (MCVHisto3908*) G__getstructoffset();
   *dest = *(MCVHisto3908*) libp->para[0].ref;
   const MCVHisto3908& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVBurst */
static int G__MCVDict_853_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVBurst* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBurst[n];
     } else {
       p = new((void*) gvp) MCVBurst[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVBurst;
     } else {
       p = new((void*) gvp) MCVBurst;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVBurst);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_853_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVBurst* p = NULL;
   long gvp = G__getgvp();
   //m: 1
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new MCVBurst((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MCVBurst((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVBurst);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_853_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBurst*) G__getstructoffset())->PrintInfo();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_853_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVBurst::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_853_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVBurst::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_853_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVBurst::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_853_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVBurst::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_853_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVBurst*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_853_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBurst*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_853_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBurst*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_853_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVBurst*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_853_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVBurst::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_853_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVBurst::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_853_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVBurst::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_853_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVBurst::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_853_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVBurst* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVBurst(*(MCVBurst*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVBurst);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVBurst G__TMCVBurst;
static int G__MCVDict_853_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVBurst*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVBurst*) (soff+(sizeof(MCVBurst)*i)))->~G__TMCVBurst();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVBurst*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVBurst*) (soff))->~G__TMCVBurst();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_853_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVBurst* dest = (MCVBurst*) G__getstructoffset();
   *dest = *(MCVBurst*) libp->para[0].ref;
   const MCVBurst& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVFilePKP3908 */
static int G__MCVDict_854_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFilePKP3908* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVFilePKP3908[n];
     } else {
       p = new((void*) gvp) MCVFilePKP3908[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVFilePKP3908;
     } else {
       p = new((void*) gvp) MCVFilePKP3908;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP3908);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFilePKP3908* p = NULL;
   long gvp = G__getgvp();
   //m: 1
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new MCVFilePKP3908((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MCVFilePKP3908((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP3908);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP3908*) G__getstructoffset())->CreateRootFile3908();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP3908*) G__getstructoffset())->PrintBurstInfo();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP3908*) G__getstructoffset())->Process3908bsrData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP3908*) G__getstructoffset())->Process3908pktData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP3908*) G__getstructoffset())->Process3908Data();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP3908*) G__getstructoffset())->ProcessTEData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP3908*) G__getstructoffset())->Resize_bsr_ric();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP3908*) G__getstructoffset())->Resize_bsr_ric((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP3908*) G__getstructoffset())->PrintEvent3908((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP3908*) G__getstructoffset())->UpdateBurst((int) G__int(libp->para[0]), (MCALbsr*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVFilePKP3908::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFilePKP3908::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVFilePKP3908::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVFilePKP3908::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVFilePKP3908*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP3908*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP3908*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFilePKP3908*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFilePKP3908::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVFilePKP3908::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFilePKP3908::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_854_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVFilePKP3908::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_854_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVFilePKP3908* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVFilePKP3908(*(MCVFilePKP3908*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP3908);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVFilePKP3908 G__TMCVFilePKP3908;
static int G__MCVDict_854_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVFilePKP3908*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVFilePKP3908*) (soff+(sizeof(MCVFilePKP3908)*i)))->~G__TMCVFilePKP3908();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVFilePKP3908*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVFilePKP3908*) (soff))->~G__TMCVFilePKP3908();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_854_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFilePKP3908* dest = (MCVFilePKP3908*) G__getstructoffset();
   *dest = *(MCVFilePKP3908*) libp->para[0].ref;
   const MCVFilePKP3908& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVbsrMonitor */
static int G__MCVDict_861_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVbsrMonitor* p = NULL;
   long gvp = G__getgvp();
   //m: 4
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new MCVbsrMonitor(
(const TGWindow*) G__int(libp->para[0]), (TGWindow*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) MCVbsrMonitor(
(const TGWindow*) G__int(libp->para[0]), (TGWindow*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_861_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVbsrMonitor*) G__getstructoffset())->SetHistoCollection((TObjArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_861_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCVbsrMonitor*) G__getstructoffset())->GetHistoCollection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_861_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVbsrMonitor*) G__getstructoffset())->FillRaw();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_861_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVbsrMonitor*) G__getstructoffset())->PlotAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_861_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVbsrMonitor*) G__getstructoffset())->SetFileInfo((MCVFileInfo*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_861_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCVbsrMonitor*) G__getstructoffset())->GetFileInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_861_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVbsrMonitor::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_861_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVbsrMonitor::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_861_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVbsrMonitor::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_861_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVbsrMonitor::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_861_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVbsrMonitor*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_861_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVbsrMonitor*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_861_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVbsrMonitor*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_861_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVbsrMonitor*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_861_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVbsrMonitor::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_861_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVbsrMonitor::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_861_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVbsrMonitor::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_861_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVbsrMonitor::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVbsrMonitor G__TMCVbsrMonitor;
static int G__MCVDict_861_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVbsrMonitor*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVbsrMonitor*) (soff+(sizeof(MCVbsrMonitor)*i)))->~G__TMCVbsrMonitor();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVbsrMonitor*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVbsrMonitor*) (soff))->~G__TMCVbsrMonitor();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVbsrMonitor_ric */
static int G__MCVDict_862_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVbsrMonitor_ric* p = NULL;
   long gvp = G__getgvp();
   //m: 4
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new MCVbsrMonitor_ric(
(const TGWindow*) G__int(libp->para[0]), (TGWindow*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) MCVbsrMonitor_ric(
(const TGWindow*) G__int(libp->para[0]), (TGWindow*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor_ric);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVbsrMonitor_ric*) G__getstructoffset())->AddBurstInfo();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVbsrMonitor_ric*) G__getstructoffset())->SetBurstCollection((TObjArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVbsrMonitor_ric*) G__getstructoffset())->SetHistoCollection((TObjArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCVbsrMonitor_ric*) G__getstructoffset())->GetHistoCollection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVbsrMonitor_ric*) G__getstructoffset())->FillRaw();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVbsrMonitor_ric*) G__getstructoffset())->PlotAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVbsrMonitor_ric*) G__getstructoffset())->PrintRMTable((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVbsrMonitor_ric*) G__getstructoffset())->SetFileInfo((MCVFileInfo*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCVbsrMonitor_ric*) G__getstructoffset())->GetFileInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVbsrMonitor_ric::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVbsrMonitor_ric::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVbsrMonitor_ric::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVbsrMonitor_ric::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVbsrMonitor_ric*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVbsrMonitor_ric*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVbsrMonitor_ric*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVbsrMonitor_ric*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVbsrMonitor_ric::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVbsrMonitor_ric::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVbsrMonitor_ric::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_862_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVbsrMonitor_ric::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVbsrMonitor_ric G__TMCVbsrMonitor_ric;
static int G__MCVDict_862_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVbsrMonitor_ric*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVbsrMonitor_ric*) (soff+(sizeof(MCVbsrMonitor_ric)*i)))->~G__TMCVbsrMonitor_ric();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVbsrMonitor_ric*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVbsrMonitor_ric*) (soff))->~G__TMCVbsrMonitor_ric();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVAntiCoincidence */
static int G__MCVDict_863_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVAntiCoincidence* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVAntiCoincidence[n];
     } else {
       p = new((void*) gvp) MCVAntiCoincidence[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVAntiCoincidence;
     } else {
       p = new((void*) gvp) MCVAntiCoincidence;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVAntiCoincidence);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_863_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVAntiCoincidence* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVAntiCoincidence((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCVAntiCoincidence((TObjArray*) G__int(libp->para[0]), (MCVFileInfo*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVAntiCoincidence((TObjArray*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCVAntiCoincidence((TObjArray*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVAntiCoincidence);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_863_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCVAntiCoincidence*) G__getstructoffset())->Calculate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_863_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVAntiCoincidence*) G__getstructoffset())->PrintResults();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_863_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVAntiCoincidence::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_863_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVAntiCoincidence::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_863_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVAntiCoincidence::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_863_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVAntiCoincidence::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_863_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVAntiCoincidence*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_863_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVAntiCoincidence*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_863_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVAntiCoincidence*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_863_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVAntiCoincidence*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_863_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVAntiCoincidence::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_863_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVAntiCoincidence::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_863_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVAntiCoincidence::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_863_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVAntiCoincidence::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_863_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVAntiCoincidence* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVAntiCoincidence(*(MCVAntiCoincidence*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVAntiCoincidence);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVAntiCoincidence G__TMCVAntiCoincidence;
static int G__MCVDict_863_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVAntiCoincidence*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVAntiCoincidence*) (soff+(sizeof(MCVAntiCoincidence)*i)))->~G__TMCVAntiCoincidence();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVAntiCoincidence*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVAntiCoincidence*) (soff))->~G__TMCVAntiCoincidence();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_863_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVAntiCoincidence* dest = (MCVAntiCoincidence*) G__getstructoffset();
   *dest = *(MCVAntiCoincidence*) libp->para[0].ref;
   const MCVAntiCoincidence& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVCalibration */
static int G__MCVDict_866_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVCalibration* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVCalibration[n];
     } else {
       p = new((void*) gvp) MCVCalibration[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVCalibration;
     } else {
       p = new((void*) gvp) MCVCalibration;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVCalibration);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_866_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCVCalibration*) G__getstructoffset())->GetPdAGraph());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_866_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCVCalibration*) G__getstructoffset())->GetPdBGraph());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_866_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCVCalibration*) G__getstructoffset())->GetBonAGraph());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_866_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVCalibration::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_866_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVCalibration::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_866_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVCalibration::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_866_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVCalibration::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_866_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVCalibration*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_866_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVCalibration*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_866_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVCalibration*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_866_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVCalibration*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_866_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVCalibration::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_866_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVCalibration::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_866_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVCalibration::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_866_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVCalibration::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_866_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVCalibration* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVCalibration(*(MCVCalibration*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVCalibration);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVCalibration G__TMCVCalibration;
static int G__MCVDict_866_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVCalibration*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVCalibration*) (soff+(sizeof(MCVCalibration)*i)))->~G__TMCVCalibration();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVCalibration*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVCalibration*) (soff))->~G__TMCVCalibration();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_866_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVCalibration* dest = (MCVCalibration*) G__getstructoffset();
   *dest = *(MCVCalibration*) libp->para[0].ref;
   const MCVCalibration& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVSubMS */
static int G__MCVDict_868_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVSubMS* p = NULL;
   long gvp = G__getgvp();
   //m: 1
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new MCVSubMS((TH1F*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MCVSubMS((TH1F*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVSubMS);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_868_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSubMS*) G__getstructoffset())->ProcessEvent((MCALevt*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_868_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCVSubMS*) G__getstructoffset())->InitSubwin((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_868_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVSubMS::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_868_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVSubMS::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_868_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVSubMS::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_868_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVSubMS::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_868_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVSubMS*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_868_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSubMS*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_868_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSubMS*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_868_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVSubMS*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_868_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVSubMS::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_868_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVSubMS::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_868_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVSubMS::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_868_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVSubMS::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_868_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVSubMS* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVSubMS(*(MCVSubMS*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVSubMS);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVSubMS G__TMCVSubMS;
static int G__MCVDict_868_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVSubMS*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVSubMS*) (soff+(sizeof(MCVSubMS)*i)))->~G__TMCVSubMS();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVSubMS*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVSubMS*) (soff))->~G__TMCVSubMS();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_868_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVSubMS* dest = (MCVSubMS*) G__getstructoffset();
   *dest = *(MCVSubMS*) libp->para[0].ref;
   const MCVSubMS& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GRB */
static int G__MCVDict_887_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GRB* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new GRB[n];
     } else {
       p = new((void*) gvp) GRB[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new GRB;
     } else {
       p = new((void*) gvp) GRB;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_GRB);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB*) G__getstructoffset())->CalculateBackground();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB*) G__getstructoffset())->CalculatePeakFlux();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB*) G__getstructoffset())->CalculateT90();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB*) G__getstructoffset())->CalculateFluence();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB*) G__getstructoffset())->CalculateHR();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((GRB*) G__getstructoffset())->DrawLightCurve((TPad*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((GRB*) G__getstructoffset())->DrawLightCurve((TPad*) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((GRB*) G__getstructoffset())->DrawLightCurve((TPad*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRB*) G__getstructoffset())->GetAlertTypeCode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRB*) G__getstructoffset())->GetNEbins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRB*) G__getstructoffset())->GetContact());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((GRB*) G__getstructoffset())->GetT90());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((GRB*) G__getstructoffset())->GetTPeak());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((GRB*) G__getstructoffset())->GetMaxE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((GRB*) G__getstructoffset())->GetSelFluence());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRB*) G__getstructoffset())->GetI90Lo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRB*) G__getstructoffset())->GetI90Hi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GRB*) G__getstructoffset())->GetLightCurve());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GRB*) G__getstructoffset())->GetLightCurve2D());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((GRB*) G__getstructoffset())->SaveIPN(*((TString*) G__int(libp->para[0])), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((GRB*) G__getstructoffset())->SaveIPN(*((TString*) G__int(libp->para[0])), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((GRB*) G__getstructoffset())->SaveIPN(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GRB*) G__getstructoffset())->GetFileHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB*) G__getstructoffset())->SetGRBBoundaries((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB*) G__getstructoffset())->SetBurstId((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB*) G__getstructoffset())->SetT90((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB*) G__getstructoffset())->SetT0((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB*) G__getstructoffset())->SetTSearch((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((GRB*) G__getstructoffset())->SaveInfo(*((TString*) G__int(libp->para[0])), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((GRB*) G__getstructoffset())->SaveInfo(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRB*) G__getstructoffset())->SaveMsg(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRB*) G__getstructoffset())->SaveAnalysis(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB*) G__getstructoffset())->SpectralAnalysis();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB*) G__getstructoffset())->CustomSpectralAnalysis();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GRB::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GRB::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GRB::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GRB::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const GRB*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GRB::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GRB::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GRB::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_887_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GRB::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_887_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GRB* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GRB(*(GRB*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_GRB);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GRB G__TGRB;
static int G__MCVDict_887_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (GRB*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GRB*) (soff+(sizeof(GRB)*i)))->~G__TGRB();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (GRB*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((GRB*) (soff))->~G__TGRB();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_887_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GRB* dest = (GRB*) G__getstructoffset();
   *dest = *(GRB*) libp->para[0].ref;
   const GRB& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GRB3908 */
static int G__MCVDict_888_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GRB3908* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new GRB3908[n];
     } else {
       p = new((void*) gvp) GRB3908[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new GRB3908;
     } else {
       p = new((void*) gvp) GRB3908;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_GRB3908);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GRB3908* p = NULL;
   long gvp = G__getgvp();
   //m: 1
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new GRB3908(*((TString*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) GRB3908(*((TString*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_GRB3908);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRB3908*) G__getstructoffset())->DefaultLightCurve());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3908*) G__getstructoffset())->DrawCustomLightCurve((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3908*) G__getstructoffset())->DrawDefaultLightCurve();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3908*) G__getstructoffset())->DrawPositionDiagnostic((TPad*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3908*) G__getstructoffset())->DrawVSBDiagnostic((TPad*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3908*) G__getstructoffset())->DrawDiagnostic((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      G__letint(result7, 105, (long) ((GRB3908*) G__getstructoffset())->CustomLightCurve(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]), (double) G__double(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 105, (long) ((GRB3908*) G__getstructoffset())->CustomLightCurve(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 105, (long) ((GRB3908*) G__getstructoffset())->CustomLightCurve((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (int) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) ((GRB3908*) G__getstructoffset())->CustomLightCurve((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((GRB3908*) G__getstructoffset())->CustomLightCurve((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((GRB3908*) G__getstructoffset())->CustomLightCurve((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((GRB3908*) G__getstructoffset())->CustomLightCurve((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((GRB3908*) G__getstructoffset())->CustomLightCurve((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((GRB3908*) G__getstructoffset())->CustomLightCurve());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 70, (long) ((GRB3908*) G__getstructoffset())->GetPha((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (double*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 70, (long) ((GRB3908*) G__getstructoffset())->GetPha((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 70, (long) ((GRB3908*) G__getstructoffset())->GetPha((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GRB3908*) G__getstructoffset())->GetEvsT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3908*) G__getstructoffset())->SaveCustomLightCurve(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3908*) G__getstructoffset())->SaveDiagnostic(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3908*) G__getstructoffset())->SaveVSBDiagnostic(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRB3908*) G__getstructoffset())->SaveIPNMsg(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRB3908*) G__getstructoffset())->SaveVSBInfo(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRB3908*) G__getstructoffset())->StandardDiagnostic());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRB3908*) G__getstructoffset())->VSBDiagnostic());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3908*) G__getstructoffset())->CalculatePeakFluxVSB();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3908*) G__getstructoffset())->CalculateT90VSB();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3908*) G__getstructoffset())->CalculateFluenceVSB();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3908*) G__getstructoffset())->SpectralAnalysisVSB();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3908*) G__getstructoffset())->CustomSpectralAnalysisVSB();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((GRB3908*) G__getstructoffset())->FindTrueT0((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GRB3908::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GRB3908::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GRB3908::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GRB3908::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const GRB3908*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3908*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3908*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3908*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GRB3908::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GRB3908::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GRB3908::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_888_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GRB3908::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_888_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GRB3908* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GRB3908(*(GRB3908*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_GRB3908);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GRB3908 G__TGRB3908;
static int G__MCVDict_888_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (GRB3908*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GRB3908*) (soff+(sizeof(GRB3908)*i)))->~G__TGRB3908();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (GRB3908*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((GRB3908*) (soff))->~G__TGRB3908();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_888_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GRB3908* dest = (GRB3908*) G__getstructoffset();
   *dest = *(GRB3908*) libp->para[0].ref;
   const GRB3908& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GRB3913 */
static int G__MCVDict_889_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GRB3913* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new GRB3913[n];
     } else {
       p = new((void*) gvp) GRB3913[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new GRB3913;
     } else {
       p = new((void*) gvp) GRB3913;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_GRB3913);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_889_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GRB3913* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new GRB3913(*((TString*) G__int(libp->para[0])), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) GRB3913(*((TString*) G__int(libp->para[0])), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new GRB3913(*((TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) GRB3913(*((TString*) G__int(libp->para[0])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_GRB3913);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_889_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRB3913*) G__getstructoffset())->LightCurve((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_889_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GRB3913::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_889_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GRB3913::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_889_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GRB3913::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_889_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GRB3913::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_889_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const GRB3913*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_889_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3913*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_889_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3913*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_889_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3913*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_889_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GRB3913::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_889_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GRB3913::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_889_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GRB3913::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_889_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GRB3913::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_889_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GRB3913* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GRB3913(*(GRB3913*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_GRB3913);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GRB3913 G__TGRB3913;
static int G__MCVDict_889_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (GRB3913*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GRB3913*) (soff+(sizeof(GRB3913)*i)))->~G__TGRB3913();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (GRB3913*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((GRB3913*) (soff))->~G__TGRB3913();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_889_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GRB3913* dest = (GRB3913*) G__getstructoffset();
   *dest = *(GRB3913*) libp->para[0].ref;
   const GRB3913& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GRB3913XZ */
static int G__MCVDict_890_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GRB3913XZ* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new GRB3913XZ[n];
     } else {
       p = new((void*) gvp) GRB3913XZ[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new GRB3913XZ;
     } else {
       p = new((void*) gvp) GRB3913XZ;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_GRB3913XZ);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GRB3913XZ* p = NULL;
   long gvp = G__getgvp();
   //m: 1
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new GRB3913XZ(*((TString*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) GRB3913XZ(*((TString*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_GRB3913XZ);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((GRB3913XZ*) G__getstructoffset())->GetT90());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRB3913XZ*) G__getstructoffset())->LightCurve((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GRB3913XZ*) G__getstructoffset())->GetLightCurve((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GRB3913XZ*) G__getstructoffset())->GetLightCurve2D((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3913XZ*) G__getstructoffset())->DrawCustomLightCurve((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3913XZ*) G__getstructoffset())->SaveCustomLightCurve(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRB3913XZ*) G__getstructoffset())->SaveInfo(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRB3913XZ*) G__getstructoffset())->SaveAnalysis(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3913XZ*) G__getstructoffset())->SpectralAnalysis();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3913XZ*) G__getstructoffset())->CustomSpectralAnalysis();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3913XZ*) G__getstructoffset())->SetGRBBoundaries((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GRB3913XZ::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GRB3913XZ::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GRB3913XZ::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GRB3913XZ::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const GRB3913XZ*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3913XZ*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3913XZ*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRB3913XZ*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GRB3913XZ::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GRB3913XZ::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GRB3913XZ::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_890_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GRB3913XZ::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_890_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GRB3913XZ* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GRB3913XZ(*(GRB3913XZ*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_GRB3913XZ);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GRB3913XZ G__TGRB3913XZ;
static int G__MCVDict_890_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (GRB3913XZ*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GRB3913XZ*) (soff+(sizeof(GRB3913XZ)*i)))->~G__TGRB3913XZ();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (GRB3913XZ*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((GRB3913XZ*) (soff))->~G__TGRB3913XZ();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_890_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GRB3913XZ* dest = (GRB3913XZ*) G__getstructoffset();
   *dest = *(GRB3913XZ*) libp->para[0].ref;
   const GRB3913XZ& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVFile3916 */
static int G__MCVDict_925_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFile3916* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVFile3916(
(const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MCVFile3916(
(const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVFile3916((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCVFile3916((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVFile3916((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCVFile3916((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFile3916);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_925_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((MCVFile3916*) G__getstructoffset())->Ecef2lla((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MCVFile3916*) G__getstructoffset())->Ecef2lla((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MCVFile3916*) G__getstructoffset())->Ecef2lla((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCVFile3916*) G__getstructoffset())->Ecef2lla();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_925_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((MCVFile3916*) G__getstructoffset())->Eci2lla((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((MCVFile3916*) G__getstructoffset())->Eci2lla((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MCVFile3916*) G__getstructoffset())->Eci2lla((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MCVFile3916*) G__getstructoffset())->Eci2lla((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCVFile3916*) G__getstructoffset())->Eci2lla();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_925_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCVFile3916*) G__getstructoffset())->GetCoordinates((gpsevt*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_925_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFile3916*) G__getstructoffset())->PrintResults();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_925_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFile3916*) G__getstructoffset())->WriteRootFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_925_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCVFile3916*) G__getstructoffset())->IsRoot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_925_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVFile3916::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_925_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFile3916::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_925_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVFile3916::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_925_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVFile3916::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_925_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVFile3916*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_925_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFile3916*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_925_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFile3916*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_925_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFile3916*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_925_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFile3916::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_925_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVFile3916::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_925_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFile3916::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_925_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVFile3916::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_925_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVFile3916* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVFile3916(*(MCVFile3916*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFile3916);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVFile3916 G__TMCVFile3916;
static int G__MCVDict_925_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVFile3916*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVFile3916*) (soff+(sizeof(MCVFile3916)*i)))->~G__TMCVFile3916();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVFile3916*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVFile3916*) (soff))->~G__TMCVFile3916();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_925_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFile3916* dest = (MCVFile3916*) G__getstructoffset();
   *dest = *(MCVFile3916*) libp->para[0].ref;
   const MCVFile3916& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCVFile3201 */
static int G__MCVDict_927_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFile3201* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVFile3201((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCVFile3201((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new MCVFile3201((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCVFile3201((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFile3201);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_927_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFile3201*) G__getstructoffset())->PrintResults();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_927_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFile3201*) G__getstructoffset())->WriteRootFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_927_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCVFile3201::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_927_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFile3201::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_927_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCVFile3201::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_927_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCVFile3201::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_927_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCVFile3201*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_927_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFile3201*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_927_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFile3201*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_927_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCVFile3201*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_927_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFile3201::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_927_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVFile3201::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_927_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCVFile3201::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCVDict_927_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCVFile3201::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCVDict_927_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCVFile3201* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCVFile3201(*(MCVFile3201*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MCVDictLN_MCVFile3201);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCVFile3201 G__TMCVFile3201;
static int G__MCVDict_927_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (MCVFile3201*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCVFile3201*) (soff+(sizeof(MCVFile3201)*i)))->~G__TMCVFile3201();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (MCVFile3201*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((MCVFile3201*) (soff))->~G__TMCVFile3201();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCVDict_927_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCVFile3201* dest = (MCVFile3201*) G__getstructoffset();
   *dest = *(MCVFile3201*) libp->para[0].ref;
   const MCVFile3201& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MCVFileInfo */

/* MCVFile */

/* MCVHisto */

/* MCVFileTE */

/* MCVFilePKP */

/* MCVStdAnalysis */

/* MCVGridOffset */

/* MCVCountRate */

/* MCVRetriggering */

/* MCVGlobalRetriggering */

/* MCVSciRM */

/* MCVFitPeak */

/* MCVBurstOffset */

/* MCVElectricalCalib */

/* MCVEnergyThreshold */

/* MCVGridEnergyCal */

/* MCVBarCorrelation */

/* MCVBkgSubtraction */

/* MCVBurstLandauFit */

/* MCVRawMonitor */

/* MCVAnalysis */

/* MCVBarMonitor */

/* MCVSelection */

/* MCVTree */

/* MCVSelectionGUI */

/* MCVHisto3908 */

/* MCVBurst */

/* MCVFilePKP3908 */

/* MCVbsrMonitor */

/* MCVbsrMonitor_ric */

/* MCVAntiCoincidence */

/* MCVCalibration */

/* MCVSubMS */

/* GRB */

/* GRB3908 */

/* GRB3913 */

/* GRB3913XZ */

/* MCVFile3916 */

/* MCVFile3201 */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMCVDict {
 public:
  G__Sizep2memfuncMCVDict() {p=&G__Sizep2memfuncMCVDict::sizep2memfunc;}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMCVDict::*p)();
};

size_t G__get_sizep2memfuncMCVDict()
{
  G__Sizep2memfuncMCVDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMCVDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo))) {
     MCVFileInfo *G__Lderived;
     G__Lderived=(MCVFileInfo*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo),G__get_linked_tagnum(&G__MCVDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo),G__get_linked_tagnum(&G__MCVDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVFileTE))) {
     MCVFileTE *G__Lderived;
     G__Lderived=(MCVFileTE*)0x1000;
     {
       MCVFile *G__Lpbase=(MCVFile*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFileTE),G__get_linked_tagnum(&G__MCVDictLN_MCVFile),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MCVHisto *G__Lpbase=(MCVHisto*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFileTE),G__get_linked_tagnum(&G__MCVDictLN_MCVHisto),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP))) {
     MCVFilePKP *G__Lderived;
     G__Lderived=(MCVFilePKP*)0x1000;
     {
       MCVFile *G__Lpbase=(MCVFile*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP),G__get_linked_tagnum(&G__MCVDictLN_MCVFile),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MCVHisto *G__Lpbase=(MCVHisto*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP),G__get_linked_tagnum(&G__MCVDictLN_MCVHisto),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVGridOffset))) {
     MCVGridOffset *G__Lderived;
     G__Lderived=(MCVGridOffset*)0x1000;
     {
       MCVStdAnalysis *G__Lpbase=(MCVStdAnalysis*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVGridOffset),G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVCountRate))) {
     MCVCountRate *G__Lderived;
     G__Lderived=(MCVCountRate*)0x1000;
     {
       MCVStdAnalysis *G__Lpbase=(MCVStdAnalysis*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVCountRate),G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVRetriggering))) {
     MCVRetriggering *G__Lderived;
     G__Lderived=(MCVRetriggering*)0x1000;
     {
       MCVStdAnalysis *G__Lpbase=(MCVStdAnalysis*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVRetriggering),G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVGlobalRetriggering))) {
     MCVGlobalRetriggering *G__Lderived;
     G__Lderived=(MCVGlobalRetriggering*)0x1000;
     {
       MCVStdAnalysis *G__Lpbase=(MCVStdAnalysis*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVGlobalRetriggering),G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVSciRM))) {
     MCVSciRM *G__Lderived;
     G__Lderived=(MCVSciRM*)0x1000;
     {
       MCVStdAnalysis *G__Lpbase=(MCVStdAnalysis*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSciRM),G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVFitPeak))) {
     MCVFitPeak *G__Lderived;
     G__Lderived=(MCVFitPeak*)0x1000;
     {
       MCVStdAnalysis *G__Lpbase=(MCVStdAnalysis*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFitPeak),G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVBurstOffset))) {
     MCVBurstOffset *G__Lderived;
     G__Lderived=(MCVBurstOffset*)0x1000;
     {
       MCVStdAnalysis *G__Lpbase=(MCVStdAnalysis*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBurstOffset),G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVElectricalCalib))) {
     MCVElectricalCalib *G__Lderived;
     G__Lderived=(MCVElectricalCalib*)0x1000;
     {
       MCVStdAnalysis *G__Lpbase=(MCVStdAnalysis*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVElectricalCalib),G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVEnergyThreshold))) {
     MCVEnergyThreshold *G__Lderived;
     G__Lderived=(MCVEnergyThreshold*)0x1000;
     {
       MCVStdAnalysis *G__Lpbase=(MCVStdAnalysis*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVEnergyThreshold),G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVGridEnergyCal))) {
     MCVGridEnergyCal *G__Lderived;
     G__Lderived=(MCVGridEnergyCal*)0x1000;
     {
       MCVStdAnalysis *G__Lpbase=(MCVStdAnalysis*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVGridEnergyCal),G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVBarCorrelation))) {
     MCVBarCorrelation *G__Lderived;
     G__Lderived=(MCVBarCorrelation*)0x1000;
     {
       MCVStdAnalysis *G__Lpbase=(MCVStdAnalysis*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBarCorrelation),G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVBkgSubtraction))) {
     MCVBkgSubtraction *G__Lderived;
     G__Lderived=(MCVBkgSubtraction*)0x1000;
     {
       MCVStdAnalysis *G__Lpbase=(MCVStdAnalysis*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBkgSubtraction),G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVBurstLandauFit))) {
     MCVBurstLandauFit *G__Lderived;
     G__Lderived=(MCVBurstLandauFit*)0x1000;
     {
       MCVStdAnalysis *G__Lpbase=(MCVStdAnalysis*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBurstLandauFit),G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVRawMonitor))) {
     MCVRawMonitor *G__Lderived;
     G__Lderived=(MCVRawMonitor*)0x1000;
     {
       TGTransientFrame *G__Lpbase=(TGTransientFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVRawMonitor),G__get_linked_tagnum(&G__MCVDictLN_TGTransientFrame),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TGMainFrame *G__Lpbase=(TGMainFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVRawMonitor),G__get_linked_tagnum(&G__MCVDictLN_TGMainFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGCompositeFrame *G__Lpbase=(TGCompositeFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVRawMonitor),G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGFrame *G__Lpbase=(TGFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVRawMonitor),G__get_linked_tagnum(&G__MCVDictLN_TGFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGWindow *G__Lpbase=(TGWindow*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVRawMonitor),G__get_linked_tagnum(&G__MCVDictLN_TGWindow),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGObject *G__Lpbase=(TGObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVRawMonitor),G__get_linked_tagnum(&G__MCVDictLN_TGObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVRawMonitor),G__get_linked_tagnum(&G__MCVDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TQObject *G__Lpbase=(TQObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVRawMonitor),G__get_linked_tagnum(&G__MCVDictLN_TQObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVBarMonitor))) {
     MCVBarMonitor *G__Lderived;
     G__Lderived=(MCVBarMonitor*)0x1000;
     {
       MCVStdAnalysis *G__Lpbase=(MCVStdAnalysis*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBarMonitor),G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVSelection))) {
     MCVSelection *G__Lderived;
     G__Lderived=(MCVSelection*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSelection),G__get_linked_tagnum(&G__MCVDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSelection),G__get_linked_tagnum(&G__MCVDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVTree))) {
     MCVTree *G__Lderived;
     G__Lderived=(MCVTree*)0x1000;
     {
       MCVFile *G__Lpbase=(MCVFile*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVTree),G__get_linked_tagnum(&G__MCVDictLN_MCVFile),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MCVHisto *G__Lpbase=(MCVHisto*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVTree),G__get_linked_tagnum(&G__MCVDictLN_MCVHisto),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVSelectionGUI))) {
     MCVSelectionGUI *G__Lderived;
     G__Lderived=(MCVSelectionGUI*)0x1000;
     {
       TGTransientFrame *G__Lpbase=(TGTransientFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSelectionGUI),G__get_linked_tagnum(&G__MCVDictLN_TGTransientFrame),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TGMainFrame *G__Lpbase=(TGMainFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSelectionGUI),G__get_linked_tagnum(&G__MCVDictLN_TGMainFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGCompositeFrame *G__Lpbase=(TGCompositeFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSelectionGUI),G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGFrame *G__Lpbase=(TGFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSelectionGUI),G__get_linked_tagnum(&G__MCVDictLN_TGFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGWindow *G__Lpbase=(TGWindow*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSelectionGUI),G__get_linked_tagnum(&G__MCVDictLN_TGWindow),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGObject *G__Lpbase=(TGObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSelectionGUI),G__get_linked_tagnum(&G__MCVDictLN_TGObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSelectionGUI),G__get_linked_tagnum(&G__MCVDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TQObject *G__Lpbase=(TQObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSelectionGUI),G__get_linked_tagnum(&G__MCVDictLN_TQObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVBurst))) {
     MCVBurst *G__Lderived;
     G__Lderived=(MCVBurst*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBurst),G__get_linked_tagnum(&G__MCVDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBurst),G__get_linked_tagnum(&G__MCVDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP3908))) {
     MCVFilePKP3908 *G__Lderived;
     G__Lderived=(MCVFilePKP3908*)0x1000;
     {
       MCVFilePKP *G__Lpbase=(MCVFilePKP*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP3908),G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MCVFile *G__Lpbase=(MCVFile*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP3908),G__get_linked_tagnum(&G__MCVDictLN_MCVFile),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCVHisto *G__Lpbase=(MCVHisto*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP3908),G__get_linked_tagnum(&G__MCVDictLN_MCVHisto),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCVHisto3908 *G__Lpbase=(MCVHisto3908*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP3908),G__get_linked_tagnum(&G__MCVDictLN_MCVHisto3908),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor))) {
     MCVbsrMonitor *G__Lderived;
     G__Lderived=(MCVbsrMonitor*)0x1000;
     {
       TGTransientFrame *G__Lpbase=(TGTransientFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor),G__get_linked_tagnum(&G__MCVDictLN_TGTransientFrame),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TGMainFrame *G__Lpbase=(TGMainFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor),G__get_linked_tagnum(&G__MCVDictLN_TGMainFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGCompositeFrame *G__Lpbase=(TGCompositeFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor),G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGFrame *G__Lpbase=(TGFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor),G__get_linked_tagnum(&G__MCVDictLN_TGFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGWindow *G__Lpbase=(TGWindow*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor),G__get_linked_tagnum(&G__MCVDictLN_TGWindow),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGObject *G__Lpbase=(TGObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor),G__get_linked_tagnum(&G__MCVDictLN_TGObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor),G__get_linked_tagnum(&G__MCVDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TQObject *G__Lpbase=(TQObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor),G__get_linked_tagnum(&G__MCVDictLN_TQObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor_ric))) {
     MCVbsrMonitor_ric *G__Lderived;
     G__Lderived=(MCVbsrMonitor_ric*)0x1000;
     {
       TGTransientFrame *G__Lpbase=(TGTransientFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor_ric),G__get_linked_tagnum(&G__MCVDictLN_TGTransientFrame),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TGMainFrame *G__Lpbase=(TGMainFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor_ric),G__get_linked_tagnum(&G__MCVDictLN_TGMainFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGCompositeFrame *G__Lpbase=(TGCompositeFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor_ric),G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGFrame *G__Lpbase=(TGFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor_ric),G__get_linked_tagnum(&G__MCVDictLN_TGFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGWindow *G__Lpbase=(TGWindow*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor_ric),G__get_linked_tagnum(&G__MCVDictLN_TGWindow),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGObject *G__Lpbase=(TGObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor_ric),G__get_linked_tagnum(&G__MCVDictLN_TGObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor_ric),G__get_linked_tagnum(&G__MCVDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TQObject *G__Lpbase=(TQObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor_ric),G__get_linked_tagnum(&G__MCVDictLN_TQObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_MCVAntiCoincidence))) {
     MCVAntiCoincidence *G__Lderived;
     G__Lderived=(MCVAntiCoincidence*)0x1000;
     {
       MCVStdAnalysis *G__Lpbase=(MCVStdAnalysis*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVAntiCoincidence),G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_GRB3908))) {
     GRB3908 *G__Lderived;
     G__Lderived=(GRB3908*)0x1000;
     {
       GRB *G__Lpbase=(GRB*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_GRB3908),G__get_linked_tagnum(&G__MCVDictLN_GRB),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCVDictLN_GRB3913))) {
     GRB3913 *G__Lderived;
     G__Lderived=(GRB3913*)0x1000;
     {
       GRB *G__Lpbase=(GRB*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCVDictLN_GRB3913),G__get_linked_tagnum(&G__MCVDictLN_GRB),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMCVDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 4 bytes (long)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<TStreamerInfo*>",117,G__get_linked_tagnum(&G__MCVDictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MCVDictLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MCVDictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MCVDictLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MCVDictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<void*,Version_t>",117,G__get_linked_tagnum(&G__MCVDictLN_multimaplEvoidmUcOshortcOlesslEvoidmUgRcOallocatorlEpairlEvoidmUsPconstcOshortgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<void*,short>",117,G__get_linked_tagnum(&G__MCVDictLN_multimaplEvoidmUcOshortcOlesslEvoidmUgRcOallocatorlEpairlEvoidmUsPconstcOshortgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<void*,short,less<void*>>",117,G__get_linked_tagnum(&G__MCVDictLN_multimaplEvoidmUcOshortcOlesslEvoidmUgRcOallocatorlEpairlEvoidmUsPconstcOshortgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__MCVDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__MCVDictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MCVDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MCVDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MCVDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MCVDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__MCVDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MCVFileInfo */
static void G__setup_memvarMCVFileInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo));
   { MCVFileInfo *p; p=(MCVFileInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->filename)-(long)(p)),99,0,0,-1,-1,-1,1,"filename[200]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->runid)-(long)(p)),105,0,0,-1,-1,-1,1,"runid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pkttype)-(long)(p)),105,0,0,-1,-1,-1,1,"pkttype=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nevents)-(long)(p)),108,0,0,-1,-1,-1,1,"nevents=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tstart)-(long)(p)),100,0,0,-1,-1,-1,1,"tstart=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tstop)-(long)(p)),100,0,0,-1,-1,-1,1,"tstop=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ttot)-(long)(p)),100,0,0,-1,-1,-1,1,"ttot=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdhuformat)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"pdhuformat=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdhudata)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"pdhudata=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->grid)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"grid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->seed)-(long)(p)),104,0,0,-1,-1,-1,1,"seed=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calFile)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__MCVDictLN_TString),-1,-1,1,"calFile=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->barLen)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"barLen=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gainFactor)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"gainFactor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->u0A)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"u0A[30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->u0B)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"u0B[30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->alphaA)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"alphaA[30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->alphaB)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"alphaB[30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->oA)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"oA[30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->oB)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"oB[30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->soA)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"soA[30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->soB)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"soB[30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->notmonotonic)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"notmonotonic=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nlowDT)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nlowDT=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lowDTevt)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"lowDTevt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lowDTti)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"lowDTti=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lowDTtf)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"lowDTtf=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->teff)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"teff=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVFile */
static void G__setup_memvarMCVFile(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFile));
   { MCVFile *p; p=(MCVFile*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"status=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nfields=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,99,0,0,-1,-1,-1,2,"comment[100]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,99,0,0,-1,-1,-1,2,"path[200]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,99,0,0,-1,-1,-1,2,"fname[200]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"timearray=",0,"!< array containing the TIME column of the lv1 fits file");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo),-1,-1,2,"fileInfo=",0,"!< object containing all the relevant file information");
   G__memvar_setup((void*)NULL,69,0,0,-1,-1,-1,2,"ferr=",0,"!< pointer to txt file for data error info storage");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_TRandom3),-1,-1,2,"rg=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"enoise=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_TString),-1,-1,2,"calFile=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_TString),-1,-1,2,"fitsname=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TEnv),-1,-1,2,"conf=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TEnv),-1,-1,2,"stdconf=",0,"!< Standard configuration file");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"barLen=",0,"!< Bar length (default = 37.5 cm)");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"gainFactor=",0,"!< Gain multiplicative coefficient for GRID energy calculations (~1.2)");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"u0A[30]=",0,"!< PD-A gain near PD (ch/MeV)");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"u0B[30]=",0,"!< PD-B gain near PD (ch/MeV)");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"alphaA[30]=",0,"!< PD-A attenuation coefficient (cm^-1)");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"alphaB[30]=",0,"!< PD-B attenuation coefficient (cm^-1)");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"oA[30]=",0,"!< Offset of PD-A (ADC channels)");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"oB[30]=",0,"!< Offset of PD-B (ADC channels)");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"alphaMean[30]=",0,"!< Mean attenuation coefficient = 0.5*(alphaA+alphaB)");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"alphaDelta[30]=",0,"!< Attenuation coefficient semidispersion = 0.5*(alphaA-alphaB)");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"cx1[30]=",0,"!< Auxiliary coefficient for position calculation");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"cx2[30]=",0,"!< Auxiliary coefficient for position calculation");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"cE1[30]=",0,"!< Auxiliary coefficient for position calculation");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"Ea[30]=",0,"!< Energy linear correction offset parameter (to be read from file)  ");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"Eb[30]=",0,"!< Energy linear correction angular coefficient (to be read from file)");
   G__memvar_setup((void*)NULL,103,0,0,-1,-1,-1,2,"corrFlag=",0,"!< Linear correction flag: TRUE = lin. corr. ON; FALSE = lin. corr. OFF");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"barpol=",0,"!< Collection of polinomial bar models for E and pos. reconstruction");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"fcA=",0,"!< Collection of polinomial bar models for E and pos. reconstruction (side A)");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"fcB=",0,"!< Collection of polinomial bar models for E and pos. reconstruction (side B)");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"fcBonA=",0,"!< Collection of polinomial bar models for E and pos. reconstruction (ln(B/A))");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"recmodel=",0,"!< Model for energy/position reconstruction (0: expo, 1: pol5 (text file), 2: pol3 (root file))");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"minX[30]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"minAB[30]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"maxX[30]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"maxAB[30]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"soA[30]=",0,"!< PD-A offset as stored in PDHU for scientific RM calculation	");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"soB[30]=",0,"!< PD-B offset as stored in PDHU for scientific RM calculation	");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TFile),-1,-1,2,"fp=",0,"!< root file pointer");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TTree),-1,-1,2,"tdata=",0,"!< data tree pointer");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_TString),-1,-1,2,"rootdatapath=",0,"!< Path to ROOT data file");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCALevt),-1,-1,2,"currevt=",0,"!< structure containing all the information concerning the current event");
   G__memvar_setup((void*)NULL,104,0,0,-1,-1,-1,2,"seed=",0,"!< initial seed for random number generator");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"notmonotonic=",0,"!< Number of events with not monotonic time tag");
   G__memvar_setup((void*)NULL,103,0,0,-1,-1,-1,2,"simulation=",0,"!< TRUE if data set is GAMS + DHSim simulated data, FALSE otherwise");
   G__memvar_setup((void*)NULL,103,0,0,-1,-1,-1,2,"trigtrack=",0,"!< TRUE if data set contains tagged DAFNE photons, FALSE otherwise");
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVHisto */
static void G__setup_memvarMCVHisto(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVHisto));
   { MCVHisto *p; p=(MCVHisto*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rawPDA=",0,"!< Container class for PD-A histograms of all bars");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rawPDB=",0,"!< Container class for PD-B histograms of all bars");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"raw2D=",0,"!< Container class for 2D (PD-A vs. PD-B) histograms of all bar");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rawPos=",0,"!< Container class for reconstructed position histograms of all bar");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rawE=",0,"!< Container class for reconstructed energy histograms of all bar");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rawDTime=",0,"!< Container class for time separation histograms of all bar");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rawCRate=",0,"!< Container class for count rate histograms of all bar");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rawCRDist=",0,"!< Container class for count rate distribution histograms of all bar");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rawMult=",0,"!< Container class for multiplicity histograms of all bar");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rawSciRM3913=",0,"!< Container class for MCAL scientific ratemeters (39.13) vs. time");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rawACRM3913=",0,"!< Container class for AC scientific ratemeters (39.13) vs. time");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"sciRMX=",0,"!< scientific ratemeters on plane X as derived from data");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"sciRMZ=",0,"!< scientific ratemeters on plane Z as derived from data");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hRMXR=",0,"!< scientific ratemeters on plane X as derived from reconstructed energy");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hRMZR=",0,"!< scientific ratemeters on plane Z as derived from reconstructed energy");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraphErrors),-1,-1,2,"gRMX=",0,"!< scientific ratemeters on plane X as derived from data (normalized graph)");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraphErrors),-1,-1,2,"gRMZ=",0,"!< scientific ratemeters on plane Z as derived from data (normalized graph)");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraphErrors),-1,-1,2,"gRMX3913=",0,"!< scientific ratemeters on plane X as derived from 39.13 packets (normalized graph)");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraphErrors),-1,-1,2,"gRMZ3913=",0,"!< scientific ratemeters on plane Z as derived from 39.13 packets(normalized graph)");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraphErrors),-1,-1,2,"gRMXR=",0,"!< scientific ratemeters on plane X as derived from reconstructed energy ");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraphErrors),-1,-1,2,"gRMZR=",0,"!< scientific ratemeters on plane Z as derived from  reconstructed energy ");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"totDT=",0,"!< global time difference between every successive event");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH2F),-1,-1,2,"barcorr=",0,"!< bar[i],bar[i+1] 2D histogram (for spurious correlations)");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH2F),-1,-1,2,"barcorrLowDT=",0,"!< bar[i],bar[i+1] 2D histogram for delta_t<20 us (for spurious correlations)");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"totCR=",0,"!< total MCAL count rate");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"totMult=",0,"!< total MCAL multiplicity");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"totE=",0,"!< total MCAL energy spectrum");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH2F),-1,-1,2,"hX=",0,"!< X plane events distribution");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH2F),-1,-1,2,"hZ=",0,"!< Z plane events distribution");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hSubMS=",0,"!< Sub-millisecond trigger distribution according to data");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraphErrors),-1,-1,2,"gCRX=",0,"!< count rate on plane X");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraphErrors),-1,-1,2,"gCRZ=",0,"!< count rate on plane Z");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraphErrors),-1,-1,2,"gMultX=",0,"!< multiplicity ratio distribution on plane X");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraphErrors),-1,-1,2,"gMultZ=",0,"!< multiplicity ratio distribution on plane Z");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rawHisto=",0,"!< main collection of raw histograms");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TFile),-1,-1,2,"fh=",0,"!< root histograms file pointer");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_TString),-1,-1,2,"roothistopath=",0,"!< Path to ROOT histogram file");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"prtime[30]=",0,"!< previous events time (for each bar) for delta_t calculations");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"prt=",0,"!< previous event time for global delta_t calculations");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"prmult=",0,"!< previous event multiplicity");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"prbar=",0,"!< previous event bar address (meaningful only if prmult==1)");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nlowDT=",0,"!< Number of consecutive events on the same bar with DT<10 us");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"firstlowDT=",0,"!< Event number of the first \"impossible\" event (needed for shift correction)");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"lowDTti=",0,"!< Time (s) of the first \"impossible\" event");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"lowDTtf=",0,"!< Time (s) of the last \"impossible\" event");
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"Eband[11]=",0,"!< Default center of scientific ratemeters energy bands	");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"EbandUL[11]=",0,"!< Default upper limit of scientific ratemeters energy bands	");
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"Eerr[11]=",0,"!< Default half width of scientific ratemeters energy bands");
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"gf=",0,"!< Gain factor for GRID scientific ratemeters calculation");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVFileTE */
static void G__setup_memvarMCVFileTE(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFileTE));
   { MCVFileTE *p; p=(MCVFileTE*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVFilePKP */
static void G__setup_memvarMCVFilePKP(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP));
   { MCVFilePKP *p; p=(MCVFilePKP*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVStdAnalysis */
static void G__setup_memvarMCVStdAnalysis(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis));
   { MCVStdAnalysis *p; p=(MCVStdAnalysis*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rawHisto=",0,"!< Pointer to the global collection of histograms");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo),-1,-1,2,"info=",0,"!< Information on current run");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TEnv),-1,-1,2,"conf=",0,"!< Pointer to configuration file");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TCanvas),-1,-1,2,"c1=",0,"!< Pointer to 1st canvas for graphic output");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TCanvas),-1,-1,2,"c2=",0,"!< Pointer to 2nd canvas for graphic output");
   G__memvar_setup((void*)NULL,69,0,0,-1,-1,-1,2,"fout=",0,"!< Pointer to output file");
   G__memvar_setup((void*)NULL,69,0,0,-1,-1,-1,2,"fref=",0,"!< Pointer to reference file");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"status=",0,"!< Analysis status (-1 means: analysis not yet completed)");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TString),-1,-1,2,"refname=",0,"!< Pointer to reference file name");
   G__memvar_setup((void*)NULL,103,0,0,-1,-1,-1,2,"outofspec[60]=",0,"!< TRUE if the corresponding bar/PD is out of spec");
   G__memvar_setup((void*)NULL,107,0,0,-1,-1,-1,2,"barmask=",0,"!< Bitmask to check whether to operate on bar i or not");
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVGridOffset */
static void G__setup_memvarMCVGridOffset(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVGridOffset));
   { MCVGridOffset *p; p=(MCVGridOffset*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"groff[60]=",0,"!< Grid offset center (from fit)");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"grsig[60]=",0,"!< Grid offset sigma (from fit)");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"gramp[60]=",0,"!< Grid offset amplitude (from fit)");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"refoff[60]=",0,"!< Grid reference offset center (from file)");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"refsig[60]=",0,"!< Grid reference offset sigma (from file)");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nextraoff=",0,"!< Number of PDs with offset out of specifications");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nextrasig=",0,"!< Number of PDs with sigma out of specifications");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"maxoffdev=",0,"!< Maximum allowed offset deviation from reference (ch)");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"maxsigdev=",0,"!< Maximum allowed sigma deviation from reference (%)");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TF1),-1,-1,2,"peak=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"avgXAdoff=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"avgXAdsig=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"avgXBdoff=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"avgXBdsig=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"avgZAdoff=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"avgZAdsig=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"avgZBdoff=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"avgZBdsig=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVCountRate */
static void G__setup_memvarMCVCountRate(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVCountRate));
   { MCVCountRate *p; p=(MCVCountRate*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"crx=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"sigx=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"crz=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"sigz=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"drmax=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"refrun=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"maxpoisdev=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nextra=",0,"!< Number of bars with exceeding count rate variation");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"npois=",0,"!< Number of bars with exceeding ratio sigma^2/rate");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"refcr[30]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"refsig[30]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"dr[30]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVRetriggering */
static void G__setup_memvarMCVRetriggering(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVRetriggering));
   { MCVRetriggering *p; p=(MCVRetriggering*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"totevts[30]=",0,"!< Total number of events / bar");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"avgCR[30]=",0,"!< Average count rate per bar (evt/s)");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"tdead[30]=",0,"!< Estimated dead time (us) per bar");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"tfirst[30]=",0,"!< First non-zero delta_t (must be ~equal to dead time)");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"tmax=",0,"!< Maximum time for retriggering calculations");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nretriggering=",0,"!< Number of bars showing retriggering");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nlowdeadtime=",0,"!< Number of bars with suspect low dead time");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"maxfrac=",0,"!< Maximum allowed excess fraction of counts");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"nsigma=",0,"!< Maximum allowed significance (sigma) of counts excess");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"mindt=",0,"!< Minimum allowed dead time");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"extracnts[30]=",0,"!< Excess of counts");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"extrafrac[30]=",0,"!< Excess of counts normalized to total events");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"statsig[30]=",0,"!< Statistical significance (sigma) of counts excess");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rDT=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rCR=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rPDA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TF1),-1,-1,2,"fdt=",0,"!< Exponential fit to delta_time histo");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVGlobalRetriggering */
static void G__setup_memvarMCVGlobalRetriggering(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVGlobalRetriggering));
   { MCVGlobalRetriggering *p; p=(MCVGlobalRetriggering*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"mu=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"tmax=",0,"!< Maximum time (us) for retriggering calculations");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"maxfrac=",0,"!< Maximum allowed excess fraction of counts");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"fitlow=",0,"!< Lower time limit (us) for exponential fitting");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"fithi=",0,"!< Upper time limit (us) for exponential fitting");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"extracnts=",0,"!< Excess of counts");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"extrafrac=",0,"!< Excess of counts normalized to total events");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"par[2]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"c0=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"e0=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hDT=",0,"!< Global DT histogram");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TF1),-1,-1,2,"fdt=",0,"!< Exponential fit to delta_time histo");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVSciRM */
static void G__setup_memvarMCVSciRM(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSciRM));
   { MCVSciRM *p; p=(MCVSciRM*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraphErrors),-1,-1,2,"grmX=",0,"!< Pointer to TGraph with calculated ratemeters on plane X");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraphErrors),-1,-1,2,"grmZ=",0,"!< Pointer to TGraph with calculated ratemeters on plane Z");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraphErrors),-1,-1,2,"grmX3913=",0,"!< Pointer to TGraph with RM coming from 39.13 packet on plane X");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraphErrors),-1,-1,2,"grmZ3913=",0,"!< Pointer to TGraph with RM coming from 39.13 packet on plane Z");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hX=",0,"!< scientific ratemeters on plane X as derived from data");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hZ=",0,"!< scientific ratemeters on plane Z as derived from data");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hXR=",0,"!< scientific ratemeters on plane X as derived from reconstructed energy");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hZR=",0,"!< scientific ratemeters on plane Z as derived from reconstructed energy");
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"E=",0,"!< Array of RM energy bands center");
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"E_err=",0,"!< Array of RM energy bands half width");
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"rmX3913=",0,"!< Array of 39.13 RM on plane X");
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"rmX3913_err=",0,"!< Array of 39.13 RM sigma on plane X");
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"rmZ3913=",0,"!< Array of 39.13 RM on plane Z");
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"rmZ3913_err=",0,"!< Array of 39.13 RM sigma on plane Z");
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"rmX=",0,"!< Array of calculated RM on plane X");
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"rmX_err=",0,"!< Array of calculated RM sigma on plane X");
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"rmZ=",0,"!< Array of calculated RM on plane Z");
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"rmZ_err=",0,"!< Array of calculated RM sigma on plane Z");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"refE[11]=",0,"!< Array of reference energy bands center");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"refE_err[11]=",0,"!< Array of reference energy bands half width");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"refX[11]=",0,"!< Array of reference RM on plane X");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"refX_err[11]=",0,"!< Array of reference RM on sigma plane X");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"refZ[11]=",0,"!< Array of reference RM on plane Z");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"refZ_err[11]=",0,"!< Array of reference RM on sigma plane Z");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"refrun=",0,"!< Reference run-id");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"nsigma=",0,"!< Maximum allowed deviation from reference (#sigma) before issuing a warning flag");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"dev1X[11]=",0,"!< Array of deviations (#sigma) of calculated from 39.13 RM on plane X");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"dev1Z[11]=",0,"!< Array of deviations (#sigma) of calculated from 39.13 RM on plane Z");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"dev2X[11]=",0,"!< Array of deviations (#sigma) of 39.13 from reference RM on plane X");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"dev2Z[11]=",0,"!< Array of deviations (#sigma) of 39.13 from reference RM on plane Z");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nout1X=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nout1Z=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nout2X=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nout2Z=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVFitPeak */
static void G__setup_memvarMCVFitPeak(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFitPeak));
   { MCVFitPeak *p; p=(MCVFitPeak*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"aux=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"Et=",0,"!< Target energy (MeV) of the peak");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"pc[30]=",0,"!< Fit peak center");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"ps[30]=",0,"!< Fit peak sigma");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"pa[30]=",0,"!< Fit peak amplitude");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"pr[30]=",0,"!< Peak integral counts");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"rki2[30]=",0,"!< Fit reduced Ki^2");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"Ei=",0,"!< Current peak energy (MeV, from histogram)");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"dEhi=",0,"!< Upper delta_E");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"dElo=",0,"!< Lowed delta_E");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"ibin=",0,"!< Current peak bin");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"isEarray=",0,"!< 1 if the passed TObjArray is the energy array, 0 otherwise");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVBurstOffset */
static void G__setup_memvarMCVBurstOffset(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBurstOffset));
   { MCVBurstOffset *p; p=(MCVBurstOffset*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"pc[30]=",0,"!< Fit peak center");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"ps[30]=",0,"!< Fit peak sigma");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"pa[30]=",0,"!< Fit peak amplitude");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"offdev[30]=",0,"!< Offset deviation");
   G__memvar_setup((void*)NULL,103,0,0,-1,-1,-1,2,"pdB=",0,"!< 0= work on PD-A; 1= work on PD-B");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"maxoffdev=",0,"!< Maximum allowed offset deviation before issuing an OUT OF SPEC flag");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nextraoff=",0,"!< Number of PDs with offset out of specifications");
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"refoff=",0,"!< Pointer to reference offset array ");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVElectricalCalib */
static void G__setup_memvarMCVElectricalCalib(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVElectricalCalib));
   { MCVElectricalCalib *p; p=(MCVElectricalCalib*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"pnum=",0,"!< Number of peaks expected");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"thr=",0,"!< Threshold (ADC channels) above offset to start the peak serch");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"p1amp[60]=",0,"current peak 1");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"p1cen[60]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"p1sig[60]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"p1nevt[60]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"p2amp[60]=",0,"current peak 2");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"p2cen[60]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"p2sig[60]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"p2nevt[60]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"r1cen[60]=",0,"reference peak 1");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"r1sig[60]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"r2cen[60]=",0,"reference peak 2");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"r2sig[60]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"nextraoff1=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"nextrasig1=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"nextraoff2=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"nextrasig2=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nminevt1=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nminevt2=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"maxoffdev=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"maxsigdev=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"minevents=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"refrun=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TF1),-1,-1,2,"peak=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TF1),-1,-1,2,"peak2=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVEnergyThreshold */
static void G__setup_memvarMCVEnergyThreshold(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVEnergyThreshold));
   { MCVEnergyThreshold *p; p=(MCVEnergyThreshold*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"th50[30]=",0,"!< threshold level at 50% of the background maximum");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"th90[30]=",0,"!< threshold level at 90% of the background maximum");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"ref50[30]=",0,"!< reference threshold level at 50% of the background maximum");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"ref90[30]=",0,"!< reference threshold level at 90% of the background maximum");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"refrun=",0,"!< reference run");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"maxdev=",0,"!< maximum allowed deviation from reference (%)");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nout50=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nout90=",0,"!< number of bars with energy threshold out of specifications");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVGridEnergyCal */
static void G__setup_memvarMCVGridEnergyCal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVGridEnergyCal));
   { MCVGridEnergyCal *p; p=(MCVGridEnergyCal*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"mpv[30]=",0,"!< Most Probable Value (MeV) of the muon Landau peak");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"sig[30]=",0,"!< Sigma (MeV) of the muon Landau peak");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"amp[30]=",0,"!< Integral of the muon Landau peak normalized to effective time (evt/s)");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"mE[30]=",0,"!< Mean Energy loss (MeV) obtained integrating Landau distribution");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"refmpv[30]=",0,"!< Reference MPV (MeV) of the muon Landau peak");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"refsig[30]=",0,"!< Reference Sigma (MeV) of the muon Landau peak");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"refamp[30]=",0,"!< Reference Integral of the muon Landau peak (evt/s)");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"meanmpv=",0,"!< Average MPV (MeV) over all MCAL bars");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"meanE=",0,"!< Average mean energy loss (MeV) over all MCAL bars");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"noutmpv=",0,"!< Number of bars with MPV out of specification");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"noutsig=",0,"!< Number of bars with sigma out of specification");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"noutamp=",0,"!< Number of bars with rate out of specification");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"maxmpvdev=",0,"!< Maximum allowed deviation (%) in MPV from reference");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"maxsigdev=",0,"!< Maximum allowed deviation (%) in Landau sigma from reference");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"maxampdev=",0,"!< Maximum allowed deviation (%) in rate (evt/s) from reference");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"refrun=",0,"!< Reference run for data comparison");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVBarCorrelation */
static void G__setup_memvarMCVBarCorrelation(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBarCorrelation));
   { MCVBarCorrelation *p; p=(MCVBarCorrelation*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"maxiter=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"maxsigma=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"avgbc=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"avgbclow=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"stdbc=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"stdbclow=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVBkgSubtraction */
static void G__setup_memvarMCVBkgSubtraction(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBkgSubtraction));
   { MCVBkgSubtraction *p; p=(MCVBkgSubtraction*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_TString),-1,-1,2,"refname=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_TString),-1,-1,2,"simname=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TFile),-1,-1,2,"fbkg=",0,"!< Background reference file pointer");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TFile),-1,-1,2,"fsim=",0,"!< Simulation reference file pointer");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hstotE=",0,"!< Background subtracted total energy spectrum");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"asrawE=",0,"!< Background subtracted single bars energy spectrum array");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"abkgrawE=",0,"!< Background single bars energy spectrum array");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"arawE=",0,"!< Current measure single bars energy spectrum array");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"asimrawE=",0,"!< Simulation single bars energy spectrum array");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"asim=",0,"!< Simulation histogram array");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hsimtotE=",0,"!< Simulation total energy spectrum");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH2F),-1,-1,2,"hsX=",0,"!< Background subtracted plane X raw image");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH2F),-1,-1,2,"hsZ=",0,"!< Background subtracted plane Z raw image");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"epeak=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"simCompare=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"pc[30]=",0,"!< Fit peak center");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"ps[30]=",0,"!< Fit peak sigma");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"pr[30]=",0,"!< Peak integral counts");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"pcsim[30]=",0,"!< Fit peak center");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"pssim[30]=",0,"!< Fit peak sigma");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"prsim[30]=",0,"!< Peak integral counts");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"pctot=",0,"!< Fit peak center (bkg subtracted total spectrum)");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"pstot=",0,"!< Fit peak sigma (bkg subtracted total spectrum)");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"prtot=",0,"!< Peak integral counts (bkg subtracted total spectrum)");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"pcsimtot=",0,"!< Fit peak center (simulation total spectrum)");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"pssimtot=",0,"!< Fit peak sigma (simulation total spectrum)");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"prsimtot=",0,"!< Peak integral counts (simulation total spectrum)");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVBurstLandauFit */
static void G__setup_memvarMCVBurstLandauFit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBurstLandauFit));
   { MCVBurstLandauFit *p; p=(MCVBurstLandauFit*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"mpv[30]=",0,"!< Most Probable Value (MeV) of the muon Landau peak");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"sig[30]=",0,"!< Sigma (MeV) of the muon Landau peak");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"amp[30]=",0,"!< Integral of the muon Landau peak normalized to effective time (evt/s)");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"mE[30]=",0,"!< Mean Energy loss (MeV) obtained integrating Landau distribution");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"refmpv[30]=",0,"!< Reference MPV (MeV) of the muon Landau peak");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"refsig[30]=",0,"!< Reference Sigma (MeV) of the muon Landau peak");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"refamp[30]=",0,"!< Reference Integral of the muon Landau peak (evt/s)");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"meanmpv=",0,"!< Average MPV (MeV) over all MCAL bars");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"meanE=",0,"!< Average mean energy loss (MeV) over all MCAL bars");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"noutmpv=",0,"!< Number of bars with MPV out of specification");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"noutsig=",0,"!< Number of bars with sigma out of specification");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"noutamp=",0,"!< Number of bars with rate out of specification");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"maxmpvdev=",0,"!< Maximum allowed deviation (%) in MPV from reference");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"maxsigdev=",0,"!< Maximum allowed deviation (%) in Landau sigma from reference");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"maxampdev=",0,"!< Maximum allowed deviation (%) in rate (evt/s) from reference");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"refrun=",0,"!< Reference run for data comparison");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVRawMonitor */
static void G__setup_memvarMCVRawMonitor(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVRawMonitor));
   { MCVRawMonitor *p; p=(MCVRawMonitor*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),-1,-1,2,"fFrame1=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),-1,-1,2,"fF0=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),-1,-1,2,"fF1=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),-1,-1,2,"fF2=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),-1,-1,2,"fF3=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),-1,-1,2,"fF4=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),-1,-1,2,"fF5=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),-1,-1,2,"fF6=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),-1,-1,2,"fF7=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),-1,-1,2,"fF8=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),-1,-1,2,"fF9=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),-1,-1,2,"fF10=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGButton),-1,-1,2,"fOkButton=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGTab),-1,-1,2,"fTab=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGLayoutHints),-1,-1,2,"fL1=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGLayoutHints),-1,-1,2,"fL2=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGLayoutHints),-1,-1,2,"fL3=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGLayoutHints),-1,-1,2,"fL4=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGLayoutHints),-1,-1,2,"fL5=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGLayoutHints),-1,-1,2,"fMenuBarItemLayout=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGLayoutHints),-1,-1,2,"fMenuBarLayout=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TList),-1,-1,2,"fCleanup=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TRootEmbeddedCanvas),-1,-1,2,"fEc0=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TRootEmbeddedCanvas),-1,-1,2,"fEc1=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TRootEmbeddedCanvas),-1,-1,2,"fEc2=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TRootEmbeddedCanvas),-1,-1,2,"fEc3=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TRootEmbeddedCanvas),-1,-1,2,"fEc4=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TRootEmbeddedCanvas),-1,-1,2,"fEc5=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TRootEmbeddedCanvas),-1,-1,2,"fEc6=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TRootEmbeddedCanvas),-1,-1,2,"fEc7=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TRootEmbeddedCanvas),-1,-1,2,"fEc8=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TRootEmbeddedCanvas),-1,-1,2,"fEc9=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TRootEmbeddedCanvas),-1,-1,2,"fEc10=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rPDA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rPDB=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"r2D=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rPos=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rE=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rCR=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rCRDist=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rDT=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rMult=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rSciRM3913=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rawHisto=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGNumberEntry),-1,-1,2,"fMaxA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGNumberEntry),-1,-1,2,"fMinA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGGroupFrame),-1,-1,2,"fFitFrame=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGTextButton),-1,-1,2,"fGetLimitsA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGLabel),-1,-1,2,"fMinLabelA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGLabel),-1,-1,2,"fMaxLabelA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGTextButton),-1,-1,2,"fFitA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGDockableFrame),-1,-1,2,"fMenuDock=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGPopupMenu),-1,-1,2,"fMenuAll=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGPopupMenu),-1,-1,2,"fMenuBurst=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGPopupMenu),-1,-1,2,"fMenuGrid=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGPopupMenu),-1,-1,2,"fMenuCalib=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGPopupMenu),-1,-1,2,"fMenuEdit=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGPopupMenu),-1,-1,2,"fMenuFile=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGMenuBar),-1,-1,2,"fMenuBar=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TEnv),-1,-1,2,"conf=",0,"!<  Current configuration file");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo),-1,-1,2,"fileInfo=",0,"!<  Pointer to run info");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"dAlo=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"dAhi=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"dBlo=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"dBhi=",0,"!< boundaries for 2D graph plot");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"par[6]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"curbar=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"redKi2=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVBurstOffset),-1,-1,2,"anBurstOffset=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVBurstOffset),-1,-1,2,"anBurstOffset2=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVFitPeak),-1,-1,2,"anFitPeak=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVFitPeak),-1,-1,2,"anFitPeak2=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVFitPeak),-1,-1,2,"anFitPeak3=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVGridOffset),-1,-1,2,"anGridOffset=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVElectricalCalib),-1,-1,2,"anElectricalCalib=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVEnergyThreshold),-1,-1,2,"anEnergyThreshold=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVGridEnergyCal),-1,-1,2,"anGridEnergyCal=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVBurstLandauFit),-1,-1,2,"anBurstLandauFit=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVAnalysis */
static void G__setup_memvarMCVAnalysis(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVAnalysis));
   { MCVAnalysis *p; p=(MCVAnalysis*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,2,"lmaxarg1=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,2,"lmaxarg2=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,2,"lminarg1=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,2,"lminarg2=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"sqrarg=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"adclim=",0,"!< Limit (relative to offset) for data selection for Lomb calculations");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCALevt),-1,-1,2,"currevt=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo),-1,-1,2,"info=",0,"!< Object containing all the relevant file information");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TTree),-1,-1,2,"tdata=",0,"!< Pointer to the data tree");
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,2,"nentries=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"ofac=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"hifac=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,70,0,0,-1,-1,-1,2,"wk1=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,70,0,0,-1,-1,-1,2,"wk2=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,70,0,0,-1,-1,-1,2,"time=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,70,0,0,-1,-1,-1,2,"y=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,107,0,0,-1,-1,-1,2,"nout=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,107,0,0,-1,-1,-1,2,"jmax=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"prob=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nevt=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"maxFreq=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraph),-1,-1,2,"gLomb=",0,"!< Pointer to the Lomb Normalized periodogram");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH2F),-1,-1,2,"hcorr=",0,"!< Pointer to the correlation matrix");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVBarMonitor */
static void G__setup_memvarMCVBarMonitor(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBarMonitor));
   { MCVBarMonitor *p; p=(MCVBarMonitor*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVSelection */
static void G__setup_memvarMCVSelection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSelection));
   { MCVSelection *p; p=(MCVSelection*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nbars)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nbars=",0,"number of selected bars");
   G__memvar_setup((void*)((long)(&p->bars)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"bars[30]=",0,"bar numbers ");
   G__memvar_setup((void*)((long)(&p->minA)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"minA=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxA)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"maxA=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minB)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"minB=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxB)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"maxB=",0,"minimum and maximum PDs PHA limits");
   G__memvar_setup((void*)((long)(&p->minMult)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"minMult=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxMult)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"maxMult=",0,"minimum and maximum bar multiplicity limits");
   G__memvar_setup((void*)((long)(&p->minPos)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"minPos=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxPos)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"maxPos=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minE)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"minE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxE)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"maxE=",0,"minimum and maximum position and energy boundaries");
   G__memvar_setup((void*)((long)(&p->minTime)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"minTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxTime)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"maxTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->saveTracksFlg)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"saveTracksFlg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdAEnable)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"pdAEnable=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdBEnable)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"pdBEnable=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->multEnable)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"multEnable=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->posEnable)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"posEnable=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->energyEnable)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"energyEnable=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timeEnable)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"timeEnable=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->relToOffset)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"relToOffset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isBarStrong)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"isBarStrong=",0,"!< TRUE if exclusive condition on bars selected has to be applied");
   G__memvar_setup((void*)((long)(&p->isPosStrong)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"isPosStrong=",0,"!< TRUE if exclusive condition on position has to be applied");
   G__memvar_setup((void*)((long)(&p->isEStrong)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"isEStrong=",0,"!< TRUE if exclusive condition on energy has to be applied");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVTree */
static void G__setup_memvarMCVTree(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVTree));
   { MCVTree *p; p=(MCVTree*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TTree),-1,-1,2,"indata=",0,"!< Input dataset");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TTree),-1,-1,2,"outdata=",0,"!< Output dataset (selected or modified data)");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"inhisto=",0,"!< Input dataset histogram collection");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TEnv),-1,-1,2,"conf=",0,"!< Pointer to configuration file");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo),-1,-1,2,"ininfo=",0,"!< Pointer to information on input dataset");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo),-1,-1,2,"outinfo=",0,"!< Information on output dataset");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCALevt),-1,-1,2,"inevt=",0,"!< Input event");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"inevents=",0,"!< Initial number of events");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"outevents=",0,"!< Output number of events");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_TString),-1,-1,2,"infoname=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,99,0,0,-1,-1,-1,2,"outdataname[100]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TFile),-1,-1,2,"fp=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TFile),-1,-1,2,"fh=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVSelection),-1,-1,2,"sel=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVSelectionGUI */
static void G__setup_memvarMCVSelectionGUI(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSelectionGUI));
   { MCVSelectionGUI *p; p=(MCVSelectionGUI*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGLayoutHints),-1,-1,4,"fL1=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGLayoutHints),-1,-1,4,"fL2=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGLayoutHints),-1,-1,4,"fL3=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGLayoutHints),-1,-1,4,"fL4=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGLayoutHints),-1,-1,4,"fL5=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,4,"fChkArr=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,4,"fChkCoinc=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,4,"fGroupArr=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,4,"detHisto=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,4,"rawHisto=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,4,"selHisto=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,4,"hPDA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,4,"hPDB=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,4,"hPos=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,4,"hE=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,4,"hCR=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH2F),-1,-1,4,"h2D=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGGroupFrame),-1,-1,4,"fF0=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGGroupFrame),-1,-1,4,"fFCoinc=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGGroupFrame),-1,-1,4,"fFPDA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGGroupFrame),-1,-1,4,"fFStrongFrame=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),-1,-1,4,"fFrame1=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),-1,-1,4,"fF1=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),-1,-1,4,"fF2=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),-1,-1,4,"fFCoinc1=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),-1,-1,4,"fFCoinc2=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),-1,-1,4,"fFButtons=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),-1,-1,4,"fFCommands=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame),-1,-1,4,"fFData=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGButton),-1,-1,4,"fOkButton=",0,"*fLoadButton, *fSaveButton; ");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGButton),-1,-1,4,"fZeroSupButton=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGButton),-1,-1,4,"fApplyButton=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGTab),-1,-1,4,"fTab=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCheckButton),-1,-1,4,"fRelToOffset=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCheckButton),-1,-1,4,"fStrongBar=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCheckButton),-1,-1,4,"fStrongPos=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGCheckButton),-1,-1,4,"fStrongE=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,67,0,5,-1,-1,-2,4,"groupName[6]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,1,-1,-1,-2,4,"minval[6]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,1,-1,-1,-2,4,"maxval[6]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,1,-1,-1,-2,4,"format[6]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,1,-1,-1,-2,4,"groupButtonNumber=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,1,-1,-1,-2,4,"nobjects=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,99,0,0,-1,-1,-1,4,"command[50]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TTree),-1,-1,4,"indata=",0,"!< Input data");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,4,"inhisto=",0,"!< Input dataset histogram collection");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo),-1,-1,4,"ininfo=",0,"!< Pointer to information on input dataset");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVSelection),-1,-1,4,"sel=",0,"!< Selection");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVTree),-1,-1,4,"selector=",0,"!< Pointer to object that performs selection");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,4,"nsel=",0,"!< Number of current selection");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVHisto3908 */
static void G__setup_memvarMCVHisto3908(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVHisto3908));
   { MCVHisto3908 *p; p=(MCVHisto3908*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,105,0,1,-1,-1,-2,2,"nsit=",0,"! number of  sits = 2 hard+4 soft");
   G__memvar_setup((void*)NULL,105,0,1,-1,-1,-2,2,"ngeom=",0,"! num of geom.  parts of the detector   ");
   G__memvar_setup((void*)NULL,105,0,1,-1,-1,-2,2,"nEsegm=",0,"! num of geom.  segmented energy ranges ");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"sitmsecs[6]=",0,"!");
   G__memvar_setup((void*)((long)(&p->rawEt)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,1,"rawEt=",0,"!< container class for E-t 2 dim bar events histograms  ");
   G__memvar_setup((void*)((long)(&p->rawbsr)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,1,"rawbsr=",0,"!< container class for bsr-time graph (9ch x 4 soft sits)   ");
   G__memvar_setup((void*)((long)(&p->rawbsr_ric)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,1,"rawbsr_ric=",0,"!< same for bsr-time histo (reconstructed from EVENTS))   ");
   G__memvar_setup((void*)((long)(&p->Et_mcal)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH2F),-1,-1,1,"Et_mcal=",0,"!< 2 dim E-t histograms for bars ");
   G__memvar_setup((void*)((long)(&p->gdr_E2_mcal)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraph),-1,-1,1,"gdr_E2_mcal[6]=",0,"!< MCAL plots for E2: unsegmented x 4 sits  ");
   G__memvar_setup((void*)((long)(&p->gdr_mcal)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraph),-1,-1,1,"gdr_mcal[2][4][6]=",0,"!< MCAL plots for E0,1 x 4 geom.segm. x 4 sits ");
   G__memvar_setup((void*)((long)(&p->gdr_E2_mcal_ric)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1I),-1,-1,1,"gdr_E2_mcal_ric[6]=",0,"!< MCAL histo for E2: unsegmented x 6 sits  ");
   G__memvar_setup((void*)((long)(&p->gdr_mcal_ric)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1I),-1,-1,1,"gdr_mcal_ric[2][4][6]=",0,"!< MCAL histo for E0,1 x 4 geom.segm. x 6 sits ");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"t0bsr=",0,"! primo t dei dati bsr ; i plot iniziano da t=0 ");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"t0bsr_ric=",0,"! primo t dei dati bsr_ric ; i plot iniziano da t=0 	");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"t0Et=",0,"! primo t dei dati E-t; i plot iniziano da t=0 ");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"pesohistEt=",0,"! weight of each event, to have correct z axix units");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"pesohistbsr=",0,"! weight of each event, to have correct z axix units");
   G__memvar_setup((void*)NULL,105,0,1,-1,-1,-2,4,"nummsec=",0,"! num of msec for E-t histo ( 1 minutes ) ");
   G__memvar_setup((void*)NULL,100,0,1,-1,-1,-2,4,"minsec=",0,"! E-t: t range: from 0 to 10 minutes ");
   G__memvar_setup((void*)NULL,100,0,1,-1,-1,-2,4,"maxsec=",0,"! step : 10 msec ");
   G__memvar_setup((void*)NULL,100,0,1,-1,-1,-2,4,"minsec_ric=",0,"! E-t: t range: from 0 to 10 minutes ");
   G__memvar_setup((void*)NULL,100,0,1,-1,-1,-2,4,"maxsec_ric=",0,"! step : 10 msec ");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,4,"numE=",0,"! num of E points ");
   G__memvar_setup((void*)NULL,100,0,1,-1,-1,-2,4,"stepE=",0,"! bin step: UNITS: MEV ");
   G__memvar_setup((void*)NULL,100,0,1,-1,-1,-2,4,"minE=",0,"! E-t: E range: from 0 to 100 Mev ");
   G__memvar_setup((void*)NULL,100,0,1,-1,-1,-2,4,"maxE=",0,"! ");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,4,"MCALElim0=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,4,"MCALElim1=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVBurst */
static void G__setup_memvarMCVBurst(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBurst));
   { MCVBurst *p; p=(MCVBurst*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->burstid)-(long)(p)),105,0,0,-1,-1,-1,1,"burstid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bstart)-(long)(p)),100,0,0,-1,-1,-1,1,"bstart=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bstop)-(long)(p)),100,0,0,-1,-1,-1,1,"bstop=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->inittime)-(long)(p)),100,0,0,-1,-1,-1,1,"inittime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nburstevents)-(long)(p)),105,0,0,-1,-1,-1,1,"nburstevents=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bsrsit)-(long)(p)),105,0,0,-1,-1,-1,1,"bsrsit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nume)-(long)(p)),105,0,0,-1,-1,-1,1,"nume=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numg)-(long)(p)),105,0,0,-1,-1,-1,1,"numg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->inipkt)-(long)(p)),105,0,0,-1,-1,-1,1,"inipkt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->finpkt)-(long)(p)),105,0,0,-1,-1,-1,1,"finpkt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bsr)-(long)(p)),105,0,0,-1,-1,-1,1,"bsr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ber)-(long)(p)),105,0,0,-1,-1,-1,1,"ber=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVFilePKP3908 */
static void G__setup_memvarMCVFilePKP3908(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP3908));
   { MCVFilePKP3908 *p; p=(MCVFilePKP3908*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->bsrinfo)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVbsrInfo),-1,-1,1,"bsrinfo=",0,"! for header specific to bsr data ");
   G__memvar_setup((void*)((long)(&p->currbsr)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCALbsr),-1,-1,1,"currbsr=",0,"!  struct holding current bsr data ");
   G__memvar_setup((void*)((long)(&p->currpkt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCALpkt),-1,-1,1,"currpkt=",0,"! struct holding curent packet data ");
   G__memvar_setup((void*)((long)(&p->pktnumb)-(long)(p)),105,0,0,-1,-1,-1,1,"pktnumb=",0,"! number of packets");
   G__memvar_setup((void*)((long)(&p->burstid)-(long)(p)),73,0,0,-1,-1,-1,1,"burstid=",0,"! ");
   G__memvar_setup((void*)((long)(&p->inittime)-(long)(p)),100,0,0,-1,-1,-1,1,"inittime=",0,"! first event time");
   G__memvar_setup((void*)((long)(&p->burstarray)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,1,"burstarray=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nburst)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nburst=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tdatabsr)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TTree),-1,-1,1,"tdatabsr=",0,"!< Pointer to the data tree");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVbsrMonitor */
static void G__setup_memvarMCVbsrMonitor(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor));
   { MCVbsrMonitor *p; p=(MCVbsrMonitor*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo),-1,-1,2,"fileInfo=",0,"!<  Pointer to run info");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TEnv),-1,-1,2,"conf=",0,"!<  Current configuration file");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rawbsr=",0,"!<  bsr graphs");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,99,0,0,-1,-1,-1,4,"titolo[50]=",0,"!< canvas title ");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TCanvas),-1,-1,4,"allmcal=",0,"!< canvas pointer ");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,4,"sitwinttime[6]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,1,-1,-1,-2,4,"nsitsw=",0,"! number of  sits = 2 hard+4 soft");
   G__memvar_setup((void*)NULL,105,0,1,-1,-1,-2,4,"firstsoftsitnum=",0,"! number of the first soft SIT ");
   G__memvar_setup((void*)NULL,105,0,1,-1,-1,-2,4,"ngeom=",0,"! num of geom.  parts of the detector   ");
   G__memvar_setup((void*)NULL,105,0,1,-1,-1,-2,4,"nEsegm=",0,"! num of geom.  segmented energy ranges ");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraph),-1,-1,4,"gdr_E2_mcal[6]=",0,"!< MCAL plots for E2: unsegmented x 4 sits  ");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraph),-1,-1,4,"gdr_mcal[2][4][6]=",0,"!< MCAL plots for E0,1 x 4 geom.segm. x 4 sits ");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraph),-1,-1,4,"gdr_sa[2][4][6]=",0,"!< SA   plots for E0,1 x 4 geom.segm. x 4 sits ");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH2F),-1,-1,4,"Et_mcal=",0,"!< 2 dim E-t histograms for bars ");
   }
   G__tag_memvar_reset();
}


   /* MCVbsrMonitor_ric */
static void G__setup_memvarMCVbsrMonitor_ric(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor_ric));
   { MCVbsrMonitor_ric *p; p=(MCVbsrMonitor_ric*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo),-1,-1,2,"fileInfo=",0,"!<  Pointer to run info");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TEnv),-1,-1,2,"conf=",0,"!<  Current configuration file");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"rawbsr_ric=",0,"!<  bsr graphs");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,2,"burstarray=",0,"!< burst info collection");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,99,0,0,-1,-1,-1,4,"titolo[50]=",0,"! canvas title ");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TCanvas),-1,-1,4,"allmcal=",0,"! canvas pointer ");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,4,"sitwinttime[6]=",0,"! number of  sits = 2 hard+4 soft");
   G__memvar_setup((void*)NULL,105,0,1,-1,-1,-2,4,"nsit=",0,"! number of  sits = 2 hard+4 soft");
   G__memvar_setup((void*)NULL,105,0,1,-1,-1,-2,4,"firstsoftsitnum=",0,"! number of the first soft SIT ");
   G__memvar_setup((void*)NULL,105,0,1,-1,-1,-2,4,"ngeom=",0,"! num of geom.  parts of the detector   ");
   G__memvar_setup((void*)NULL,105,0,1,-1,-1,-2,4,"nEsegm=",0,"! num of geom.  segmented energy ranges ");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,4,"nsigma=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1I),-1,-1,4,"gdr_E2_mcal[6]=",0,"!< MCAL histo for E2: unsegmented x 4 sits  ");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1I),-1,-1,4,"gdr_mcal[2][4][6]=",0,"!< MCAL histo for E0,1 x 4 geom.segm. x 4 sits ");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1I),-1,-1,4,"gdr_sa[2][4][6]=",0,"!< SA   histo for E0,1 x 4 geom.segm. x 4 sits ");
   }
   G__tag_memvar_reset();
}


   /* MCVAntiCoincidence */
static void G__setup_memvarMCVAntiCoincidence(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVAntiCoincidence));
   { MCVAntiCoincidence *p; p=(MCVAntiCoincidence*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"minbin=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"maxbin=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"herate=",0,"!< E > MIN_BIN*20keV rate (evt/s)");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"herateref=",0,"!< maximum reference rate");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVCalibration */
static void G__setup_memvarMCVCalibration(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVCalibration));
   { MCVCalibration *p; p=(MCVCalibration*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,4,"nhit[31][2]=",0,"[bar id][PD (0=A, 1=B)] static");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,4,"data[31][2][3][30]=",0,"[bar id][PD (0=A, 1=B)][x(cm), y(ch), y_err(ch)][point]");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,4,"y2[31][2][30]=",0,"second derivative array for spline interpolation: [bar id][PD (0=A, 1=B)][point]");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,4,"X=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,4,"Y=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,4,"dataK[31][2][2][30]=",0,"[bar id][A/B, B/A][x(cm), y][point]");
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,4,"y2K[31][2][30]=",0,"second derivative array for function K spline interpolation: [bar id][point]");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"u0A[30]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"u0B[30]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"alphaA[30]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"alphaB[30]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"oA[30]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"oB[30]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"param[12]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,4,"poserr[20]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,103,0,0,-1,-1,-1,4,"calib=",0,"TRUE if calibration data on current bar are availble, FALSE otherwise");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,4,"cbar=",0,"bar-id (0..29) of the current bar under calibration");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"cgainA=",0,"gain (ch/MeV) of the current bar under calibration, PD-A");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"cgainB=",0,"gain (ch/MeV) of the current bar under calibration, PD-B");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"calphaA=",0,"attenuation coefficient (cm^-1) of the current bar under calibration, PD-A");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"calphaB=",0,"attenuation coefficient (cm^-1) of the current bar under calibration, PD-B");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_TString),-1,-1,4,"calibName=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_TString),-1,-1,4,"XDatFile=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_TString),-1,-1,4,"ZDatFile=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_TString),-1,-1,4,"calFile=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TEnv),-1,-1,4,"stdconf=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TEnv),-1,-1,4,"conf=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,4,"hcpdA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,4,"hcpdB=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TObjArray),-1,-1,4,"hcBonA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVSubMS */
static void G__setup_memvarMCVSubMS(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSubMS));
   { MCVSubMS *p; p=(MCVSubMS*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hSubMS=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_subwin),-1,-1,2,"iniwin[4]=",0,"pointer to initial window");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_subwin),-1,-1,2,"finwin[4]=",0,"pointer to final window");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nwin[4]=",0,"number of open windows");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nthr[4]=",0,"threshold (>)");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"ntrg[4]=",0,"number of triggers");
   G__memvar_setup((void*)NULL,103,0,0,-1,-1,-1,2,"activewin[4]=",0,"TRUE if window is active");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"winduration[4]=",0,"window time duration");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"tprev[4]=",0,"previous trigger time (to account for 16 ms trigger verification interval)");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GRB */
static void G__setup_memvarGRB(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_GRB));
   { GRB *p; p=(GRB*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo),-1,-1,2,"info=",0,"dataset basic information");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TFile),-1,-1,2,"fi=",0,"input file");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1D),-1,-1,2,"hclc=",0,"custom light curve");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH2D),-1,-1,2,"h2clc=",0,"custom light curve, energy selected");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraphErrors),-1,-1,2,"ghr=",0,"graph for hardness ratio evaluation");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TStyle),-1,-1,2,"mcalstyle=",0,"default graphic style");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TTimeStamp),-1,-1,2,"epoch=",0,"reference date for TT time");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TTimeStamp),-1,-1,2,"tzero=",0,"reference date for TT time");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hEbkg=",0,"total MCAL energy spectrum (background)");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hEgrb=",0,"total MCAL energy spectrum (GRB)");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hLE=",0,"low energy counts for hardness ratio calculation");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hHE=",0,"high energy counts for hardness ratio calculation");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"thr=",0,"energy threshold for hardness ratio calculations");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nevents=",0,"number of events");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nbins=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"barsX=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"barsZ=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"tstart=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"tstop=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"t0=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"tbin=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"emin=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"emax=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"orbit=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"alertcode=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,2,"tsearch=",0,"delta-t around t0 to search for the peak");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"burstid=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nEbins=",0,"number of energy bins");
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"mcalEbin=",0,"boundaries of the energy bins");
   G__memvar_setup((void*)NULL,70,0,0,-1,-1,-1,2,"pha=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"bkg=",0,"background per bin");
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"ebkg=",0,"statistical error on background per bin");
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"fpeak=",0,"peak flux");
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"efpeak=",0,"error on peak flux");
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"tpeak=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"fluence=",0,"fluence in t90 time interval (counts)");
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"efluence=",0,"error on fluence in t90 time interval (counts)");
   G__memvar_setup((void*)NULL,73,0,0,-1,-1,-1,2,"binpeak=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"bkgLE=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"bkgHE=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"ebkgLE=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"ebkgHE=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"cbkg=",0,"background per bin");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"ecbkg=",0,"statistical error on background per bin");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"cfpeak=",0,"peak flux");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"ecfpeak=",0,"error on peak flux");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"ctpeak=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"cfluence=",0,"fluence in t90 time interval (counts)");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"ecfluence=",0,"error on fluence in t90 time interval (counts)");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"cbinpeak=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"i90lo=",0,"low index for t90 calculation");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"i90hi=",0,"high index for t90 calculation");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"i0=",0,"index corresponding to t0");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"hr=",0,"default hardness ratio");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"ehr=",0,"error on default hardness ratio");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"t90=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"et90=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"avgE=",0,"average GRB/VSB energy");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"maxE=",0,"average GRB/VSB energy");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"tbkgini=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"tbkgfin=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"tgrbini=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"tgrbfin=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"year=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"month=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"day=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"hour=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"min=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"sec=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GRB3908 */
static void G__setup_memvarGRB3908(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_GRB3908));
   { GRB3908 *p; p=(GRB3908*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_MCALevt),-1,-1,2,"inevt=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TTree),-1,-1,2,"data=",0,"GRB events data tree");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hlc[3][4][7]=",0,"default histogram light curves ");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hpoisson=",0,"events/bin histogram for pre-burst");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TCanvas),-1,-1,2,"cStdLE=",0,"default light curve: Low Energy");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TCanvas),-1,-1,2,"cStdME=",0,"default light curve: Medium Energy");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TCanvas),-1,-1,2,"cStdHE=",0,"default light curve: High Energy");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TCanvas),-1,-1,2,"cpXZ=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TCanvas),-1,-1,2,"cStdDiag=",0,"standard diagnostic Canvas	");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TCanvas),-1,-1,2,"cPosDiag=",0,"position distribution Canvas	");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TCanvas),-1,-1,2,"cVSBDiag=",0,"VSB diagnostic Canvas	");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TCanvas),-1,-1,2,"cTotal=",0,"complete diagnostic Canvas	");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hDTbkg=",0,"global time difference between every successive event (background)");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hDTgrb=",0,"global time difference between every successive event (GRB)");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH2F),-1,-1,2,"hbarcorr=",0,"bar[i],bar[i+1] 2D histogram (for spurious correlations)");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hMult=",0,"total MCAL multiplicity");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH3F),-1,-1,2,"hX=",0,"X plane events distribution");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH3F),-1,-1,2,"hZ=",0,"Z plane events distribution");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hbarsbkg=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TH1F),-1,-1,2,"hbarsgrb=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraph),-1,-1,2,"gbart=",0,"VSB bars vs t-t0");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TGraph),-1,-1,2,"gEt=",0,"VSB energy vs t-t0");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nbars[30]=",0,"bars occupation");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"cuboni[8]=",0,"spatial regions occupation");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"dt0=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nsubms=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"mint=",0,"minimum t-t0, diagnostic for the pre-burst problem on the 1-ms SIT");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GRB3913 */
static void G__setup_memvarGRB3913(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_GRB3913));
   { GRB3913 *p; p=(GRB3913*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"time=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"data=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"dataAC=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"dataEbin=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"ns=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"plane=",0,"0 = plane X, 1 = plane Z");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GRB3913XZ */
static void G__setup_memvarGRB3913XZ(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_GRB3913XZ));
   { GRB3913XZ *p; p=(GRB3913XZ*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TCanvas),-1,-1,2,"cpXZ=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"time=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"data=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"dataAC=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,-1,-1,2,"dataEbin=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"t90X=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"t90Z=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"ns=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_GRB3913),-1,-1,2,"pX=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_GRB3913),-1,-1,2,"pZ=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVFile3916 */
static void G__setup_memvarMCVFile3916(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFile3916));
   { MCVFile3916 *p; p=(MCVFile3916*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"status=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nfields=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,99,0,0,-1,-1,-1,2,"comment[100]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"contact=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"iX=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"iY=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"iZ=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"time=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"ephi=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"etheta=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,67,0,0,-1,-1,-1,2,"posvali=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,99,0,0,-1,-1,-1,2,"isRoot=",0,"1 if it's a valid root file");
   G__memvar_setup((void*)NULL,99,0,0,-1,-1,-1,2,"isFits=",0,"1 if it's a valid fits file");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TFile),-1,-1,2,"fi=",0,"input root file pointer");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TFile),-1,-1,2,"fo=",0,"output root file pointer");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nevents=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TTree),-1,-1,2,"tdata=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_gpsevt),-1,-1,2,"evt=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_TString),-1,-1,2,"filename=",0,"input file");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_TString),-1,-1,2,"outname=",0,"output file");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"a=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"b=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"f=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"e=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"e1=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"rad2deg=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"p=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"theta=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"N=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"mintime=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"maxtime=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nentries=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"verbose=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"eci=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"o1=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"o2=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"m=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCVFile3201 */
static void G__setup_memvarMCVFile3201(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFile3201));
   { MCVFile3201 *p; p=(MCVFile3201*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"status=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nfields=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,99,0,0,-1,-1,-1,2,"comment[100]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"contact=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,67,0,0,-1,-1,-1,2,"posvali=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,99,0,0,-1,-1,-1,2,"isRoot=",0,"1 if it's a valid root file");
   G__memvar_setup((void*)NULL,99,0,0,-1,-1,-1,2,"isFits=",0,"1 if it's a valid fits file");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TFile),-1,-1,2,"fi=",0,"input root file pointer");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TFile),-1,-1,2,"fo=",0,"output root file pointer");
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nevents=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"verbose=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"mintime=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"maxtime=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,2,"nentries=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TTree),-1,-1,2,"tdata=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_hkevt),-1,-1,2,"evt=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"time=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,67,0,0,-1,-1,-1,2,"orphase=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,67,0,0,-1,-1,-1,2,"plopmode=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,67,0,0,-1,-1,-1,2,"digitbit=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,67,0,0,-1,-1,-1,2,"rtmbit=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,67,0,0,-1,-1,-1,2,"zstatus=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"zvalue=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"sentgnd=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_TString),-1,-1,2,"filename=",0,"input file");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MCVDictLN_TString),-1,-1,2,"outname=",0,"output file");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MCVDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMCVDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMCVFileInfo(void) {
   /* MCVFileInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo));
   G__memfunc_setup("MCVFileInfo",1010,G__MCVDict_512_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintCalibrationParameters",2697,G__MCVDict_512_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintFileInfo",1305,G__MCVDict_512_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_512_0_4, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVFileInfo::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_512_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFileInfo::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_512_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVFileInfo::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_512_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVFileInfo::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_512_0_8, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_512_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_512_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_512_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_512_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFileInfo::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_512_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVFileInfo::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_512_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFileInfo::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_512_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVFileInfo::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVFileInfo", 1010, G__MCVDict_512_0_16, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo), -1, 0, 1, 1, 1, 0, "u 'MCVFileInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVFileInfo", 1136, G__MCVDict_512_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_512_0_18, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo), -1, 1, 1, 1, 1, 0, "u 'MCVFileInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVFile(void) {
   /* MCVFile */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFile));
   G__memfunc_setup("printerror",1111,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - - 0 - -", "!< Print out cfitsio error messages and exit program", (void*) NULL, 0);
   G__memfunc_setup("BuildPolinomialFunctions",2493,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "!< Creates approximated polinomial functions for E and pos. recon.", (void*) NULL, 0);
   G__memfunc_setup("GetPolinomialFunctions",2285,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "!< Retrieve polinomial functions for E and pos. recon. (recmodel==2)", (void*) NULL, 0);
   G__memfunc_setup("CalculateEandPos",1592,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"i - - 0 - cmult i - - 0 - cbar "
"s - 'Short_t' 0 - pdA s - 'Short_t' 0 - pdB", "!< Calculate energy (MeV) and position (cm)", (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,(G__InterfaceMethod) NULL, 107, -1, -1, 0, 1, 1, 2, 0, "C - - 0 - timestring", "!< Return time in seconds since 1st january of selected year.", (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "!< Class initialization", (void*) NULL, 0);
   G__memfunc_setup("InitializeSimulation",2103,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "!< Class initialization for GAMS+DHSim lv1 data", (void*) NULL, 0);
   G__memfunc_setup("InitializeTrigTrack",1949,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "!< Class initialization for Trig & Track data", (void*) NULL, 0);
   G__memfunc_setup("LinearCorrection",1651,(G__InterfaceMethod) NULL, 102, -1, -1, 0, 2, 1, 2, 0, 
"i - - 0 - ibar f - - 0 - Ein", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadCalibrationParameters",2556,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "!< Load calibration parameters from configuration file", (void*) NULL, 0);
   G__memfunc_setup("LoadLinCorrParameters",2125,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "!< Load parameters for Energy linear correction", (void*) NULL, 0);
   G__memfunc_setup("OpenErrorFile",1308,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateFileInfo",1391,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "!< Writes file information in object of class MCVFileInfo", (void*) NULL, 0);
   G__memfunc_setup("MCVFile",614,G__MCVDict_517_0_14, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVFile), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVFile",614,G__MCVDict_517_0_15, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVFile), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateRootFile",1400,G__MCVDict_517_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< virtual function for ROOT file creation", (void*) NULL, 1);
   G__memfunc_setup("GetDataPath",1063,G__MCVDict_517_0_17, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFileInfo",1068,G__MCVDict_517_0_18, 85, G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsGrid",578,G__MCVDict_517_0_19, 103, -1, -1, 0, 0, 1, 1, 0, "", "!< returns TRUE if data are from the GRID branch", (void*) NULL, 0);
   G__memfunc_setup("IsPDHUData",871,G__MCVDict_517_0_20, 103, -1, -1, 0, 0, 1, 1, 0, "", "!< returns TRUE if data come from PDHU (OBSOLETE)", (void*) NULL, 0);
   G__memfunc_setup("IsPDHUFormat",1110,G__MCVDict_517_0_21, 103, -1, -1, 0, 0, 1, 1, 0, "", "!< returns TRUE if fits file is in PDHU lv1 format (OBSOLETE)", (void*) NULL, 0);
   G__memfunc_setup("PrintCalibrationParameters",2697,G__MCVDict_517_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< print out the calibration parameters used for energy calculation", (void*) NULL, 0);
   G__memfunc_setup("PrintFileInfo",1305,G__MCVDict_517_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< print out basic informations on the current file", (void*) NULL, 0);
   G__memfunc_setup("SetCalibrationFile",1812,G__MCVDict_517_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - -", "!< set a new calibration file and reload calibration parameters", (void*) NULL, 0);
   G__memfunc_setup("SetSeed",685,G__MCVDict_517_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - s", "!< set a new seed for the random number generator", (void*) NULL, 0);
   G__memfunc_setup("SetRootFileName",1489,G__MCVDict_517_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - s", "!< set the name of the output root file", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_517_0_27, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVFile::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_517_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFile::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_517_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVFile::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_517_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVFile::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_517_0_31, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_517_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_517_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_517_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_517_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFile::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_517_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVFile::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_517_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFile::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_517_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVFile::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVFile", 614, G__MCVDict_517_0_39, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVFile), -1, 0, 1, 1, 1, 0, "u 'MCVFile' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVFile", 740, G__MCVDict_517_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_517_0_41, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVFile), -1, 1, 1, 1, 1, 0, "u 'MCVFile' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVHisto(void) {
   /* MCVHisto */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVHisto));
   G__memfunc_setup("FillCountRateDistribution",2588,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "!< Fill count rate distribution histograms for each bar ", (void*) NULL, 0);
   G__memfunc_setup("FillGlobalHisto",1503,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - - 0 - pkttype d - 'Double_t' 0 - te", "!< Fill global histograms", (void*) NULL, 0);
   G__memfunc_setup("InitSciRMEnergyBand",1841,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResizeCountRateHisto",2062,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - - 0 - time", "!< Resize count rate histograms according to measurement duration", (void*) NULL, 0);
   G__memfunc_setup("MCVHisto",749,G__MCVDict_549_0_5, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVHisto), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVHisto",749,G__MCVDict_549_0_6, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVHisto), -1, 0, 1, 1, 1, 0, "U 'TObjArray' - 0 - inh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEffectiveTime",1600,G__MCVDict_549_0_7, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ibar", "!< Returns effective time calculated on bar ibar", (void*) NULL, 0);
   G__memfunc_setup("GetEffectiveTime",1600,G__MCVDict_549_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", "!< Returns effective time calculated on global CR histo", (void*) NULL, 0);
   G__memfunc_setup("GetHistoPath",1204,G__MCVDict_549_0_9, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillHisto",910,G__MCVDict_549_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MCALevt' - 0 - evt", "!< Fill histograms for the current event (0=OK; 1=timing misalignment)", (void*) NULL, 0);
   G__memfunc_setup("GetRawHisto",1105,G__MCVDict_549_0_11, 85, G__get_linked_tagnum(&G__MCVDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_549_0_12, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVHisto::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_549_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVHisto::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_549_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVHisto::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_549_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVHisto::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_549_0_16, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_549_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_549_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_549_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_549_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVHisto::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_549_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVHisto::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_549_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVHisto::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_549_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVHisto::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVHisto", 749, G__MCVDict_549_0_24, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVHisto), -1, 0, 1, 1, 1, 0, "u 'MCVHisto' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVHisto", 875, G__MCVDict_549_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_549_0_26, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVHisto), -1, 1, 1, 1, 1, 0, "u 'MCVHisto' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVFileTE(void) {
   /* MCVFileTE */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFileTE));
   G__memfunc_setup("MCVFileTE",767,G__MCVDict_550_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVFileTE), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVFileTE",767,G__MCVDict_550_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVFileTE), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildTimeArray",1406,G__MCVDict_550_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateRootFile",1400,G__MCVDict_550_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Implementation for ROOT file creation", (void*) NULL, 1);
   G__memfunc_setup("GetCountRate",1205,G__MCVDict_550_0_5, 68, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - tini d - - 0 - tstep "
"i - - 0 - nstep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCountRate",1205,G__MCVDict_550_0_6, 68, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - bar d - - 0 - tini "
"d - - 0 - tstep i - - 0 - nstep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessData",1113,G__MCVDict_550_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_550_0_8, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVFileTE::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_550_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFileTE::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_550_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVFileTE::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_550_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVFileTE::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_550_0_12, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_550_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_550_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_550_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_550_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFileTE::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_550_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVFileTE::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_550_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFileTE::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_550_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVFileTE::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVFileTE", 767, G__MCVDict_550_0_20, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVFileTE), -1, 0, 1, 1, 1, 0, "u 'MCVFileTE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVFileTE", 893, G__MCVDict_550_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_550_0_22, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVFileTE), -1, 1, 1, 1, 1, 0, "u 'MCVFileTE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVFilePKP(void) {
   /* MCVFilePKP */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP));
   G__memfunc_setup("MCVFilePKP",849,G__MCVDict_551_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVFilePKP",849,G__MCVDict_551_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateRootFile",1400,G__MCVDict_551_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Implementation for ROOT file creation", (void*) NULL, 1);
   G__memfunc_setup("Add3913SciRatemeters",1812,G__MCVDict_551_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", "!< Add Sci. RM standard histograms from 39.13 lv1 file", (void*) NULL, 0);
   G__memfunc_setup("Process3902Data",1319,G__MCVDict_551_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Process GRID physical calibration data (39.02 TM packet)", (void*) NULL, 0);
   G__memfunc_setup("Process3909Data",1326,G__MCVDict_551_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Process BURST data (39.09 or 39.08 TM packet)", (void*) NULL, 0);
   G__memfunc_setup("ProcessTrigTrackData",2020,G__MCVDict_551_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Process DAFNE tagged data (39.02 TM packet)", (void*) NULL, 0);
   G__memfunc_setup("PrintEvent",1039,G__MCVDict_551_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - -", "!< Print an event info", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_551_0_9, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVFilePKP::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_551_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFilePKP::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_551_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVFilePKP::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_551_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVFilePKP::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_551_0_13, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_551_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_551_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_551_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_551_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFilePKP::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_551_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVFilePKP::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_551_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFilePKP::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_551_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVFilePKP::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVFilePKP", 849, G__MCVDict_551_0_21, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP), -1, 0, 1, 1, 1, 0, "u 'MCVFilePKP' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVFilePKP", 975, G__MCVDict_551_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_551_0_23, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP), -1, 1, 1, 1, 1, 0, "u 'MCVFilePKP' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVStdAnalysis(void) {
   /* MCVStdAnalysis */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis));
   G__memfunc_setup("GetEffectiveTime",1600,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 0, 1, 2, 0, "", "!< Return effective time for all MCAL", (void*) NULL, 0);
   G__memfunc_setup("GetEffectiveTime",1600,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - ibar", "!< Return effective time for a bar", (void*) NULL, 0);
   G__memfunc_setup("LoadConf",774,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "!< Load standard configuration file. MANDATORY in constructors.", (void*) NULL, 0);
   G__memfunc_setup("MCVStdAnalysis",1365,G__MCVDict_821_0_4, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVStdAnalysis",1365,G__MCVDict_821_0_5, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis), -1, 0, 2, 1, 1, 0, 
"U 'TObjArray' - 0 - hc U 'MCVFileInfo' - 0 NULL in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__MCVDict_821_0_6, 105, -1, -1, 0, 0, 1, 1, 0, "", "!< Virtual method for calculations. Returns 0 if it's all OK", (void*) NULL, 1);
   G__memfunc_setup("CreateGraphErrors",1731,G__MCVDict_821_0_7, 85, G__get_linked_tagnum(&G__MCVDictLN_TGraphErrors), -1, 0, 1, 1, 1, 0, "C - - 0 - gname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateGraph",1094,G__MCVDict_821_0_8, 85, G__get_linked_tagnum(&G__MCVDictLN_TGraph), -1, 0, 1, 1, 1, 0, "C - - 0 - gname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsOK",342,G__MCVDict_821_0_9, 103, -1, -1, 0, 0, 1, 1, 0, "", "!< Return TRUE if the calculated values are conformal to expectations", (void*) NULL, 1);
   G__memfunc_setup("PrintComment",1248,G__MCVDict_821_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Print sinthetic comment on results", (void*) NULL, 1);
   G__memfunc_setup("PrintResults",1279,G__MCVDict_821_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Print calculation results", (void*) NULL, 1);
   G__memfunc_setup("SaveToFile",978,G__MCVDict_821_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Save calculation results to a text file", (void*) NULL, 1);
   G__memfunc_setup("SetBarMask",973,G__MCVDict_821_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "k - - 0 - bm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCanvases",1120,G__MCVDict_821_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TCanvas' - 0 - a1 U 'TCanvas' - 0 NULL a2", "!< Set pointer to canvases for graphic outputs", (void*) NULL, 0);
   G__memfunc_setup("SetFileInfo",1080,G__MCVDict_821_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MCVFileInfo' - 0 - in", "!< Set pointer to file info", (void*) NULL, 0);
   G__memfunc_setup("SetHistoCollection",1855,G__MCVDict_821_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObjArray' - 0 - hc", "!< Set pointer to the histogram collection", (void*) NULL, 0);
   G__memfunc_setup("UpdateGlobalFile",1588,G__MCVDict_821_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Update global file", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MCVDict_821_0_18, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVStdAnalysis::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_821_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVStdAnalysis::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_821_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVStdAnalysis::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_821_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVStdAnalysis::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_821_0_22, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_821_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_821_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_821_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_821_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVStdAnalysis::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_821_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVStdAnalysis::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_821_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVStdAnalysis::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_821_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVStdAnalysis::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVStdAnalysis", 1365, G__MCVDict_821_0_30, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis), -1, 0, 1, 1, 1, 0, "u 'MCVStdAnalysis' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVStdAnalysis", 1491, G__MCVDict_821_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_821_0_32, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis), -1, 1, 1, 1, 1, 0, "u 'MCVStdAnalysis' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVGridOffset(void) {
   /* MCVGridOffset */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVGridOffset));
   G__memfunc_setup("MCVGridOffset",1235,G__MCVDict_822_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVGridOffset), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVGridOffset",1235,G__MCVDict_822_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVGridOffset), -1, 0, 2, 1, 1, 0, 
"U 'TObjArray' - 0 - hc U 'MCVFileInfo' - 0 NULL in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__MCVDict_822_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", "!< Implementation for offset calculations. Returns 0 if it's all OK", (void*) NULL, 1);
   G__memfunc_setup("GetGroff",788,G__MCVDict_822_0_4, 70, -1, -1, 0, 0, 1, 1, 0, "", "!< Return calculated offset array (from fit)", (void*) NULL, 0);
   G__memfunc_setup("GetGrsig",796,G__MCVDict_822_0_5, 70, -1, -1, 0, 0, 1, 1, 0, "", "!< Return calculated sigma array (from fit)", (void*) NULL, 0);
   G__memfunc_setup("GetGramp",791,G__MCVDict_822_0_6, 70, -1, -1, 0, 0, 1, 1, 0, "", "!< Return calculated amplitude array (from fit)", (void*) NULL, 0);
   G__memfunc_setup("PrintResults",1279,G__MCVDict_822_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Print offset calculation results", (void*) NULL, 1);
   G__memfunc_setup("SaveToFile",978,G__MCVDict_822_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Save offset calculation results to a text file", (void*) NULL, 1);
   G__memfunc_setup("UpdateGlobalFile",1588,G__MCVDict_822_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UpdateCalibrationFile",2123,G__MCVDict_822_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_822_0_11, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVGridOffset::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_822_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVGridOffset::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_822_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVGridOffset::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_822_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVGridOffset::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_822_0_15, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_822_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_822_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_822_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_822_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVGridOffset::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_822_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVGridOffset::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_822_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVGridOffset::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_822_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVGridOffset::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVGridOffset", 1235, G__MCVDict_822_0_23, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVGridOffset), -1, 0, 1, 1, 1, 0, "u 'MCVGridOffset' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVGridOffset", 1361, G__MCVDict_822_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_822_0_25, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVGridOffset), -1, 1, 1, 1, 1, 0, "u 'MCVGridOffset' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVCountRate(void) {
   /* MCVCountRate */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVCountRate));
   G__memfunc_setup("CompareReferenceData",2000,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVCountRate",1147,G__MCVDict_823_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVCountRate), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVCountRate",1147,G__MCVDict_823_0_3, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVCountRate), -1, 0, 2, 1, 1, 0, 
"U 'TObjArray' - 0 - hc U 'MCVFileInfo' - 0 NULL in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__MCVDict_823_0_4, 105, -1, -1, 0, 0, 1, 1, 0, "", "!< Implementation for count rate calculations. Returns 0 if it's all OK", (void*) NULL, 1);
   G__memfunc_setup("PrintResults",1279,G__MCVDict_823_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Print caount rate calculation results", (void*) NULL, 1);
   G__memfunc_setup("SaveToFile",978,G__MCVDict_823_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Save offset calculation results to a text file", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MCVDict_823_0_7, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVCountRate::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_823_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVCountRate::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_823_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVCountRate::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_823_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVCountRate::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_823_0_11, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_823_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_823_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_823_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_823_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVCountRate::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_823_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVCountRate::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_823_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVCountRate::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_823_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVCountRate::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVCountRate", 1147, G__MCVDict_823_0_19, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVCountRate), -1, 0, 1, 1, 1, 0, "u 'MCVCountRate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVCountRate", 1273, G__MCVDict_823_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_823_0_21, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVCountRate), -1, 1, 1, 1, 1, 0, "u 'MCVCountRate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVRetriggering(void) {
   /* MCVRetriggering */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVRetriggering));
   G__memfunc_setup("MCVRetriggering",1487,G__MCVDict_824_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVRetriggering), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVRetriggering",1487,G__MCVDict_824_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVRetriggering), -1, 0, 2, 1, 1, 0, 
"U 'TObjArray' - 0 - hc U 'MCVFileInfo' - 0 NULL in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__MCVDict_824_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", "!< Search for retriggering in burst data.", (void*) NULL, 1);
   G__memfunc_setup("PrintResults",1279,G__MCVDict_824_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Print retriggering calculation results", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MCVDict_824_0_5, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVRetriggering::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_824_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVRetriggering::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_824_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVRetriggering::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_824_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVRetriggering::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_824_0_9, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_824_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_824_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_824_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_824_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVRetriggering::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_824_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVRetriggering::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_824_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVRetriggering::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_824_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVRetriggering::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVRetriggering", 1487, G__MCVDict_824_0_17, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVRetriggering), -1, 0, 1, 1, 1, 0, "u 'MCVRetriggering' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVRetriggering", 1613, G__MCVDict_824_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_824_0_19, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVRetriggering), -1, 1, 1, 1, 1, 0, "u 'MCVRetriggering' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVGlobalRetriggering(void) {
   /* MCVGlobalRetriggering */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVGlobalRetriggering));
   G__memfunc_setup("MCVGlobalRetriggering",2080,G__MCVDict_825_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVGlobalRetriggering), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVGlobalRetriggering",2080,G__MCVDict_825_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVGlobalRetriggering), -1, 0, 2, 1, 1, 0, 
"U 'TObjArray' - 0 - hc U 'MCVFileInfo' - 0 NULL in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__MCVDict_825_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", "!< Search for retriggering in burst data.", (void*) NULL, 1);
   G__memfunc_setup("PrintResults",1279,G__MCVDict_825_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Print retriggering calculation results", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MCVDict_825_0_5, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVGlobalRetriggering::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_825_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVGlobalRetriggering::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_825_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVGlobalRetriggering::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_825_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVGlobalRetriggering::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_825_0_9, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_825_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_825_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_825_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_825_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVGlobalRetriggering::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_825_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVGlobalRetriggering::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_825_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVGlobalRetriggering::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_825_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVGlobalRetriggering::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVGlobalRetriggering", 2080, G__MCVDict_825_0_17, (int) ('i'), 
G__get_linked_tagnum(&G__MCVDictLN_MCVGlobalRetriggering), -1, 0, 1, 1, 1, 0, "u 'MCVGlobalRetriggering' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVGlobalRetriggering", 2206, G__MCVDict_825_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_825_0_19, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVGlobalRetriggering), -1, 1, 1, 1, 1, 0, "u 'MCVGlobalRetriggering' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVSciRM(void) {
   /* MCVSciRM */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSciRM));
   G__memfunc_setup("MCVSciRM",676,G__MCVDict_826_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVSciRM), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVSciRM",676,G__MCVDict_826_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVSciRM), -1, 0, 2, 1, 1, 0, 
"U 'TObjArray' - 0 - hc U 'MCVFileInfo' - 0 NULL in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__MCVDict_826_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", "!< Performs analysis on scientific ratemeters data.", (void*) NULL, 1);
   G__memfunc_setup("PrintResults",1279,G__MCVDict_826_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Print calculation results", (void*) NULL, 1);
   G__memfunc_setup("SaveToFile",978,G__MCVDict_826_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UpdateGlobalFile",1588,G__MCVDict_826_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MCVDict_826_0_7, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVSciRM::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_826_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVSciRM::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_826_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVSciRM::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_826_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVSciRM::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_826_0_11, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_826_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_826_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_826_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_826_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVSciRM::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_826_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVSciRM::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_826_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVSciRM::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_826_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVSciRM::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVSciRM", 676, G__MCVDict_826_0_19, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVSciRM), -1, 0, 1, 1, 1, 0, "u 'MCVSciRM' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVSciRM", 802, G__MCVDict_826_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_826_0_21, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVSciRM), -1, 1, 1, 1, 1, 0, "u 'MCVSciRM' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVFitPeak(void) {
   /* MCVFitPeak */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFitPeak));
   G__memfunc_setup("FindPeak",770,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "!< Return approximate peak center near Et", (void*) NULL, 0);
   G__memfunc_setup("MCVFitPeak",906,G__MCVDict_827_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVFitPeak), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVFitPeak",906,G__MCVDict_827_0_3, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVFitPeak), -1, 0, 4, 1, 1, 0, 
"d - - 0 - E U 'TObjArray' - 0 - hc "
"U 'MCVFileInfo' - 0 NULL in i - - 0 0 Earr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__MCVDict_827_0_4, 105, -1, -1, 0, 0, 1, 1, 0, "", "!< Checks", (void*) NULL, 1);
   G__memfunc_setup("PrintResults",1279,G__MCVDict_827_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Print ", (void*) NULL, 1);
   G__memfunc_setup("SaveToFile",978,G__MCVDict_827_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Save ", (void*) NULL, 1);
   G__memfunc_setup("GetCenter",897,G__MCVDict_827_0_7, 68, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma",785,G__MCVDict_827_0_8, 68, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAmplitude",1221,G__MCVDict_827_0_9, 68, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCounts",924,G__MCVDict_827_0_10, 68, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpperDE",961,G__MCVDict_827_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - dh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLowerDE",958,G__MCVDict_827_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - dl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateFit",902,G__MCVDict_827_0_13, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - - 0 - bar d - - 0 - cen "
"d - - 0 - sig d - - 0 - amp "
"d - - 0 - rk2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_827_0_14, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVFitPeak::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_827_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFitPeak::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_827_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVFitPeak::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_827_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVFitPeak::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_827_0_18, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_827_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_827_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_827_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_827_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFitPeak::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_827_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVFitPeak::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_827_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFitPeak::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_827_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVFitPeak::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVFitPeak", 906, G__MCVDict_827_0_26, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVFitPeak), -1, 0, 1, 1, 1, 0, "u 'MCVFitPeak' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVFitPeak", 1032, G__MCVDict_827_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_827_0_28, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVFitPeak), -1, 1, 1, 1, 1, 0, "u 'MCVFitPeak' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVBurstOffset(void) {
   /* MCVBurstOffset */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBurstOffset));
   G__memfunc_setup("MCVBurstOffset",1373,G__MCVDict_828_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVBurstOffset), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVBurstOffset",1373,G__MCVDict_828_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVBurstOffset), -1, 0, 3, 1, 1, 0, 
"g - - 0 - pd U 'TObjArray' - 0 - hc "
"U 'MCVFileInfo' - 0 NULL in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__MCVDict_828_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", "!< Checks", (void*) NULL, 1);
   G__memfunc_setup("PrintResults",1279,G__MCVDict_828_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Print ", (void*) NULL, 1);
   G__memfunc_setup("SaveToFile",978,G__MCVDict_828_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Save ", (void*) NULL, 1);
   G__memfunc_setup("UpdateCalibrationFile",2123,G__MCVDict_828_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPeakCenter",1282,G__MCVDict_828_0_7, 68, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_828_0_8, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVBurstOffset::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_828_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVBurstOffset::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_828_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVBurstOffset::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_828_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVBurstOffset::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_828_0_12, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_828_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_828_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_828_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_828_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVBurstOffset::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_828_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVBurstOffset::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_828_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVBurstOffset::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_828_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVBurstOffset::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVBurstOffset", 1373, G__MCVDict_828_0_20, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVBurstOffset), -1, 0, 1, 1, 1, 0, "u 'MCVBurstOffset' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVBurstOffset", 1499, G__MCVDict_828_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_828_0_22, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVBurstOffset), -1, 1, 1, 1, 1, 0, "u 'MCVBurstOffset' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVElectricalCalib(void) {
   /* MCVElectricalCalib */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVElectricalCalib));
   G__memfunc_setup("FitPeaks",791,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 4, 1, 2, 0, 
"i - - 0 - ipd U 'TH1F' - 0 - aux "
"f - - 0 - xmin f - - 0 - xmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVElectricalCalib",1721,G__MCVDict_829_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVElectricalCalib), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVElectricalCalib",1721,G__MCVDict_829_0_3, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVElectricalCalib), -1, 0, 2, 1, 1, 0, 
"U 'TObjArray' - 0 - hc U 'MCVFileInfo' - 0 NULL in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__MCVDict_829_0_4, 105, -1, -1, 0, 0, 1, 1, 0, "", "!< Search for peaks in electrical calibration data.", (void*) NULL, 1);
   G__memfunc_setup("PrintResults",1279,G__MCVDict_829_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Print calculation results", (void*) NULL, 1);
   G__memfunc_setup("SaveToFile",978,G__MCVDict_829_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNPeaks",878,G__MCVDict_829_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - np", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThreshold",1241,G__MCVDict_829_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - th", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_829_0_9, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVElectricalCalib::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_829_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVElectricalCalib::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_829_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVElectricalCalib::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_829_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVElectricalCalib::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_829_0_13, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_829_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_829_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_829_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_829_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVElectricalCalib::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_829_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVElectricalCalib::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_829_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVElectricalCalib::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_829_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVElectricalCalib::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVElectricalCalib", 1721, G__MCVDict_829_0_21, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVElectricalCalib), -1, 0, 1, 1, 1, 0, "u 'MCVElectricalCalib' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVElectricalCalib", 1847, G__MCVDict_829_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_829_0_23, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVElectricalCalib), -1, 1, 1, 1, 1, 0, "u 'MCVElectricalCalib' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVEnergyThreshold(void) {
   /* MCVEnergyThreshold */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVEnergyThreshold));
   G__memfunc_setup("MCVEnergyThreshold",1789,G__MCVDict_830_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVEnergyThreshold), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVEnergyThreshold",1789,G__MCVDict_830_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVEnergyThreshold), -1, 0, 2, 1, 1, 0, 
"U 'TObjArray' - 0 - hc U 'MCVFileInfo' - 0 NULL in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__MCVDict_830_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", "!< Search for retriggering in burst data.", (void*) NULL, 1);
   G__memfunc_setup("PrintResults",1279,G__MCVDict_830_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Print retriggering calculation results", (void*) NULL, 1);
   G__memfunc_setup("SaveToFile",978,G__MCVDict_830_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Save threshold calculation results to a text file", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MCVDict_830_0_6, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVEnergyThreshold::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_830_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVEnergyThreshold::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_830_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVEnergyThreshold::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_830_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVEnergyThreshold::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_830_0_10, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_830_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_830_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_830_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_830_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVEnergyThreshold::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_830_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVEnergyThreshold::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_830_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVEnergyThreshold::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_830_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVEnergyThreshold::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVEnergyThreshold", 1789, G__MCVDict_830_0_18, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVEnergyThreshold), -1, 0, 1, 1, 1, 0, "u 'MCVEnergyThreshold' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVEnergyThreshold", 1915, G__MCVDict_830_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_830_0_20, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVEnergyThreshold), -1, 1, 1, 1, 1, 0, "u 'MCVEnergyThreshold' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVGridEnergyCal(void) {
   /* MCVGridEnergyCal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVGridEnergyCal));
   G__memfunc_setup("MCVGridEnergyCal",1510,G__MCVDict_831_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVGridEnergyCal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVGridEnergyCal",1510,G__MCVDict_831_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVGridEnergyCal), -1, 0, 2, 1, 1, 0, 
"U 'TObjArray' - 0 - hc U 'MCVFileInfo' - 0 NULL in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__MCVDict_831_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", "!< Fit the muon Landau peaks.", (void*) NULL, 1);
   G__memfunc_setup("PrintResults",1279,G__MCVDict_831_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Print peak energy values", (void*) NULL, 1);
   G__memfunc_setup("SaveToFile",978,G__MCVDict_831_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Save data to file", (void*) NULL, 1);
   G__memfunc_setup("UpdateCalibrationFile",2123,G__MCVDict_831_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_831_0_7, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVGridEnergyCal::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_831_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVGridEnergyCal::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_831_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVGridEnergyCal::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_831_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVGridEnergyCal::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_831_0_11, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_831_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_831_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_831_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_831_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVGridEnergyCal::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_831_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVGridEnergyCal::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_831_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVGridEnergyCal::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_831_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVGridEnergyCal::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVGridEnergyCal", 1510, G__MCVDict_831_0_19, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVGridEnergyCal), -1, 0, 1, 1, 1, 0, "u 'MCVGridEnergyCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVGridEnergyCal", 1636, G__MCVDict_831_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_831_0_21, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVGridEnergyCal), -1, 1, 1, 1, 1, 0, "u 'MCVGridEnergyCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVBarCorrelation(void) {
   /* MCVBarCorrelation */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBarCorrelation));
   G__memfunc_setup("Loop",410,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"U 'TH2F' - 0 - hbc D - - 0 - - "
"D - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVBarCorrelation",1661,G__MCVDict_832_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVBarCorrelation), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVBarCorrelation",1661,G__MCVDict_832_0_3, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVBarCorrelation), -1, 0, 2, 1, 1, 0, 
"U 'TObjArray' - 0 - hc U 'MCVFileInfo' - 0 NULL in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__MCVDict_832_0_4, 105, -1, -1, 0, 0, 1, 1, 0, "", "!< Fit the muon Landau peaks.", (void*) NULL, 1);
   G__memfunc_setup("PrintResults",1279,G__MCVDict_832_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Print peak energy values", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MCVDict_832_0_6, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVBarCorrelation::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_832_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVBarCorrelation::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_832_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVBarCorrelation::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_832_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVBarCorrelation::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_832_0_10, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_832_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_832_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_832_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_832_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVBarCorrelation::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_832_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVBarCorrelation::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_832_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVBarCorrelation::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_832_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVBarCorrelation::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVBarCorrelation", 1661, G__MCVDict_832_0_18, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVBarCorrelation), -1, 0, 1, 1, 1, 0, "u 'MCVBarCorrelation' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVBarCorrelation", 1787, G__MCVDict_832_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_832_0_20, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVBarCorrelation), -1, 1, 1, 1, 1, 0, "u 'MCVBarCorrelation' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVBkgSubtraction(void) {
   /* MCVBkgSubtraction */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBkgSubtraction));
   G__memfunc_setup("MCVBkgSubtraction",1672,G__MCVDict_837_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVBkgSubtraction), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVBkgSubtraction",1672,G__MCVDict_837_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVBkgSubtraction), -1, 0, 2, 1, 1, 0, 
"U 'TObjArray' - 0 - hc U 'MCVFileInfo' - 0 NULL in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__MCVDict_837_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", "!< Background subtraction and source peak fitting", (void*) NULL, 1);
   G__memfunc_setup("PrintResults",1279,G__MCVDict_837_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< ", (void*) NULL, 1);
   G__memfunc_setup("DrawZoom",819,G__MCVDict_837_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Draw enlarged view for histograms", (void*) NULL, 0);
   G__memfunc_setup("FitTotEHisto",1190,G__MCVDict_837_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Fit total bkg subtracte energy histo", (void*) NULL, 0);
   G__memfunc_setup("FitSimTotEHisto",1487,G__MCVDict_837_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Fit total bkg subtracte energy histo", (void*) NULL, 0);
   G__memfunc_setup("SimulationCompare",1772,G__MCVDict_837_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Compare each bar spectrum with simulations", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_837_0_9, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVBkgSubtraction::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_837_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVBkgSubtraction::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_837_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVBkgSubtraction::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_837_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVBkgSubtraction::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_837_0_13, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_837_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_837_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_837_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_837_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVBkgSubtraction::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_837_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVBkgSubtraction::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_837_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVBkgSubtraction::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_837_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVBkgSubtraction::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVBkgSubtraction", 1672, G__MCVDict_837_0_21, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVBkgSubtraction), -1, 0, 1, 1, 1, 0, "u 'MCVBkgSubtraction' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVBkgSubtraction", 1798, G__MCVDict_837_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_837_0_23, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVBkgSubtraction), -1, 1, 1, 1, 1, 0, "u 'MCVBkgSubtraction' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVBurstLandauFit(void) {
   /* MCVBurstLandauFit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBurstLandauFit));
   G__memfunc_setup("MCVBurstLandauFit",1646,G__MCVDict_838_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVBurstLandauFit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVBurstLandauFit",1646,G__MCVDict_838_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVBurstLandauFit), -1, 0, 2, 1, 1, 0, 
"U 'TObjArray' - 0 - hc U 'MCVFileInfo' - 0 NULL in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__MCVDict_838_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", "!< Fit the muon Landau peaks.", (void*) NULL, 1);
   G__memfunc_setup("PrintResults",1279,G__MCVDict_838_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Print peak energy values", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MCVDict_838_0_5, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVBurstLandauFit::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_838_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVBurstLandauFit::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_838_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVBurstLandauFit::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_838_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVBurstLandauFit::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_838_0_9, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_838_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_838_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_838_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_838_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVBurstLandauFit::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_838_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVBurstLandauFit::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_838_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVBurstLandauFit::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_838_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVBurstLandauFit::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVBurstLandauFit", 1646, G__MCVDict_838_0_17, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVBurstLandauFit), -1, 0, 1, 1, 1, 0, "u 'MCVBurstLandauFit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVBurstLandauFit", 1772, G__MCVDict_838_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_838_0_19, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVBurstLandauFit), -1, 1, 1, 1, 1, 0, "u 'MCVBurstLandauFit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVRawMonitor(void) {
   /* MCVRawMonitor */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVRawMonitor));
   G__memfunc_setup("FillGlobal",984,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "!< Draw global dataset information", (void*) NULL, 0);
   G__memfunc_setup("GetFitLimits",1205,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoFit",470,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVRawMonitor",1272,G__MCVDict_840_0_4, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVRawMonitor), -1, 0, 4, 1, 1, 0, 
"U 'TGWindow' - 10 - p U 'TGWindow' - 0 - main "
"h - 'UInt_t' 0 - w h - 'UInt_t' 0 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CloseWindow",1134,G__MCVDict_840_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillRaw",689,G__MCVDict_840_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Fill canvases with standard histograms", (void*) NULL, 0);
   G__memfunc_setup("InitMenu",809,G__MCVDict_840_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Init the menu entries", (void*) NULL, 0);
   G__memfunc_setup("ProcessMessage",1444,G__MCVDict_840_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"l - 'Long_t' 0 - msg l - 'Long_t' 0 - parm1 "
"l - 'Long_t' 0 - parm2", "!< Handles menu entries", (void*) NULL, 1);
   G__memfunc_setup("Set2DLimits",1044,G__MCVDict_840_0_9, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 0 - - f - - 0 - - "
"f - - 0 - - f - - 0 - -", "!< Set default boundaries to 2D histograms", (void*) NULL, 0);
   G__memfunc_setup("SetConf",690,G__MCVDict_840_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TEnv' - 0 - c", "!< Set current configuration", (void*) NULL, 0);
   G__memfunc_setup("SetFileInfo",1080,G__MCVDict_840_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MCVFileInfo' - 0 - info", "!< Set pointer to run info", (void*) NULL, 0);
   G__memfunc_setup("SetHistoCollection",1855,G__MCVDict_840_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObjArray' - 0 - hc", "!< Set pointer to the main histogram collection", (void*) NULL, 0);
   G__memfunc_setup("GetHistoCollection",1843,G__MCVDict_840_0_13, 85, G__get_linked_tagnum(&G__MCVDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", "!< Return pointer to the main histogram collection", (void*) NULL, 0);
   G__memfunc_setup("GetFileInfo",1068,G__MCVDict_840_0_14, 85, G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo), -1, 0, 0, 1, 1, 0, "", "!< Return pointer to run info", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_840_0_15, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVRawMonitor::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_840_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVRawMonitor::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_840_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVRawMonitor::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_840_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVRawMonitor::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_840_0_19, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_840_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_840_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_840_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_840_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVRawMonitor::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_840_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVRawMonitor::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_840_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVRawMonitor::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_840_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVRawMonitor::DeclFileLine), 0);
   // automatic destructor
   G__memfunc_setup("~MCVRawMonitor", 1398, G__MCVDict_840_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVAnalysis(void) {
   /* MCVAnalysis */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVAnalysis));
   G__memfunc_setup("Avevar",613,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"F - - 0 - data k - - 0 - n "
"F - - 0 - ave F - - 0 - var", "!< Function for Lomb Normalized periodogram calculations (from Numerical Recipes)", (void*) NULL, 0);
   G__memfunc_setup("Error",522,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "C - - 0 - s", "!< Function for Lomb Normalized periodogram calculations (from Numerical Recipes)", (void*) NULL, 0);
   G__memfunc_setup("Fasper",609,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 11, 1, 2, 0, 
"F - - 0 - x F - - 0 - y "
"k - - 0 - n f - - 0 - ofac "
"f - - 0 - hifac F - - 0 - wk1 "
"F - - 0 - wk2 k - - 0 - nwk "
"K - - 0 - nout K - - 0 - jmax "
"F - - 0 - prob", "!< Function for Lomb Normalized periodogram calculations (from Numerical Recipes)", (void*) NULL, 0);
   G__memfunc_setup("Four1",461,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"F - - 0 - data k - - 0 - nn "
"i - - 0 - isign", "!< Function for Lomb Normalized periodogram calculations (from Numerical Recipes)", (void*) NULL, 0);
   G__memfunc_setup("Realft",606,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"F - - 0 - data k - - 0 - n "
"i - - 0 - isign", "!< Function for Lomb Normalized periodogram calculations (from Numerical Recipes)", (void*) NULL, 0);
   G__memfunc_setup("Spread",607,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"f - - 0 - y F - - 0 - yy "
"k - - 0 - n f - - 0 - x "
"i - - 0 - m", "!< Function for Lomb Normalized periodogram calculations (from Numerical Recipes)", (void*) NULL, 0);
   G__memfunc_setup("MCVAnalysis",1066,G__MCVDict_841_0_7, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVAnalysis), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVAnalysis",1066,G__MCVDict_841_0_8, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVAnalysis), -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - t U 'MCVFileInfo' - 0 NULL in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoLombNormPeriod",1596,G__MCVDict_841_0_9, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 0 - tstart f - - 0 - tstop "
"i - - 0 - bar i - - 0 - pd", "!< Calculate the Lomb Normalized periodogram (LNP, from Numerical Recipes)", (void*) NULL, 0);
   G__memfunc_setup("DoLombNormPeriod",1596,G__MCVDict_841_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"F - - 0 - x F - - 0 - y "
"k - - 0 - n", "!< Calculate the Lomb Normalized periodogram (LNP, from Numerical Recipes)", (void*) NULL, 0);
   G__memfunc_setup("GetCorrelationMatrix",2071,G__MCVDict_841_0_11, 85, G__get_linked_tagnum(&G__MCVDictLN_TH2F), -1, 0, 2, 1, 1, 0, 
"f - - 0 - tstart f - - 0 - tstop", "!< Returns a pointer to the correlation matrix", (void*) NULL, 0);
   G__memfunc_setup("GetLombNormPeriod",1705,G__MCVDict_841_0_12, 85, G__get_linked_tagnum(&G__MCVDictLN_TGraph), -1, 0, 0, 1, 1, 0, "", "!< Returns a pointer to the Lomb Normalized periodogram  graph", (void*) NULL, 0);
   G__memfunc_setup("GetLinearCorrelation",2045,G__MCVDict_841_0_13, 100, -1, G__defined_typename("Double_t"), 0, 6, 1, 1, 0, 
"i - - 0 - bar1 i - - 0 - pd1 "
"i - - 0 - bar2 i - - 0 - pd2 "
"f - - 0 - tstart f - - 0 - tstop", "!< Returns the linear correlation between 2 PDs", (void*) NULL, 0);
   G__memfunc_setup("GetMaxFreq",980,G__MCVDict_841_0_14, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvents",917,G__MCVDict_841_0_15, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProb",691,G__MCVDict_841_0_16, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADCRelativeLimit",1839,G__MCVDict_841_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - adc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetData",678,G__MCVDict_841_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - t", "!< Set pointer to data tree", (void*) NULL, 0);
   G__memfunc_setup("SetFileInfo",1080,G__MCVDict_841_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MCVFileInfo' - 0 - in", "!< Set pointer to file info", (void*) NULL, 0);
   G__memfunc_setup("SetHifac",775,G__MCVDict_841_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - hf", "!< Set parameter hifac for LNP calculations", (void*) NULL, 0);
   G__memfunc_setup("SetOfac",677,G__MCVDict_841_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - of", "!< Set parameter ofac for LNP calculations", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_841_0_22, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVAnalysis::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_841_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVAnalysis::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_841_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVAnalysis::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_841_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVAnalysis::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_841_0_26, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_841_0_27, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_841_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_841_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_841_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVAnalysis::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_841_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVAnalysis::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_841_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVAnalysis::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_841_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVAnalysis::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVAnalysis", 1066, G__MCVDict_841_0_34, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVAnalysis), -1, 0, 1, 1, 1, 0, "u 'MCVAnalysis' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVAnalysis", 1192, G__MCVDict_841_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_841_0_36, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVAnalysis), -1, 1, 1, 1, 1, 0, "u 'MCVAnalysis' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVBarMonitor(void) {
   /* MCVBarMonitor */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBarMonitor));
   G__memfunc_setup("MCVBarMonitor",1251,G__MCVDict_842_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVBarMonitor), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVBarMonitor",1251,G__MCVDict_842_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVBarMonitor), -1, 0, 2, 1, 1, 0, 
"U 'TObjArray' - 0 - hc U 'MCVFileInfo' - 0 NULL in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__MCVDict_842_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", "!< Checks", (void*) NULL, 1);
   G__memfunc_setup("PrintResults",1279,G__MCVDict_842_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Print ", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MCVDict_842_0_5, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVBarMonitor::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_842_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVBarMonitor::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_842_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVBarMonitor::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_842_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVBarMonitor::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_842_0_9, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_842_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_842_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_842_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_842_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVBarMonitor::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_842_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVBarMonitor::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_842_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVBarMonitor::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_842_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVBarMonitor::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVBarMonitor", 1251, G__MCVDict_842_0_17, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVBarMonitor), -1, 0, 1, 1, 1, 0, "u 'MCVBarMonitor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVBarMonitor", 1377, G__MCVDict_842_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_842_0_19, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVBarMonitor), -1, 1, 1, 1, 1, 0, "u 'MCVBarMonitor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVSelection(void) {
   /* MCVSelection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSelection));
   G__memfunc_setup("MCVSelection",1164,G__MCVDict_843_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVSelection), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintSelection",1459,G__MCVDict_843_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDefault",1009,G__MCVDict_843_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_843_0_4, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVSelection::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_843_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVSelection::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_843_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVSelection::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_843_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVSelection::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_843_0_8, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_843_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_843_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_843_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_843_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVSelection::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_843_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVSelection::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_843_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVSelection::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_843_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVSelection::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVSelection", 1164, G__MCVDict_843_0_16, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVSelection), -1, 0, 1, 1, 1, 0, "u 'MCVSelection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVSelection", 1290, G__MCVDict_843_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_843_0_18, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVSelection), -1, 1, 1, 1, 1, 0, "u 'MCVSelection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVTree(void) {
   /* MCVTree */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVTree));
   G__memfunc_setup("Copy3913SciRatemeters",1958,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "!< Copy scientific ratemeters data from input to output histogram collections ", (void*) NULL, 0);
   G__memfunc_setup("CopyEvt",714,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "!< Copy input event into output event", (void*) NULL, 0);
   G__memfunc_setup("CopyEvt",714,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "G - - 0 - barsel", "!< Copy input event into output event, single bar selection", (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "!< Set branches addresses for input and output trees", (void*) NULL, 0);
   G__memfunc_setup("MCVTree",630,G__MCVDict_844_0_5, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVTree",630,G__MCVDict_844_0_6, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVTree), -1, 0, 3, 1, 1, 0, 
"U 'TTree' - 0 - t U 'MCVFileInfo' - 0 - in "
"U 'TObjArray' - 0 NULL h", "!< Standard constructor (shift, selections)", (void*) NULL, 0);
   G__memfunc_setup("MCVTree",630,G__MCVDict_844_0_7, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVTree), -1, 0, 5, 1, 1, 0, 
"U 'TTree' - 0 - t1 U 'MCVFileInfo' - 0 - in "
"U 'TObjArray' - 0 - h U 'TTree' - 0 - t2 "
"U 'MCVFileInfo' - 0 - in2", "!< Constructor for merging t2 with t1", (void*) NULL, 0);
   G__memfunc_setup("ApplyCalibration",1646,G__MCVDict_844_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Apply calibration parameters stored in outinfo", (void*) NULL, 0);
   G__memfunc_setup("DoSelection",1113,G__MCVDict_844_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MCVSelection' - 0 - s", "!< Apply selection", (void*) NULL, 0);
   G__memfunc_setup("DoZeroSuppression",1790,G__MCVDict_844_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Perform software zero-suppression on 39.02 data", (void*) NULL, 0);
   G__memfunc_setup("GetOutputData",1323,G__MCVDict_844_0_11, 85, G__get_linked_tagnum(&G__MCVDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOutputHisto",1464,G__MCVDict_844_0_12, 85, G__get_linked_tagnum(&G__MCVDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOutputInfo",1341,G__MCVDict_844_0_13, 85, G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MuonTrackSelection",1850,G__MCVDict_844_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Apply selection to extract muon tracks", (void*) NULL, 0);
   G__memfunc_setup("SaveData",777,G__MCVDict_844_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Save new dataset after selection / calculations", (void*) NULL, 0);
   G__memfunc_setup("Shift",510,G__MCVDict_844_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - nevt i - - 0 - nshift", "!< Do time shift to cure timing misalignment", (void*) NULL, 0);
   G__memfunc_setup("UpdateSciRM",1057,G__MCVDict_844_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Update Scientific Ratemeters according ONLY to time selection", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_844_0_18, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVTree::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_844_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVTree::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_844_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVTree::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_844_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVTree::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_844_0_22, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_844_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_844_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_844_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_844_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVTree::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_844_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVTree::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_844_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVTree::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_844_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVTree::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVTree", 630, G__MCVDict_844_0_30, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVTree), -1, 0, 1, 1, 1, 0, "u 'MCVTree' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVTree", 756, G__MCVDict_844_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_844_0_32, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVTree), -1, 1, 1, 1, 1, 0, "u 'MCVTree' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVSelectionGUI(void) {
   /* MCVSelectionGUI */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSelectionGUI));
   G__memfunc_setup("ApplySelection",1452,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVSelectionGUI",1393,G__MCVDict_851_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVSelectionGUI), -1, 0, 7, 1, 1, 0, 
"U 'TGWindow' - 10 - p U 'TGWindow' - 0 - main "
"h - 'UInt_t' 0 - w h - 'UInt_t' 0 - h "
"U 'TTree' - 0 NULL ind U 'MCVFileInfo' - 0 NULL in "
"U 'TObjArray' - 0 NULL rh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CloseWindow",1134,G__MCVDict_851_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ProcessMessage",1444,G__MCVDict_851_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"l - 'Long_t' 0 - msg l - 'Long_t' 0 - parm1 "
"l - 'Long_t' 0 - parm2", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EnableSelection",1517,G__MCVDict_851_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDefault",1009,G__MCVDict_851_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_851_0_7, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVSelectionGUI::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_851_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVSelectionGUI::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_851_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVSelectionGUI::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_851_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVSelectionGUI::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_851_0_11, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_851_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_851_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_851_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_851_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVSelectionGUI::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_851_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVSelectionGUI::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_851_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVSelectionGUI::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_851_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVSelectionGUI::DeclFileLine), 0);
   // automatic destructor
   G__memfunc_setup("~MCVSelectionGUI", 1519, G__MCVDict_851_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVHisto3908(void) {
   /* MCVHisto3908 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVHisto3908));
   G__memfunc_setup("MCVHisto3908",961,G__MCVDict_852_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVHisto3908), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillHisto3908",1122,G__MCVDict_852_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MCALevt' - 0 - evt", "to fill: TH2F Et_mcal", (void*) NULL, 0);
   G__memfunc_setup("FillHisto3908_ric",1535,G__MCVDict_852_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MCALevt' - 0 - evt", "to fill: TH1I gdr*_ric ", (void*) NULL, 0);
   G__memfunc_setup("FillGraph3908",1101,G__MCVDict_852_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - numpoint U 'MCALbsr' - 0 - currbsr", "to fill: TGraph gdr*", (void*) NULL, 0);
   G__memfunc_setup("FillGlobalHisto3908",1715,G__MCVDict_852_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_852_0_6, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVHisto3908::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_852_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVHisto3908::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_852_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVHisto3908::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_852_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVHisto3908::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_852_0_10, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_852_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_852_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_852_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_852_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVHisto3908::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_852_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVHisto3908::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_852_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVHisto3908::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_852_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVHisto3908::DeclFileLine), 0);
   G__memfunc_setup("Findie",591,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 1, 1, 4, 0, "U 'MCALevt' - 0 - evt", "finds the E bsr range for the event", (void*) NULL, 0);
   G__memfunc_setup("Findig",593,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 1, 1, 4, 0, "U 'MCALevt' - 0 - evt", "finds the geometry bsr zone for the event", (void*) NULL, 0);
   G__memfunc_setup("DumpMCALEvent",1205,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'MCALevt' - 0 - evt", "Prints the MCALevt struct ", (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("MCVHisto3908", 961, G__MCVDict_852_0_21, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVHisto3908), -1, 0, 1, 1, 1, 0, "u 'MCVHisto3908' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVHisto3908", 1087, G__MCVDict_852_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_852_0_23, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVHisto3908), -1, 1, 1, 1, 1, 0, "u 'MCVHisto3908' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVBurst(void) {
   /* MCVBurst */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBurst));
   G__memfunc_setup("MCVBurst",758,G__MCVDict_853_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVBurst), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVBurst",758,G__MCVDict_853_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVBurst), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintInfo",921,G__MCVDict_853_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_853_0_4, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVBurst::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_853_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVBurst::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_853_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVBurst::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_853_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVBurst::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_853_0_8, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_853_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_853_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_853_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_853_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVBurst::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_853_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVBurst::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_853_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVBurst::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_853_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVBurst::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVBurst", 758, G__MCVDict_853_0_16, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVBurst), -1, 0, 1, 1, 1, 0, "u 'MCVBurst' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVBurst", 884, G__MCVDict_853_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_853_0_18, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVBurst), -1, 1, 1, 1, 1, 0, "u 'MCVBurst' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVFilePKP3908(void) {
   /* MCVFilePKP3908 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP3908));
   G__memfunc_setup("MCVFilePKP3908",1061,G__MCVDict_854_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP3908), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVFilePKP3908",1061,G__MCVDict_854_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP3908), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateRootFile3908",1612,G__MCVDict_854_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Custom Method for ROOT file creation ", (void*) NULL, 0);
   G__memfunc_setup("PrintBurstInfo",1449,G__MCVDict_854_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Process3908bsrData",1652,G__MCVDict_854_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Process BURST data ( 39.08 TM packet, hdu: RATEMTRS)", (void*) NULL, 0);
   G__memfunc_setup("Process3908pktData",1660,G__MCVDict_854_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Process BURST data ( 39.08 TM packet, hdu: PACKETS)", (void*) NULL, 0);
   G__memfunc_setup("Process3908Data",1325,G__MCVDict_854_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Process BURST bar data ( 39.08 TM packet, hdu: EVENTS)", (void*) NULL, 0);
   G__memfunc_setup("ProcessTEData",1266,G__MCVDict_854_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Process BURST bar data ( TE style, for simulations by M.Galli, hdu: AGILE_Binary)", (void*) NULL, 0);
   G__memfunc_setup("Resize_bsr_ric",1461,G__MCVDict_854_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", "set max range for bins in bsr_ric histo                                           //!< similar to  Process3909Data", (void*) NULL, 0);
   G__memfunc_setup("Resize_bsr_ric",1461,G__MCVDict_854_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - tinizio d - - 0 - tfine", "user given range ", (void*) NULL, 0);
   G__memfunc_setup("PrintEvent3908",1251,G__MCVDict_854_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - nevt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateBurst",1139,G__MCVDict_854_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - U 'MCALbsr' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_854_0_13, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVFilePKP3908::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_854_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFilePKP3908::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_854_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVFilePKP3908::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_854_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVFilePKP3908::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_854_0_17, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_854_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_854_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_854_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_854_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFilePKP3908::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_854_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVFilePKP3908::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_854_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFilePKP3908::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_854_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVFilePKP3908::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVFilePKP3908", 1061, G__MCVDict_854_0_25, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP3908), -1, 0, 1, 1, 1, 0, "u 'MCVFilePKP3908' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVFilePKP3908", 1187, G__MCVDict_854_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_854_0_27, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP3908), -1, 1, 1, 1, 1, 0, "u 'MCVFilePKP3908' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVbsrMonitor(void) {
   /* MCVbsrMonitor */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor));
   G__memfunc_setup("MCVbsrMonitor",1301,G__MCVDict_861_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor), -1, 0, 4, 1, 1, 0, 
"U 'TGWindow' - 10 - p U 'TGWindow' - 0 - main "
"h - 'UInt_t' 0 - w h - 'UInt_t' 0 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHistoCollection",1855,G__MCVDict_861_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObjArray' - 0 - hc", "!< Set pointer to the main histogram collection", (void*) NULL, 0);
   G__memfunc_setup("GetHistoCollection",1843,G__MCVDict_861_0_3, 85, G__get_linked_tagnum(&G__MCVDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", "!< Return pointer to the main histogram collection", (void*) NULL, 0);
   G__memfunc_setup("FillRaw",689,G__MCVDict_861_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Fill canvases with standard histograms", (void*) NULL, 0);
   G__memfunc_setup("PlotAll",696,G__MCVDict_861_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Graph all the Mcal bsr", (void*) NULL, 0);
   G__memfunc_setup("SetFileInfo",1080,G__MCVDict_861_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MCVFileInfo' - 0 - info", "!< Set pointer to run info", (void*) NULL, 0);
   G__memfunc_setup("GetFileInfo",1068,G__MCVDict_861_0_7, 85, G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo), -1, 0, 0, 1, 1, 0, "", "!< Return pointer to run info", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_861_0_8, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVbsrMonitor::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_861_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVbsrMonitor::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_861_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVbsrMonitor::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_861_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVbsrMonitor::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_861_0_12, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_861_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_861_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_861_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_861_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVbsrMonitor::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_861_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVbsrMonitor::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_861_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVbsrMonitor::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_861_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVbsrMonitor::DeclFileLine), 0);
   G__memfunc_setup("findymax",864,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MCVDictLN_TGraph), -1, 0, 2, 1, 4, 0, 
"U 'TGraph' - 0 - a0 U 'TGraph' - 0 - a1", "trova il graph con ymax ", (void*) NULL, 0);
   G__memfunc_setup("findymax",864,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MCVDictLN_TGraph), -1, 0, 4, 1, 4, 0, 
"U 'TGraph' - 0 - a0 U 'TGraph' - 0 - a1 "
"U 'TGraph' - 0 - a2 U 'TGraph' - 0 - a3", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVbsrMonitor", 1427, G__MCVDict_861_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVbsrMonitor_ric(void) {
   /* MCVbsrMonitor_ric */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor_ric));
   G__memfunc_setup("MCVbsrMonitor_ric",1714,G__MCVDict_862_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor_ric), -1, 0, 4, 1, 1, 0, 
"U 'TGWindow' - 10 - p U 'TGWindow' - 0 - main "
"h - 'UInt_t' 0 - w h - 'UInt_t' 0 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddBurstInfo",1189,G__MCVDict_862_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBurstCollection",1864,G__MCVDict_862_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObjArray' - 0 - hb", "!< Set pointer to the burst info collection", (void*) NULL, 0);
   G__memfunc_setup("SetHistoCollection",1855,G__MCVDict_862_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObjArray' - 0 - hc", "!< Set pointer to the main histogram collection", (void*) NULL, 0);
   G__memfunc_setup("GetHistoCollection",1843,G__MCVDict_862_0_5, 85, G__get_linked_tagnum(&G__MCVDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", "!< Return pointer to the main histogram collection", (void*) NULL, 0);
   G__memfunc_setup("FillRaw",689,G__MCVDict_862_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Fill canvases with standard histograms", (void*) NULL, 0);
   G__memfunc_setup("PlotAll",696,G__MCVDict_862_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Graph all the Mcal bsr", (void*) NULL, 0);
   G__memfunc_setup("PrintRMTable",1172,G__MCVDict_862_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - tini d - - 0 - tend", "!< print a table with RM values", (void*) NULL, 0);
   G__memfunc_setup("SetFileInfo",1080,G__MCVDict_862_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MCVFileInfo' - 0 - info", "!< Set pointer to run info", (void*) NULL, 0);
   G__memfunc_setup("GetFileInfo",1068,G__MCVDict_862_0_10, 85, G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo), -1, 0, 0, 1, 1, 0, "", "!< Return pointer to run info", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_862_0_11, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVbsrMonitor_ric::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_862_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVbsrMonitor_ric::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_862_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVbsrMonitor_ric::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_862_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVbsrMonitor_ric::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_862_0_15, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_862_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_862_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_862_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_862_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVbsrMonitor_ric::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_862_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVbsrMonitor_ric::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_862_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVbsrMonitor_ric::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_862_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVbsrMonitor_ric::DeclFileLine), 0);
   G__memfunc_setup("findhmax",847,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MCVDictLN_TH1I), -1, 0, 2, 1, 4, 0, 
"U 'TH1I' - 0 - a0 U 'TH1I' - 0 - a1", "trova il TH1I con ymax ", (void*) NULL, 0);
   G__memfunc_setup("findhmax",847,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MCVDictLN_TH1I), -1, 0, 4, 1, 4, 0, 
"U 'TH1I' - 0 - a0 U 'TH1I' - 0 - a1 "
"U 'TH1I' - 0 - a2 U 'TH1I' - 0 - a3", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVbsrMonitor_ric", 1840, G__MCVDict_862_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVAntiCoincidence(void) {
   /* MCVAntiCoincidence */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVAntiCoincidence));
   G__memfunc_setup("MCVAntiCoincidence",1734,G__MCVDict_863_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVAntiCoincidence), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVAntiCoincidence",1734,G__MCVDict_863_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVAntiCoincidence), -1, 0, 2, 1, 1, 0, 
"U 'TObjArray' - 0 - hc U 'MCVFileInfo' - 0 NULL in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__MCVDict_863_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", "!< Fit the muon Landau peaks.", (void*) NULL, 1);
   G__memfunc_setup("PrintResults",1279,G__MCVDict_863_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", "!< Print peak energy values", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MCVDict_863_0_5, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVAntiCoincidence::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_863_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVAntiCoincidence::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_863_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVAntiCoincidence::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_863_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVAntiCoincidence::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_863_0_9, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_863_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_863_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_863_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_863_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVAntiCoincidence::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_863_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVAntiCoincidence::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_863_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVAntiCoincidence::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_863_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVAntiCoincidence::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVAntiCoincidence", 1734, G__MCVDict_863_0_17, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVAntiCoincidence), -1, 0, 1, 1, 1, 0, "u 'MCVAntiCoincidence' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVAntiCoincidence", 1860, G__MCVDict_863_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_863_0_19, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVAntiCoincidence), -1, 1, 1, 1, 1, 0, "u 'MCVAntiCoincidence' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVCalibration(void) {
   /* MCVCalibration */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVCalibration));
   G__memfunc_setup("GetXDataStatus",1398,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDataStatus",1400,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SortData",802,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGraph",798,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitCurve",808,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - - 0 - bar i - - 0 - model", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVCalibration",1358,G__MCVDict_866_0_6, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVCalibration), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPdAGraph",1031,G__MCVDict_866_0_7, 85, G__get_linked_tagnum(&G__MCVDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPdBGraph",1032,G__MCVDict_866_0_8, 85, G__get_linked_tagnum(&G__MCVDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBonAGraph",1138,G__MCVDict_866_0_9, 85, G__get_linked_tagnum(&G__MCVDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_866_0_10, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVCalibration::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_866_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVCalibration::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_866_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVCalibration::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_866_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVCalibration::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_866_0_14, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_866_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_866_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_866_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_866_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVCalibration::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_866_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVCalibration::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_866_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVCalibration::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_866_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVCalibration::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVCalibration", 1358, G__MCVDict_866_0_22, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVCalibration), -1, 0, 1, 1, 1, 0, "u 'MCVCalibration' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVCalibration", 1484, G__MCVDict_866_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_866_0_24, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVCalibration), -1, 1, 1, 1, 1, 0, "u 'MCVCalibration' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVSubMS(void) {
   /* MCVSubMS */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSubMS));
   G__memfunc_setup("AddEvt",568,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"U 'subwin' - 0 - - U 'MCALevt' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCVSubMS",688,G__MCVDict_868_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVSubMS), -1, 0, 1, 1, 1, 0, "U 'TH1F' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessEvent",1249,G__MCVDict_868_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MCALevt' - 0 - evt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitSubwin",1036,G__MCVDict_868_0_4, 85, G__get_linked_tagnum(&G__MCVDictLN_subwin), -1, 0, 2, 1, 1, 0, 
"d - - 0 - - d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_868_0_5, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVSubMS::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_868_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVSubMS::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_868_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVSubMS::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_868_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVSubMS::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_868_0_9, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_868_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_868_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_868_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_868_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVSubMS::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_868_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVSubMS::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_868_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVSubMS::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_868_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVSubMS::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVSubMS", 688, G__MCVDict_868_0_17, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVSubMS), -1, 0, 1, 1, 1, 0, "u 'MCVSubMS' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVSubMS", 814, G__MCVDict_868_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_868_0_19, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVSubMS), -1, 1, 1, 1, 1, 0, "u 'MCVSubMS' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGRB(void) {
   /* GRB */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_GRB));
   G__memfunc_setup("GRB",219,G__MCVDict_887_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_GRB), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateBackground",1934,G__MCVDict_887_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculatePeakFlux",1710,G__MCVDict_887_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateT90",1099,G__MCVDict_887_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateFluence",1616,G__MCVDict_887_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateHR",1064,G__MCVDict_887_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawLightCurve",1419,G__MCVDict_887_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TPad' - 0 - cpad d - - 0 0. ti "
"d - - 0 0. tf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlertTypeCode",1589,G__MCVDict_887_0_8, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNEbins",863,G__MCVDict_887_0_9, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetContact",1004,G__MCVDict_887_0_10, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT90",477,G__MCVDict_887_0_11, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPeak",757,G__MCVDict_887_0_12, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxE",651,G__MCVDict_887_0_13, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSelFluence",1286,G__MCVDict_887_0_14, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetI90Lo",653,G__MCVDict_887_0_15, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetI90Hi",643,G__MCVDict_887_0_16, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLightCurve",1309,G__MCVDict_887_0_17, 85, G__get_linked_tagnum(&G__MCVDictLN_TH1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLightCurve2D",1427,G__MCVDict_887_0_18, 85, G__get_linked_tagnum(&G__MCVDictLN_TH2D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveIPN",630,G__MCVDict_887_0_19, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - ipnfile d - - 0 -10. tbefore "
"d - - 0 +10. tafter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFileHeader",1257,G__MCVDict_887_0_20, 85, G__get_linked_tagnum(&G__MCVDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGRBBoundaries",1555,G__MCVDict_887_0_21, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - tbkgini d - - 0 - tbkgfin "
"d - - 0 - tgrbini d - - 0 - tgrbfin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBurstId",1001,G__MCVDict_887_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT90",489,G__MCVDict_887_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - ilo i - - 0 - ihi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0",432,G__MCVDict_887_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - at0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTSearch",982,G__MCVDict_887_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - auxt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveInfo",795,G__MCVDict_887_0_26, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - infofile i - - 0 1 newline", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveMsg",694,G__MCVDict_887_0_27, 105, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - msgfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveAnalysis",1235,G__MCVDict_887_0_28, 105, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - outpath", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SpectralAnalysis",1666,G__MCVDict_887_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CustomSpectralAnalysis",2301,G__MCVDict_887_0_30, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_887_0_31, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&GRB::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_887_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&GRB::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_887_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&GRB::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_887_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&GRB::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_887_0_35, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_887_0_36, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_887_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_887_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_887_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&GRB::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_887_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&GRB::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_887_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&GRB::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_887_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&GRB::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("GRB", 219, G__MCVDict_887_0_43, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_GRB), -1, 0, 1, 1, 1, 0, "u 'GRB' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GRB", 345, G__MCVDict_887_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_887_0_45, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_GRB), -1, 1, 1, 1, 1, 0, "u 'GRB' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGRB3908(void) {
   /* GRB3908 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_GRB3908));
   G__memfunc_setup("InitDiagnostic",1433,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillDiagnostic",1420,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'MCALevt' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GRB3908",431,G__MCVDict_888_0_3, 105, G__get_linked_tagnum(&G__MCVDictLN_GRB3908), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GRB3908",431,G__MCVDict_888_0_4, 105, G__get_linked_tagnum(&G__MCVDictLN_GRB3908), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - rootfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefaultLightCurve",1730,G__MCVDict_888_0_5, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawCustomLightCurve",2054,G__MCVDict_888_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - ti d - - 0 - tf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawDefaultLightCurve",2128,G__MCVDict_888_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawPositionDiagnostic",2280,G__MCVDict_888_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TPad' - 0 - ppos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawVSBDiagnostic",1662,G__MCVDict_888_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TPad' - 0 - pbar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawDiagnostic",1427,G__MCVDict_888_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - ti d - - 0 - tf", "draw total diagnostic", (void*) NULL, 0);
   G__memfunc_setup("CustomLightCurve",1656,G__MCVDict_888_0_11, 105, -1, -1, 0, 8, 1, 1, 0, 
"d - - 0 0. t0 d - - 0 -20. tpre "
"d - - 0 50. tpost d - - 0 0. emin "
"d - - 0 0.700 emax i - - 0 0x7FFF barsX "
"i - - 0 0x7FFF barsZ d - - 0 0.032 tbin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPha",569,G__MCVDict_888_0_12, 70, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - ti d - - 0 - tf "
"i - - 0 0 nb D - - 0 NULL spbins", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvsT",674,G__MCVDict_888_0_13, 85, G__get_linked_tagnum(&G__MCVDictLN_TGraph), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveCustomLightCurve",2055,G__MCVDict_888_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - outpath", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveDiagnostic",1428,G__MCVDict_888_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - outpath", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveVSBDiagnostic",1663,G__MCVDict_888_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - outpath", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveIPNMsg",925,G__MCVDict_888_0_17, 105, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - outpath", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveVSBInfo",1030,G__MCVDict_888_0_18, 105, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - outpath", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StandardDiagnostic",1846,G__MCVDict_888_0_19, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VSBDiagnostic",1264,G__MCVDict_888_0_20, 105, -1, -1, 0, 0, 1, 1, 0, "", "diagnostic for Very Short Bursts", (void*) NULL, 0);
   G__memfunc_setup("CalculatePeakFluxVSB",1945,G__MCVDict_888_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", "peak flux calculation for Very Short Bursts", (void*) NULL, 0);
   G__memfunc_setup("CalculateT90VSB",1334,G__MCVDict_888_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", "duration calculation for Very Short Bursts", (void*) NULL, 0);
   G__memfunc_setup("CalculateFluenceVSB",1851,G__MCVDict_888_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", "fluence calculation for Very Short Bursts", (void*) NULL, 0);
   G__memfunc_setup("SpectralAnalysisVSB",1901,G__MCVDict_888_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", "spectral analysis for Very Short Bursts", (void*) NULL, 0);
   G__memfunc_setup("CustomSpectralAnalysisVSB",2536,G__MCVDict_888_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindTrueT0",933,G__MCVDict_888_0_26, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - t0L d - - 0 - dt "
"i - - 0 - thr", "apply sub-ms time window algorithm to find the time of the spike. Return corrected t0", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_888_0_27, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&GRB3908::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_888_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&GRB3908::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_888_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&GRB3908::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_888_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&GRB3908::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_888_0_31, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_888_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_888_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_888_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_888_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&GRB3908::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_888_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&GRB3908::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_888_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&GRB3908::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_888_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&GRB3908::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("GRB3908", 431, G__MCVDict_888_0_39, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_GRB3908), -1, 0, 1, 1, 1, 0, "u 'GRB3908' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GRB3908", 557, G__MCVDict_888_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_888_0_41, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_GRB3908), -1, 1, 1, 1, 1, 0, "u 'GRB3908' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGRB3913(void) {
   /* GRB3913 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_GRB3913));
   G__memfunc_setup("GRB3913",427,G__MCVDict_889_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_GRB3913), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GRB3913",427,G__MCVDict_889_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_GRB3913), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - rootfile i - - 0 0 plane", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LightCurve",1021,G__MCVDict_889_0_3, 105, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - t0L d - - 0 - tpre "
"d - - 0 - tpost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_889_0_4, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&GRB3913::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_889_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&GRB3913::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_889_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&GRB3913::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_889_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&GRB3913::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_889_0_8, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_889_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_889_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_889_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_889_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&GRB3913::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_889_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&GRB3913::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_889_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&GRB3913::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_889_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&GRB3913::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("GRB3913", 427, G__MCVDict_889_0_16, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_GRB3913), -1, 0, 1, 1, 1, 0, "u 'GRB3913' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GRB3913", 553, G__MCVDict_889_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_889_0_18, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_GRB3913), -1, 1, 1, 1, 1, 0, "u 'GRB3913' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGRB3913XZ(void) {
   /* GRB3913XZ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_GRB3913XZ));
   G__memfunc_setup("GRB3913XZ",605,G__MCVDict_890_0_1, 105, G__get_linked_tagnum(&G__MCVDictLN_GRB3913XZ), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GRB3913XZ",605,G__MCVDict_890_0_2, 105, G__get_linked_tagnum(&G__MCVDictLN_GRB3913XZ), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - rootfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT90",477,G__MCVDict_890_0_3, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LightCurve",1021,G__MCVDict_890_0_4, 105, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - t0L d - - 0 - tpre "
"d - - 0 - tpost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLightCurve",1309,G__MCVDict_890_0_5, 85, G__get_linked_tagnum(&G__MCVDictLN_TH1D), -1, 0, 1, 1, 1, 0, "i - - 0 - ipZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLightCurve2D",1427,G__MCVDict_890_0_6, 85, G__get_linked_tagnum(&G__MCVDictLN_TH2D), -1, 0, 1, 1, 1, 0, "i - - 0 - ipZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawCustomLightCurve",2054,G__MCVDict_890_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - ti d - - 0 - tf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveCustomLightCurve",2055,G__MCVDict_890_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - outpath", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveInfo",795,G__MCVDict_890_0_9, 105, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - infofile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveAnalysis",1235,G__MCVDict_890_0_10, 105, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - outpath", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SpectralAnalysis",1666,G__MCVDict_890_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CustomSpectralAnalysis",2301,G__MCVDict_890_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGRBBoundaries",1555,G__MCVDict_890_0_13, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - tbkgini d - - 0 - tbkgfin "
"d - - 0 - tgrbini d - - 0 - tgrbfin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_890_0_14, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&GRB3913XZ::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_890_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&GRB3913XZ::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_890_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&GRB3913XZ::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_890_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&GRB3913XZ::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_890_0_18, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_890_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_890_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_890_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_890_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&GRB3913XZ::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_890_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&GRB3913XZ::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_890_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&GRB3913XZ::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_890_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&GRB3913XZ::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("GRB3913XZ", 605, G__MCVDict_890_0_26, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_GRB3913XZ), -1, 0, 1, 1, 1, 0, "u 'GRB3913XZ' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GRB3913XZ", 731, G__MCVDict_890_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_890_0_28, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_GRB3913XZ), -1, 1, 1, 1, 1, 0, "u 'GRB3913XZ' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVFile3916(void) {
   /* MCVFile3916 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFile3916));
   G__memfunc_setup("FillTree",791,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadFitsFile",1174,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadRootFile",1188,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printerror",1111,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - - 0 - -", "Print out cfitsio error messages and exit program", (void*) NULL, 0);
   G__memfunc_setup("MCVFile3916",825,G__MCVDict_925_0_5, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVFile3916), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name i - - 0 0 v "
"i - - 0 0 e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ecef2lla",734,G__MCVDict_925_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 0. X d - - 0 0. Y "
"d - - 0 0. Z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eci2lla",636,G__MCVDict_925_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 0. X d - - 0 0. Y "
"d - - 0 0. Z d - - 0 0. t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCoordinates",1435,G__MCVDict_925_0_8, 105, -1, -1, 0, 1, 1, 1, 0, "U 'gpsevt' - 0 - aevt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintResults",1279,G__MCVDict_925_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteRootFile",1327,G__MCVDict_925_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsRoot",608,G__MCVDict_925_0_11, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_925_0_12, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVFile3916::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_925_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFile3916::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_925_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVFile3916::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_925_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVFile3916::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_925_0_16, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_925_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_925_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_925_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_925_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFile3916::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_925_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVFile3916::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_925_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFile3916::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_925_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVFile3916::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVFile3916", 825, G__MCVDict_925_0_24, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVFile3916), -1, 0, 1, 1, 1, 0, "u 'MCVFile3916' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVFile3916", 951, G__MCVDict_925_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_925_0_26, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVFile3916), -1, 1, 1, 1, 1, 0, "u 'MCVFile3916' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCVFile3201(void) {
   /* MCVFile3201 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFile3201));
   G__memfunc_setup("FillTree",791,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadFitsFile",1174,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadRootFile",1188,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printerror",1111,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - - 0 - -", "Print out cfitsio error messages and exit program", (void*) NULL, 0);
   G__memfunc_setup("MCVFile3201",812,G__MCVDict_927_0_5, 105, G__get_linked_tagnum(&G__MCVDictLN_MCVFile3201), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name i - - 0 0 v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintResults",1279,G__MCVDict_927_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteRootFile",1327,G__MCVDict_927_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCVDict_927_0_8, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MCVFile3201::Class), 0);
   G__memfunc_setup("Class_Name",982,G__MCVDict_927_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFile3201::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__MCVDict_927_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MCVFile3201::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__MCVDict_927_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MCVFile3201::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__MCVDict_927_0_12, 85, G__get_linked_tagnum(&G__MCVDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MCVDict_927_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MCVDict_927_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCVDict_927_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCVDict_927_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFile3201::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCVDict_927_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVFile3201::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCVDict_927_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MCVFile3201::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCVDict_927_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MCVFile3201::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MCVFile3201", 812, G__MCVDict_927_0_20, (int) ('i'), G__get_linked_tagnum(&G__MCVDictLN_MCVFile3201), -1, 0, 1, 1, 1, 0, "u 'MCVFile3201' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCVFile3201", 938, G__MCVDict_927_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCVDict_927_0_22, (int) ('u'), G__get_linked_tagnum(&G__MCVDictLN_MCVFile3201), -1, 1, 1, 1, 1, 0, "u 'MCVFile3201' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMCVDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {
}

static void G__cpp_setup_global7() {
}

static void G__cpp_setup_global8() {
}

static void G__cpp_setup_global9() {
}

static void G__cpp_setup_global10() {
}

static void G__cpp_setup_global11() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMCVDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
  G__cpp_setup_global7();
  G__cpp_setup_global8();
  G__cpp_setup_global9();
  G__cpp_setup_global10();
  G__cpp_setup_global11();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMCVDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MCVDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR = { "vector<TStreamerInfo*,allocator<TStreamerInfo*> >" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TStreamerInfo*,allocator<TStreamerInfo*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TStyle = { "TStyle" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_multimaplEvoidmUcOshortcOlesslEvoidmUgRcOallocatorlEpairlEvoidmUsPconstcOshortgRsPgRsPgR = { "multimap<void*,short,less<void*>,allocator<pair<void* const,short> > >" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TRandom3 = { "TRandom3" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVFileInfo = { "MCVFileInfo" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVbsrInfo = { "MCVbsrInfo" , 115 , -1 };
G__linked_taginfo G__MCVDictLN_MCALpkt = { "MCALpkt" , 115 , -1 };
G__linked_taginfo G__MCVDictLN_MCALbsr = { "MCALbsr" , 115 , -1 };
G__linked_taginfo G__MCVDictLN_MCALevt = { "MCALevt" , 115 , -1 };
G__linked_taginfo G__MCVDictLN_MCVFile = { "MCVFile" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TH1I = { "TH1I" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TGraphErrors = { "TGraphErrors" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVHisto = { "MCVHisto" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVFileTE = { "MCVFileTE" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVFilePKP = { "MCVFilePKP" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TQObject = { "TQObject" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TGObject = { "TGObject" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TGWindow = { "TGWindow" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TGFrame = { "TGFrame" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TGCompositeFrame = { "TGCompositeFrame" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TGLayoutHints = { "TGLayoutHints" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TGTextButton = { "TGTextButton" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TGMainFrame = { "TGMainFrame" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TGTransientFrame = { "TGTransientFrame" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TGGroupFrame = { "TGGroupFrame" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TGButton = { "TGButton" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TGCheckButton = { "TGCheckButton" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TGLabel = { "TGLabel" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TGNumberEntry = { "TGNumberEntry" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TGPopupMenu = { "TGPopupMenu" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TGMenuBar = { "TGMenuBar" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TGTab = { "TGTab" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TRootEmbeddedCanvas = { "TRootEmbeddedCanvas" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TPad = { "TPad" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TGDockableFrame = { "TGDockableFrame" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVStdAnalysis = { "MCVStdAnalysis" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVGridOffset = { "MCVGridOffset" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVCountRate = { "MCVCountRate" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVRetriggering = { "MCVRetriggering" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVGlobalRetriggering = { "MCVGlobalRetriggering" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVSciRM = { "MCVSciRM" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVFitPeak = { "MCVFitPeak" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVBurstOffset = { "MCVBurstOffset" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVElectricalCalib = { "MCVElectricalCalib" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVEnergyThreshold = { "MCVEnergyThreshold" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVGridEnergyCal = { "MCVGridEnergyCal" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVBarCorrelation = { "MCVBarCorrelation" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVBkgSubtraction = { "MCVBkgSubtraction" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVBurstLandauFit = { "MCVBurstLandauFit" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVRawMonitor = { "MCVRawMonitor" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVAnalysis = { "MCVAnalysis" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVBarMonitor = { "MCVBarMonitor" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVSelection = { "MCVSelection" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVTree = { "MCVTree" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVSelectionGUI = { "MCVSelectionGUI" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVHisto3908 = { "MCVHisto3908" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVBurst = { "MCVBurst" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVFilePKP3908 = { "MCVFilePKP3908" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVbsrMonitor = { "MCVbsrMonitor" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVbsrMonitor_ric = { "MCVbsrMonitor_ric" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVAntiCoincidence = { "MCVAntiCoincidence" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_MCVCalibration = { "MCVCalibration" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_subwin = { "subwin" , 115 , -1 };
G__linked_taginfo G__MCVDictLN_MCVSubMS = { "MCVSubMS" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TH3F = { "TH3F" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TTimeStamp = { "TTimeStamp" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_GRB = { "GRB" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_GRB3908 = { "GRB3908" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_GRB3913 = { "GRB3913" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_GRB3913XZ = { "GRB3913XZ" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_gpsevt = { "gpsevt" , 115 , -1 };
G__linked_taginfo G__MCVDictLN_MCVFile3916 = { "MCVFile3916" , 99 , -1 };
G__linked_taginfo G__MCVDictLN_hkevt = { "hkevt" , 115 , -1 };
G__linked_taginfo G__MCVDictLN_MCVFile3201 = { "MCVFile3201" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMCVDict() {
  G__MCVDictLN_TClass.tagnum = -1 ;
  G__MCVDictLN_TBuffer.tagnum = -1 ;
  G__MCVDictLN_TMemberInspector.tagnum = -1 ;
  G__MCVDictLN_TObject.tagnum = -1 ;
  G__MCVDictLN_TNamed.tagnum = -1 ;
  G__MCVDictLN_TList.tagnum = -1 ;
  G__MCVDictLN_TObjArray.tagnum = -1 ;
  G__MCVDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__MCVDictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR.tagnum = -1 ;
  G__MCVDictLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MCVDictLN_TString.tagnum = -1 ;
  G__MCVDictLN_TFile.tagnum = -1 ;
  G__MCVDictLN_TStyle.tagnum = -1 ;
  G__MCVDictLN_TEnv.tagnum = -1 ;
  G__MCVDictLN_TTree.tagnum = -1 ;
  G__MCVDictLN_multimaplEvoidmUcOshortcOlesslEvoidmUgRcOallocatorlEpairlEvoidmUsPconstcOshortgRsPgRsPgR.tagnum = -1 ;
  G__MCVDictLN_TF1.tagnum = -1 ;
  G__MCVDictLN_TRandom3.tagnum = -1 ;
  G__MCVDictLN_MCVFileInfo.tagnum = -1 ;
  G__MCVDictLN_MCVbsrInfo.tagnum = -1 ;
  G__MCVDictLN_MCALpkt.tagnum = -1 ;
  G__MCVDictLN_MCALbsr.tagnum = -1 ;
  G__MCVDictLN_MCALevt.tagnum = -1 ;
  G__MCVDictLN_MCVFile.tagnum = -1 ;
  G__MCVDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__MCVDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__MCVDictLN_TH1D.tagnum = -1 ;
  G__MCVDictLN_TH1I.tagnum = -1 ;
  G__MCVDictLN_TH1F.tagnum = -1 ;
  G__MCVDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__MCVDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__MCVDictLN_TH2F.tagnum = -1 ;
  G__MCVDictLN_TH2D.tagnum = -1 ;
  G__MCVDictLN_TGraph.tagnum = -1 ;
  G__MCVDictLN_TGraphErrors.tagnum = -1 ;
  G__MCVDictLN_MCVHisto.tagnum = -1 ;
  G__MCVDictLN_MCVFileTE.tagnum = -1 ;
  G__MCVDictLN_MCVFilePKP.tagnum = -1 ;
  G__MCVDictLN_TQObject.tagnum = -1 ;
  G__MCVDictLN_TGObject.tagnum = -1 ;
  G__MCVDictLN_TGWindow.tagnum = -1 ;
  G__MCVDictLN_TGFrame.tagnum = -1 ;
  G__MCVDictLN_TGCompositeFrame.tagnum = -1 ;
  G__MCVDictLN_TGLayoutHints.tagnum = -1 ;
  G__MCVDictLN_TGTextButton.tagnum = -1 ;
  G__MCVDictLN_TGMainFrame.tagnum = -1 ;
  G__MCVDictLN_TGTransientFrame.tagnum = -1 ;
  G__MCVDictLN_TGGroupFrame.tagnum = -1 ;
  G__MCVDictLN_TGButton.tagnum = -1 ;
  G__MCVDictLN_TGCheckButton.tagnum = -1 ;
  G__MCVDictLN_TGLabel.tagnum = -1 ;
  G__MCVDictLN_TGNumberEntry.tagnum = -1 ;
  G__MCVDictLN_TGPopupMenu.tagnum = -1 ;
  G__MCVDictLN_TGMenuBar.tagnum = -1 ;
  G__MCVDictLN_TGTab.tagnum = -1 ;
  G__MCVDictLN_TCanvas.tagnum = -1 ;
  G__MCVDictLN_TRootEmbeddedCanvas.tagnum = -1 ;
  G__MCVDictLN_TPad.tagnum = -1 ;
  G__MCVDictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__MCVDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MCVDictLN_TGDockableFrame.tagnum = -1 ;
  G__MCVDictLN_MCVStdAnalysis.tagnum = -1 ;
  G__MCVDictLN_MCVGridOffset.tagnum = -1 ;
  G__MCVDictLN_MCVCountRate.tagnum = -1 ;
  G__MCVDictLN_MCVRetriggering.tagnum = -1 ;
  G__MCVDictLN_MCVGlobalRetriggering.tagnum = -1 ;
  G__MCVDictLN_MCVSciRM.tagnum = -1 ;
  G__MCVDictLN_MCVFitPeak.tagnum = -1 ;
  G__MCVDictLN_MCVBurstOffset.tagnum = -1 ;
  G__MCVDictLN_MCVElectricalCalib.tagnum = -1 ;
  G__MCVDictLN_MCVEnergyThreshold.tagnum = -1 ;
  G__MCVDictLN_MCVGridEnergyCal.tagnum = -1 ;
  G__MCVDictLN_MCVBarCorrelation.tagnum = -1 ;
  G__MCVDictLN_MCVBkgSubtraction.tagnum = -1 ;
  G__MCVDictLN_MCVBurstLandauFit.tagnum = -1 ;
  G__MCVDictLN_MCVRawMonitor.tagnum = -1 ;
  G__MCVDictLN_MCVAnalysis.tagnum = -1 ;
  G__MCVDictLN_MCVBarMonitor.tagnum = -1 ;
  G__MCVDictLN_MCVSelection.tagnum = -1 ;
  G__MCVDictLN_MCVTree.tagnum = -1 ;
  G__MCVDictLN_MCVSelectionGUI.tagnum = -1 ;
  G__MCVDictLN_MCVHisto3908.tagnum = -1 ;
  G__MCVDictLN_MCVBurst.tagnum = -1 ;
  G__MCVDictLN_MCVFilePKP3908.tagnum = -1 ;
  G__MCVDictLN_MCVbsrMonitor.tagnum = -1 ;
  G__MCVDictLN_MCVbsrMonitor_ric.tagnum = -1 ;
  G__MCVDictLN_MCVAntiCoincidence.tagnum = -1 ;
  G__MCVDictLN_MCVCalibration.tagnum = -1 ;
  G__MCVDictLN_subwin.tagnum = -1 ;
  G__MCVDictLN_MCVSubMS.tagnum = -1 ;
  G__MCVDictLN_TH3F.tagnum = -1 ;
  G__MCVDictLN_TTimeStamp.tagnum = -1 ;
  G__MCVDictLN_GRB.tagnum = -1 ;
  G__MCVDictLN_GRB3908.tagnum = -1 ;
  G__MCVDictLN_GRB3913.tagnum = -1 ;
  G__MCVDictLN_GRB3913XZ.tagnum = -1 ;
  G__MCVDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__MCVDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__MCVDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__MCVDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__MCVDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__MCVDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__MCVDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__MCVDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__MCVDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__MCVDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__MCVDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__MCVDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__MCVDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__MCVDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__MCVDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__MCVDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__MCVDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__MCVDictLN_gpsevt.tagnum = -1 ;
  G__MCVDictLN_MCVFile3916.tagnum = -1 ;
  G__MCVDictLN_hkevt.tagnum = -1 ;
  G__MCVDictLN_MCVFile3201.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMCVDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum(&G__MCVDictLN_TClass);
   G__get_linked_tagnum(&G__MCVDictLN_TBuffer);
   G__get_linked_tagnum(&G__MCVDictLN_TMemberInspector);
   G__get_linked_tagnum(&G__MCVDictLN_TObject);
   G__get_linked_tagnum(&G__MCVDictLN_TNamed);
   G__get_linked_tagnum(&G__MCVDictLN_TList);
   G__get_linked_tagnum(&G__MCVDictLN_TObjArray);
   G__get_linked_tagnum(&G__MCVDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum(&G__MCVDictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR);
   G__get_linked_tagnum(&G__MCVDictLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum(&G__MCVDictLN_TString);
   G__get_linked_tagnum(&G__MCVDictLN_TFile);
   G__get_linked_tagnum(&G__MCVDictLN_TStyle);
   G__get_linked_tagnum(&G__MCVDictLN_TEnv);
   G__get_linked_tagnum(&G__MCVDictLN_TTree);
   G__get_linked_tagnum(&G__MCVDictLN_multimaplEvoidmUcOshortcOlesslEvoidmUgRcOallocatorlEpairlEvoidmUsPconstcOshortgRsPgRsPgR);
   G__get_linked_tagnum(&G__MCVDictLN_TF1);
   G__get_linked_tagnum(&G__MCVDictLN_TRandom3);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFileInfo),sizeof(MCVFileInfo),-1,62720,(char*)NULL,G__setup_memvarMCVFileInfo,G__setup_memfuncMCVFileInfo);
   G__get_linked_tagnum(&G__MCVDictLN_MCVbsrInfo);
   G__get_linked_tagnum(&G__MCVDictLN_MCALpkt);
   G__get_linked_tagnum(&G__MCVDictLN_MCALbsr);
   G__get_linked_tagnum(&G__MCVDictLN_MCALevt);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFile),sizeof(MCVFile),-1,34048,"!< required for ROOT dictionary generation using rootcint",G__setup_memvarMCVFile,G__setup_memfuncMCVFile);
   G__get_linked_tagnum(&G__MCVDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum(&G__MCVDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum(&G__MCVDictLN_TH1D);
   G__get_linked_tagnum(&G__MCVDictLN_TH1I);
   G__get_linked_tagnum(&G__MCVDictLN_TH1F);
   G__get_linked_tagnum(&G__MCVDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum(&G__MCVDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum(&G__MCVDictLN_TH2F);
   G__get_linked_tagnum(&G__MCVDictLN_TH2D);
   G__get_linked_tagnum(&G__MCVDictLN_TGraph);
   G__get_linked_tagnum(&G__MCVDictLN_TGraphErrors);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVHisto),sizeof(MCVHisto),-1,34048,"!< required for ROOT dictionary generation using rootcint",G__setup_memvarMCVHisto,G__setup_memfuncMCVHisto);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFileTE),sizeof(MCVFileTE),-1,34048,(char*)NULL,G__setup_memvarMCVFileTE,G__setup_memfuncMCVFileTE);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP),sizeof(MCVFilePKP),-1,34048,"!< required for ROOT dictionary generation using rootcint",G__setup_memvarMCVFilePKP,G__setup_memfuncMCVFilePKP);
   G__get_linked_tagnum(&G__MCVDictLN_TQObject);
   G__get_linked_tagnum(&G__MCVDictLN_TGObject);
   G__get_linked_tagnum(&G__MCVDictLN_TGWindow);
   G__get_linked_tagnum(&G__MCVDictLN_TGFrame);
   G__get_linked_tagnum(&G__MCVDictLN_TGCompositeFrame);
   G__get_linked_tagnum(&G__MCVDictLN_TGLayoutHints);
   G__get_linked_tagnum(&G__MCVDictLN_TGTextButton);
   G__get_linked_tagnum(&G__MCVDictLN_TGMainFrame);
   G__get_linked_tagnum(&G__MCVDictLN_TGTransientFrame);
   G__get_linked_tagnum(&G__MCVDictLN_TGGroupFrame);
   G__get_linked_tagnum(&G__MCVDictLN_TGButton);
   G__get_linked_tagnum(&G__MCVDictLN_TGCheckButton);
   G__get_linked_tagnum(&G__MCVDictLN_TGLabel);
   G__get_linked_tagnum(&G__MCVDictLN_TGNumberEntry);
   G__get_linked_tagnum(&G__MCVDictLN_TGPopupMenu);
   G__get_linked_tagnum(&G__MCVDictLN_TGMenuBar);
   G__get_linked_tagnum(&G__MCVDictLN_TGTab);
   G__get_linked_tagnum(&G__MCVDictLN_TCanvas);
   G__get_linked_tagnum(&G__MCVDictLN_TRootEmbeddedCanvas);
   G__get_linked_tagnum(&G__MCVDictLN_TPad);
   G__get_linked_tagnum(&G__MCVDictLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum(&G__MCVDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum(&G__MCVDictLN_TGDockableFrame);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVStdAnalysis),sizeof(MCVStdAnalysis),-1,34048,"!< required for ROOT dictionary generation using rootcint",G__setup_memvarMCVStdAnalysis,G__setup_memfuncMCVStdAnalysis);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVGridOffset),sizeof(MCVGridOffset),-1,34048,"!< required for ROOT dictionary generation using rootcint",G__setup_memvarMCVGridOffset,G__setup_memfuncMCVGridOffset);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVCountRate),sizeof(MCVCountRate),-1,34048,"!< required for ROOT dictionary generation using rootcint",G__setup_memvarMCVCountRate,G__setup_memfuncMCVCountRate);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVRetriggering),sizeof(MCVRetriggering),-1,34048,"!< Required for ROOT dictionary generation using rootcint",G__setup_memvarMCVRetriggering,G__setup_memfuncMCVRetriggering);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVGlobalRetriggering),sizeof(MCVGlobalRetriggering),-1,34048,"!< Required for ROOT dictionary generation using rootcint",G__setup_memvarMCVGlobalRetriggering,G__setup_memfuncMCVGlobalRetriggering);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSciRM),sizeof(MCVSciRM),-1,34048,"!< Required for ROOT dictionary generation using rootcint",G__setup_memvarMCVSciRM,G__setup_memfuncMCVSciRM);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFitPeak),sizeof(MCVFitPeak),-1,34048,"!< Required for ROOT dictionary generation using rootcint",G__setup_memvarMCVFitPeak,G__setup_memfuncMCVFitPeak);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBurstOffset),sizeof(MCVBurstOffset),-1,34048,"!< Required for ROOT dictionary generation using rootcint",G__setup_memvarMCVBurstOffset,G__setup_memfuncMCVBurstOffset);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVElectricalCalib),sizeof(MCVElectricalCalib),-1,34048,"!< Required for ROOT dictionary generation using rootcint",G__setup_memvarMCVElectricalCalib,G__setup_memfuncMCVElectricalCalib);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVEnergyThreshold),sizeof(MCVEnergyThreshold),-1,34048,"!< Required for ROOT dictionary generation using rootcint",G__setup_memvarMCVEnergyThreshold,G__setup_memfuncMCVEnergyThreshold);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVGridEnergyCal),sizeof(MCVGridEnergyCal),-1,34048,"!< Required for ROOT dictionary generation using rootcint",G__setup_memvarMCVGridEnergyCal,G__setup_memfuncMCVGridEnergyCal);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBarCorrelation),sizeof(MCVBarCorrelation),-1,34048,"!< Required for ROOT dictionary generation using rootcint",G__setup_memvarMCVBarCorrelation,G__setup_memfuncMCVBarCorrelation);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBkgSubtraction),sizeof(MCVBkgSubtraction),-1,34048,"!< Required for ROOT dictionary generation using rootcint",G__setup_memvarMCVBkgSubtraction,G__setup_memfuncMCVBkgSubtraction);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBurstLandauFit),sizeof(MCVBurstLandauFit),-1,34048,"!< Required for ROOT dictionary generation using rootcint",G__setup_memvarMCVBurstLandauFit,G__setup_memfuncMCVBurstLandauFit);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVRawMonitor),sizeof(MCVRawMonitor),-1,62464,"!< required for ROOT dictionary generation using rootcint",G__setup_memvarMCVRawMonitor,G__setup_memfuncMCVRawMonitor);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVAnalysis),sizeof(MCVAnalysis),-1,34048,"!< required for ROOT dictionary generation using rootcint",G__setup_memvarMCVAnalysis,G__setup_memfuncMCVAnalysis);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBarMonitor),sizeof(MCVBarMonitor),-1,34048,"!< Required for ROOT dictionary generation using rootcint",G__setup_memvarMCVBarMonitor,G__setup_memfuncMCVBarMonitor);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSelection),sizeof(MCVSelection),-1,62720,(char*)NULL,G__setup_memvarMCVSelection,G__setup_memfuncMCVSelection);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVTree),sizeof(MCVTree),-1,34048,"!< Required for ROOT dictionary generation using rootcint",G__setup_memvarMCVTree,G__setup_memfuncMCVTree);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSelectionGUI),sizeof(MCVSelectionGUI),-1,62464,(char*)NULL,G__setup_memvarMCVSelectionGUI,G__setup_memfuncMCVSelectionGUI);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVHisto3908),sizeof(MCVHisto3908),-1,1280,"!< required for ROOT dictionary generation using rootcint",G__setup_memvarMCVHisto3908,G__setup_memfuncMCVHisto3908);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVBurst),sizeof(MCVBurst),-1,62720,"!< Required for ROOT dictionary generation using rootcint",G__setup_memvarMCVBurst,G__setup_memfuncMCVBurst);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFilePKP3908),sizeof(MCVFilePKP3908),-1,34048,"!< required for ROOT dictionary generation using rootcint",G__setup_memvarMCVFilePKP3908,G__setup_memfuncMCVFilePKP3908);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor),sizeof(MCVbsrMonitor),-1,62464,"!< required for ROOT dictionary generation using rootcint",G__setup_memvarMCVbsrMonitor,G__setup_memfuncMCVbsrMonitor);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVbsrMonitor_ric),sizeof(MCVbsrMonitor_ric),-1,62464,"!< required for ROOT dictionary generation using rootcint",G__setup_memvarMCVbsrMonitor_ric,G__setup_memfuncMCVbsrMonitor_ric);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVAntiCoincidence),sizeof(MCVAntiCoincidence),-1,34048,"!< Required for ROOT dictionary generation using rootcint",G__setup_memvarMCVAntiCoincidence,G__setup_memfuncMCVAntiCoincidence);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVCalibration),sizeof(MCVCalibration),-1,1280,(char*)NULL,G__setup_memvarMCVCalibration,G__setup_memfuncMCVCalibration);
   G__get_linked_tagnum(&G__MCVDictLN_subwin);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVSubMS),sizeof(MCVSubMS),-1,33792,"!< Required for ROOT dictionary generation using rootcint",G__setup_memvarMCVSubMS,G__setup_memfuncMCVSubMS);
   G__get_linked_tagnum(&G__MCVDictLN_TH3F);
   G__get_linked_tagnum(&G__MCVDictLN_TTimeStamp);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_GRB),sizeof(GRB),-1,1280,"!< required for ROOT dictionary generation using rootcint",G__setup_memvarGRB,G__setup_memfuncGRB);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_GRB3908),sizeof(GRB3908),-1,34048,"!< required for ROOT dictionary generation using rootcint",G__setup_memvarGRB3908,G__setup_memfuncGRB3908);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_GRB3913),sizeof(GRB3913),-1,34048,"!< required for ROOT dictionary generation using rootcint",G__setup_memvarGRB3913,G__setup_memfuncGRB3913);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_GRB3913XZ),sizeof(GRB3913XZ),-1,34048,"!< required for ROOT dictionary generation using rootcint",G__setup_memvarGRB3913XZ,G__setup_memfuncGRB3913XZ);
   G__get_linked_tagnum(&G__MCVDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum(&G__MCVDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum(&G__MCVDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum(&G__MCVDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum(&G__MCVDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum(&G__MCVDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum(&G__MCVDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum(&G__MCVDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum(&G__MCVDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum(&G__MCVDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum(&G__MCVDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum(&G__MCVDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum(&G__MCVDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum(&G__MCVDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum(&G__MCVDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum(&G__MCVDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum(&G__MCVDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum(&G__MCVDictLN_gpsevt);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFile3916),sizeof(MCVFile3916),-1,33792,"!< required for ROOT dictionary generation using rootcint",G__setup_memvarMCVFile3916,G__setup_memfuncMCVFile3916);
   G__get_linked_tagnum(&G__MCVDictLN_hkevt);
   G__tagtable_setup(G__get_linked_tagnum(&G__MCVDictLN_MCVFile3201),sizeof(MCVFile3201),-1,33792,"!< required for ROOT dictionary generation using rootcint",G__setup_memvarMCVFile3201,G__setup_memfuncMCVFile3201);
}
extern "C" void G__cpp_setupMCVDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupMCVDict()");
  G__set_cpp_environmentMCVDict();
  G__cpp_setup_tagtableMCVDict();

  G__cpp_setup_inheritanceMCVDict();

  G__cpp_setup_typetableMCVDict();

  G__cpp_setup_memvarMCVDict();

  G__cpp_setup_memfuncMCVDict();
  G__cpp_setup_globalMCVDict();
  G__cpp_setup_funcMCVDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMCVDict();
  return;
}
class G__cpp_setup_initMCVDict {
  public:
    G__cpp_setup_initMCVDict() { G__add_setup_func("MCVDict",(G__incsetup)(&G__cpp_setupMCVDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMCVDict() { G__remove_setup_func("MCVDict"); }
};
G__cpp_setup_initMCVDict G__cpp_setup_initializerMCVDict;

